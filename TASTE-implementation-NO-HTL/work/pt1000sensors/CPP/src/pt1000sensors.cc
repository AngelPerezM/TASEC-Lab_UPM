// Body file for function PT1000Sensors
// Generated by TASTE on 2021-05-17 23:45:12
// You can edit this file, it will not be overwritten
// Provided interfaces : readTemps
// Required interfaces : 
// User-defined properties for this function:
//   |_ Taste::Active_Interfaces = any
//   |_ Taste::coordinates = 78036 170074 104722 180547
// Timers              : 

#include "pt1000sensors.h"
#include "pt1000sensors_state.h"
#include "Context-pt1000sensors.h"
#include <iostream>

// Define and use function state inside this context structure
// avoid defining global/static variable elsewhere
pt1000sensors_state ctxt_pt1000sensors;

void pt1000sensors_startup(void)
{
    std::cout << "[PT1000Sensors] Startup" << std::endl;
}

void pt1000sensors_PI_readTemps (asn1SccPT1000s_All_Data *OUT_pt1000s_data)
{
    for (int i = 0; i < n_of_pt1000; ++i) {
        float temp;
        int rc = ctxt_pt1000sensors.all_pt1000[i].getTempCelsius(temp);
        
        if (rc < 0) {
            OUT_pt1000s_data->validity.arr[i] = asn1Sccinvalid;
        } else {
            OUT_pt1000s_data->validity.arr[i] = asn1Sccvalid;
            OUT_pt1000s_data->celsius.arr[i] = temp;
            OUT_pt1000s_data->raw.arr[i].vcc_volts =
                                ctxt_pt1000sensors.all_pt1000[i].getLastVccReading();
            OUT_pt1000s_data->raw.arr[i].pt1000 =
                                ctxt_pt1000sensors.all_pt1000[i].getLastThermistorReading();
        }
    }
}
