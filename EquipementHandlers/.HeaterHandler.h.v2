#ifndef HEATER_HANDLER_H
#define HEATER_HANDLER_H

/*******************************************************************************
 * 31/mar/2021 - Version 2.0
 *******************************************************************************/

/* Include section
 *******************************************************************************/
#include <stdint.h>

#include "Utils/FileLogger.h"

using namespace utils;

namespace equipementHandlers
{
  class HeaterHandler // Abstract base class.
  {
  protected:
    FileLogger fileLogger;

    int m_gpioPin;
    int m_gpioHandler;

    int m_realRange;
    int m_range;

    // PS = power supply:
    float m_maxPSVoltage_volts = 5.1; // voltage máximo brindado por la fuente.
    float m_maxPSCurrent_amps = 2.5;  // corriente máxima brindada por la fuente.

    float m_heaterResistance_ohm = 108.9;
    // corriente consumida con duty cycle = 100%
    float m_maxCurrent_amps = m_maxPSVoltage_volts/m_heaterResistance_ohm;
    // potencia disipada con duty cycle al 100%
    float m_maxPower_watts = m_maxPSVoltage_volts*m_maxCurrent_amps;

    int power2dutyCycle(float power);
    void calculateMaxPowerAndCurrent();

  public:
    // CONSTRUCTOR
    HeaterHandler(const int gpioPin = 13,
                  const char *fileName = "/home/pi/log.txt");
    HeaterHandler(HeaterHandler const &) = delete;
    HeaterHandler(HeaterHandler &&) = delete;
    HeaterHandler &operator=(HeaterHandler const &) = delete;
    HeaterHandler &operator=(HeaterHandler &&) = delete;

    // DESTRUCTOR
    virtual ~HeaterHandler() = 0;

    // ACCESORS
    float getHeaterResistance_ohm(void) const;

    float getMaxPSVoltage_volts(void) const;

    float getMaxPSCurrent_amps(void) const;

    // MANIPULATORS
    virtual void setPower(float power) = 0;

    void setHeaterResistance_ohm(const float heaterResitance_ohm);

    void setMaxPSVoltage_volts(const float maxPSVoltage_ohm);

    void setMaxPSCurrent_amps(const float maxPSCurrent_amps);

    void engage();

    void disengage();
  };

}
#endif // HEATER_HANDLER_H
