#ifndef GENERATED_ASN1SCC_tasec_lab_b2space_H
#define GENERATED_ASN1SCC_tasec_lab_b2space_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccSint T_Int16;


flag T_Int16_Equal(const T_Int16* pVal1, const T_Int16* pVal2);

void T_Int16_Initialize(T_Int16* pVal);

#define ERR_T_INT16		1  /**/
flag T_Int16_IsConstraintValid(const T_Int16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT16		2  /**/
#define T_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define T_Int16_REQUIRED_BITS_FOR_ENCODING        16

flag T_Int16_Encode(const T_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT16		3  /**/
flag T_Int16_Decode(T_Int16* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT16		4  /**/
#define T_Int16_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define T_Int16_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag T_Int16_ACN_Encode(const T_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT16		5  /**/
flag T_Int16_ACN_Decode(T_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- MGT_Raw_Data --------------------------------------------*/
typedef struct {
    T_Int16 x_axis;
    T_Int16 y_axis;
    T_Int16 z_axis;

} MGT_Raw_Data;

flag MGT_Raw_Data_Equal(const MGT_Raw_Data* pVal1, const MGT_Raw_Data* pVal2);

void MGT_Raw_Data_Initialize(MGT_Raw_Data* pVal);

#define ERR_MGT_RAW_DATA		358  /**/
#define ERR_MGT_RAW_DATA_X_AXIS_2		323  /**/
#define ERR_MGT_RAW_DATA_Y_AXIS_2		337  /**/
#define ERR_MGT_RAW_DATA_Z_AXIS_2		351  /**/
flag MGT_Raw_Data_IsConstraintValid(const MGT_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_MGT_RAW_DATA		359  /**/
#define ERR_UPER_ENCODE_MGT_RAW_DATA_X_AXIS_2		324  /**/
#define ERR_UPER_ENCODE_MGT_RAW_DATA_Y_AXIS_2		338  /**/
#define ERR_UPER_ENCODE_MGT_RAW_DATA_Z_AXIS_2		352  /**/
#define MGT_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       6 
#define MGT_Raw_Data_REQUIRED_BITS_FOR_ENCODING        48

flag MGT_Raw_Data_Encode(const MGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MGT_RAW_DATA		360  /**/
#define ERR_UPER_DECODE_MGT_RAW_DATA_X_AXIS_2		325  /**/
#define ERR_UPER_DECODE_MGT_RAW_DATA_Y_AXIS_2		339  /**/
#define ERR_UPER_DECODE_MGT_RAW_DATA_Z_AXIS_2		353  /**/
flag MGT_Raw_Data_Decode(MGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MGT_RAW_DATA		361  /**/
#define ERR_ACN_ENCODE_MGT_RAW_DATA_X_AXIS_2		326  /**/
#define ERR_ACN_ENCODE_MGT_RAW_DATA_Y_AXIS_2		340  /**/
#define ERR_ACN_ENCODE_MGT_RAW_DATA_Z_AXIS_2		354  /**/
#define MGT_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       6 
#define MGT_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        48

flag MGT_Raw_Data_ACN_Encode(const MGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MGT_RAW_DATA		362  /**/
#define ERR_ACN_DECODE_MGT_RAW_DATA_X_AXIS_2		327  /**/
#define ERR_ACN_DECODE_MGT_RAW_DATA_Y_AXIS_2		341  /**/
#define ERR_ACN_DECODE_MGT_RAW_DATA_Z_AXIS_2		355  /**/
flag MGT_Raw_Data_ACN_Decode(MGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- ACC_Raw_Data --------------------------------------------*/
typedef struct {
    T_Int16 x_axis;
    T_Int16 y_axis;
    T_Int16 z_axis;

} ACC_Raw_Data;

flag ACC_Raw_Data_Equal(const ACC_Raw_Data* pVal1, const ACC_Raw_Data* pVal2);

void ACC_Raw_Data_Initialize(ACC_Raw_Data* pVal);

#define ERR_ACC_RAW_DATA		456  /**/
#define ERR_ACC_RAW_DATA_X_AXIS_2		421  /**/
#define ERR_ACC_RAW_DATA_Y_AXIS_2		435  /**/
#define ERR_ACC_RAW_DATA_Z_AXIS_2		449  /**/
flag ACC_Raw_Data_IsConstraintValid(const ACC_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ACC_RAW_DATA		457  /**/
#define ERR_UPER_ENCODE_ACC_RAW_DATA_X_AXIS_2		422  /**/
#define ERR_UPER_ENCODE_ACC_RAW_DATA_Y_AXIS_2		436  /**/
#define ERR_UPER_ENCODE_ACC_RAW_DATA_Z_AXIS_2		450  /**/
#define ACC_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       6 
#define ACC_Raw_Data_REQUIRED_BITS_FOR_ENCODING        48

flag ACC_Raw_Data_Encode(const ACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACC_RAW_DATA		458  /**/
#define ERR_UPER_DECODE_ACC_RAW_DATA_X_AXIS_2		423  /**/
#define ERR_UPER_DECODE_ACC_RAW_DATA_Y_AXIS_2		437  /**/
#define ERR_UPER_DECODE_ACC_RAW_DATA_Z_AXIS_2		451  /**/
flag ACC_Raw_Data_Decode(ACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACC_RAW_DATA		459  /**/
#define ERR_ACN_ENCODE_ACC_RAW_DATA_X_AXIS_2		424  /**/
#define ERR_ACN_ENCODE_ACC_RAW_DATA_Y_AXIS_2		438  /**/
#define ERR_ACN_ENCODE_ACC_RAW_DATA_Z_AXIS_2		452  /**/
#define ACC_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       6 
#define ACC_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        48

flag ACC_Raw_Data_ACN_Encode(const ACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACC_RAW_DATA		460  /**/
#define ERR_ACN_DECODE_ACC_RAW_DATA_X_AXIS_2		425  /**/
#define ERR_ACN_DECODE_ACC_RAW_DATA_Y_AXIS_2		439  /**/
#define ERR_ACN_DECODE_ACC_RAW_DATA_Z_AXIS_2		453  /**/
flag ACC_Raw_Data_ACN_Decode(ACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- GYRO_Raw_Data --------------------------------------------*/
typedef struct {
    T_Int16 x_axis;
    T_Int16 y_axis;
    T_Int16 z_axis;

} GYRO_Raw_Data;

flag GYRO_Raw_Data_Equal(const GYRO_Raw_Data* pVal1, const GYRO_Raw_Data* pVal2);

void GYRO_Raw_Data_Initialize(GYRO_Raw_Data* pVal);

#define ERR_GYRO_RAW_DATA		554  /**/
#define ERR_GYRO_RAW_DATA_X_AXIS_2		519  /**/
#define ERR_GYRO_RAW_DATA_Y_AXIS_2		533  /**/
#define ERR_GYRO_RAW_DATA_Z_AXIS_2		547  /**/
flag GYRO_Raw_Data_IsConstraintValid(const GYRO_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GYRO_RAW_DATA		555  /**/
#define ERR_UPER_ENCODE_GYRO_RAW_DATA_X_AXIS_2		520  /**/
#define ERR_UPER_ENCODE_GYRO_RAW_DATA_Y_AXIS_2		534  /**/
#define ERR_UPER_ENCODE_GYRO_RAW_DATA_Z_AXIS_2		548  /**/
#define GYRO_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       6 
#define GYRO_Raw_Data_REQUIRED_BITS_FOR_ENCODING        48

flag GYRO_Raw_Data_Encode(const GYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GYRO_RAW_DATA		556  /**/
#define ERR_UPER_DECODE_GYRO_RAW_DATA_X_AXIS_2		521  /**/
#define ERR_UPER_DECODE_GYRO_RAW_DATA_Y_AXIS_2		535  /**/
#define ERR_UPER_DECODE_GYRO_RAW_DATA_Z_AXIS_2		549  /**/
flag GYRO_Raw_Data_Decode(GYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_GYRO_RAW_DATA		557  /**/
#define ERR_ACN_ENCODE_GYRO_RAW_DATA_X_AXIS_2		522  /**/
#define ERR_ACN_ENCODE_GYRO_RAW_DATA_Y_AXIS_2		536  /**/
#define ERR_ACN_ENCODE_GYRO_RAW_DATA_Z_AXIS_2		550  /**/
#define GYRO_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       6 
#define GYRO_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        48

flag GYRO_Raw_Data_ACN_Encode(const GYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_GYRO_RAW_DATA		558  /**/
#define ERR_ACN_DECODE_GYRO_RAW_DATA_X_AXIS_2		523  /**/
#define ERR_ACN_DECODE_GYRO_RAW_DATA_Y_AXIS_2		537  /**/
#define ERR_ACN_DECODE_GYRO_RAW_DATA_Z_AXIS_2		551  /**/
flag GYRO_Raw_Data_ACN_Decode(GYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt16;


flag T_UInt16_Equal(const T_UInt16* pVal1, const T_UInt16* pVal2);

void T_UInt16_Initialize(T_UInt16* pVal);

#define ERR_T_UINT16		8  /**/
flag T_UInt16_IsConstraintValid(const T_UInt16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT16		9  /**/
#define T_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define T_UInt16_REQUIRED_BITS_FOR_ENCODING        16

flag T_UInt16_Encode(const T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT16		10  /**/
flag T_UInt16_Decode(T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT16		11  /**/
#define T_UInt16_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define T_UInt16_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag T_UInt16_ACN_Encode(const T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT16		12  /**/
flag T_UInt16_ACN_Decode(T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt64;


flag T_UInt64_Equal(const T_UInt64* pVal1, const T_UInt64* pVal2);

void T_UInt64_Initialize(T_UInt64* pVal);

#define ERR_T_UINT64		15  /**/
flag T_UInt64_IsConstraintValid(const T_UInt64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT64		16  /**/
#define T_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define T_UInt64_REQUIRED_BITS_FOR_ENCODING        64

flag T_UInt64_Encode(const T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT64		17  /**/
flag T_UInt64_Decode(T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT64		18  /**/
#define T_UInt64_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define T_UInt64_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag T_UInt64_ACN_Encode(const T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT64		19  /**/
flag T_UInt64_ACN_Decode(T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real T_Float;


flag T_Float_Equal(const T_Float* pVal1, const T_Float* pVal2);

void T_Float_Initialize(T_Float* pVal);

#define ERR_T_FLOAT		22  /**/
flag T_Float_IsConstraintValid(const T_Float* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_FLOAT		23  /**/
#define T_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define T_Float_REQUIRED_BITS_FOR_ENCODING        104

flag T_Float_Encode(const T_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FLOAT		24  /**/
flag T_Float_Decode(T_Float* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_FLOAT		25  /**/
#define T_Float_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define T_Float_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag T_Float_ACN_Encode(const T_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_FLOAT		26  /**/
flag T_Float_ACN_Decode(T_Float* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- MGT_MilliGauss_Data --------------------------------------------*/
typedef struct {
    T_Float x_axis;
    T_Float y_axis;
    T_Float z_axis;

} MGT_MilliGauss_Data;

flag MGT_MilliGauss_Data_Equal(const MGT_MilliGauss_Data* pVal1, const MGT_MilliGauss_Data* pVal2);

void MGT_MilliGauss_Data_Initialize(MGT_MilliGauss_Data* pVal);

#define ERR_MGT_MILLIGAUSS_DATA		407  /**/
#define ERR_MGT_MILLIGAUSS_DATA_X_AXIS_2		372  /**/
#define ERR_MGT_MILLIGAUSS_DATA_Y_AXIS_2		386  /**/
#define ERR_MGT_MILLIGAUSS_DATA_Z_AXIS_2		400  /**/
flag MGT_MilliGauss_Data_IsConstraintValid(const MGT_MilliGauss_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA		408  /**/
#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		373  /**/
#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		387  /**/
#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		401  /**/
#define MGT_MilliGauss_Data_REQUIRED_BYTES_FOR_ENCODING       39 
#define MGT_MilliGauss_Data_REQUIRED_BITS_FOR_ENCODING        312

flag MGT_MilliGauss_Data_Encode(const MGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA		409  /**/
#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		374  /**/
#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		388  /**/
#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		402  /**/
flag MGT_MilliGauss_Data_Decode(MGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA		410  /**/
#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		375  /**/
#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		389  /**/
#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		403  /**/
#define MGT_MilliGauss_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define MGT_MilliGauss_Data_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag MGT_MilliGauss_Data_ACN_Encode(const MGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA		411  /**/
#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		376  /**/
#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		390  /**/
#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		404  /**/
flag MGT_MilliGauss_Data_ACN_Decode(MGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- ACC_MilliG_Data --------------------------------------------*/
typedef struct {
    T_Float x_axis;
    T_Float y_axis;
    T_Float z_axis;

} ACC_MilliG_Data;

flag ACC_MilliG_Data_Equal(const ACC_MilliG_Data* pVal1, const ACC_MilliG_Data* pVal2);

void ACC_MilliG_Data_Initialize(ACC_MilliG_Data* pVal);

#define ERR_ACC_MILLIG_DATA		505  /**/
#define ERR_ACC_MILLIG_DATA_X_AXIS_2		470  /**/
#define ERR_ACC_MILLIG_DATA_Y_AXIS_2		484  /**/
#define ERR_ACC_MILLIG_DATA_Z_AXIS_2		498  /**/
flag ACC_MilliG_Data_IsConstraintValid(const ACC_MilliG_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ACC_MILLIG_DATA		506  /**/
#define ERR_UPER_ENCODE_ACC_MILLIG_DATA_X_AXIS_2		471  /**/
#define ERR_UPER_ENCODE_ACC_MILLIG_DATA_Y_AXIS_2		485  /**/
#define ERR_UPER_ENCODE_ACC_MILLIG_DATA_Z_AXIS_2		499  /**/
#define ACC_MilliG_Data_REQUIRED_BYTES_FOR_ENCODING       39 
#define ACC_MilliG_Data_REQUIRED_BITS_FOR_ENCODING        312

flag ACC_MilliG_Data_Encode(const ACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACC_MILLIG_DATA		507  /**/
#define ERR_UPER_DECODE_ACC_MILLIG_DATA_X_AXIS_2		472  /**/
#define ERR_UPER_DECODE_ACC_MILLIG_DATA_Y_AXIS_2		486  /**/
#define ERR_UPER_DECODE_ACC_MILLIG_DATA_Z_AXIS_2		500  /**/
flag ACC_MilliG_Data_Decode(ACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACC_MILLIG_DATA		508  /**/
#define ERR_ACN_ENCODE_ACC_MILLIG_DATA_X_AXIS_2		473  /**/
#define ERR_ACN_ENCODE_ACC_MILLIG_DATA_Y_AXIS_2		487  /**/
#define ERR_ACN_ENCODE_ACC_MILLIG_DATA_Z_AXIS_2		501  /**/
#define ACC_MilliG_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define ACC_MilliG_Data_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag ACC_MilliG_Data_ACN_Encode(const ACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACC_MILLIG_DATA		509  /**/
#define ERR_ACN_DECODE_ACC_MILLIG_DATA_X_AXIS_2		474  /**/
#define ERR_ACN_DECODE_ACC_MILLIG_DATA_Y_AXIS_2		488  /**/
#define ERR_ACN_DECODE_ACC_MILLIG_DATA_Z_AXIS_2		502  /**/
flag ACC_MilliG_Data_ACN_Decode(ACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- GYRO_MilliDPS_Data --------------------------------------------*/
typedef struct {
    T_Float x_axis;
    T_Float y_axis;
    T_Float z_axis;

} GYRO_MilliDPS_Data;

flag GYRO_MilliDPS_Data_Equal(const GYRO_MilliDPS_Data* pVal1, const GYRO_MilliDPS_Data* pVal2);

void GYRO_MilliDPS_Data_Initialize(GYRO_MilliDPS_Data* pVal);

#define ERR_GYRO_MILLIDPS_DATA		603  /**/
#define ERR_GYRO_MILLIDPS_DATA_X_AXIS_2		568  /**/
#define ERR_GYRO_MILLIDPS_DATA_Y_AXIS_2		582  /**/
#define ERR_GYRO_MILLIDPS_DATA_Z_AXIS_2		596  /**/
flag GYRO_MilliDPS_Data_IsConstraintValid(const GYRO_MilliDPS_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA		604  /**/
#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA_X_AXIS_2		569  /**/
#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		583  /**/
#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		597  /**/
#define GYRO_MilliDPS_Data_REQUIRED_BYTES_FOR_ENCODING       39 
#define GYRO_MilliDPS_Data_REQUIRED_BITS_FOR_ENCODING        312

flag GYRO_MilliDPS_Data_Encode(const GYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA		605  /**/
#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA_X_AXIS_2		570  /**/
#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		584  /**/
#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		598  /**/
flag GYRO_MilliDPS_Data_Decode(GYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA		606  /**/
#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA_X_AXIS_2		571  /**/
#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		585  /**/
#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		599  /**/
#define GYRO_MilliDPS_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define GYRO_MilliDPS_Data_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag GYRO_MilliDPS_Data_ACN_Encode(const GYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA		607  /**/
#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA_X_AXIS_2		572  /**/
#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		586  /**/
#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		600  /**/
flag GYRO_MilliDPS_Data_ACN_Decode(GYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode);

/*-- PT1000s_Raw_Data_elem --------------------------------------------*/
typedef struct {
    T_Float vcc_volts;
    T_Float pt1000;

} PT1000s_Raw_Data_elem;

typedef struct {
    
    PT1000s_Raw_Data_elem arr[6];
} PT1000s_Raw_Data;

flag PT1000s_Raw_Data_elem_Equal(const PT1000s_Raw_Data_elem* pVal1, const PT1000s_Raw_Data_elem* pVal2);

flag PT1000s_Raw_Data_Equal(const PT1000s_Raw_Data* pVal1, const PT1000s_Raw_Data* pVal2);

void PT1000s_Raw_Data_elem_Initialize(PT1000s_Raw_Data_elem* pVal);
void PT1000s_Raw_Data_Initialize(PT1000s_Raw_Data* pVal);

#define ERR_PT1000S_RAW_DATA		1114  /**/
#define ERR_PT1000S_RAW_DATA_ELM		1107  /**/
#define ERR_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1086  /**/
#define ERR_PT1000S_RAW_DATA_ELM_PT1000_2		1100  /**/
flag PT1000s_Raw_Data_IsConstraintValid(const PT1000s_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_RAW_DATA		1115  /**/
#define ERR_UPER_ENCODE_PT1000S_RAW_DATA_ELM		1108  /**/
#define ERR_UPER_ENCODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1087  /**/
#define ERR_UPER_ENCODE_PT1000S_RAW_DATA_ELM_PT1000_2		1101  /**/
#define PT1000s_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       156 
#define PT1000s_Raw_Data_REQUIRED_BITS_FOR_ENCODING        1248

flag PT1000s_Raw_Data_Encode(const PT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_RAW_DATA		1116  /**/
#define ERR_UPER_DECODE_PT1000S_RAW_DATA_ELM		1109  /**/
#define ERR_UPER_DECODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1088  /**/
#define ERR_UPER_DECODE_PT1000S_RAW_DATA_ELM_PT1000_2		1102  /**/
flag PT1000s_Raw_Data_Decode(PT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_RAW_DATA		1117  /**/
#define ERR_ACN_ENCODE_PT1000S_RAW_DATA_ELM		1110  /**/
#define ERR_ACN_ENCODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1089  /**/
#define ERR_ACN_ENCODE_PT1000S_RAW_DATA_ELM_PT1000_2		1103  /**/
#define PT1000s_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       156 
#define PT1000s_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        1248

flag PT1000s_Raw_Data_ACN_Encode(const PT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_RAW_DATA		1118  /**/
#define ERR_ACN_DECODE_PT1000S_RAW_DATA_ELM		1111  /**/
#define ERR_ACN_DECODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1090  /**/
#define ERR_ACN_DECODE_PT1000S_RAW_DATA_ELM_PT1000_2		1104  /**/
flag PT1000s_Raw_Data_ACN_Decode(PT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    T_Float arr[6];
} PT1000s_Celsius_Data;

flag PT1000s_Celsius_Data_Equal(const PT1000s_Celsius_Data* pVal1, const PT1000s_Celsius_Data* pVal2);

void PT1000s_Celsius_Data_Initialize(PT1000s_Celsius_Data* pVal);

#define ERR_PT1000S_CELSIUS_DATA		1135  /**/
#define ERR_PT1000S_CELSIUS_DATA_ELM_2		1128  /**/
flag PT1000s_Celsius_Data_IsConstraintValid(const PT1000s_Celsius_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_CELSIUS_DATA		1136  /**/
#define ERR_UPER_ENCODE_PT1000S_CELSIUS_DATA_ELM_2		1129  /**/
#define PT1000s_Celsius_Data_REQUIRED_BYTES_FOR_ENCODING       78 
#define PT1000s_Celsius_Data_REQUIRED_BITS_FOR_ENCODING        624

flag PT1000s_Celsius_Data_Encode(const PT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_CELSIUS_DATA		1137  /**/
#define ERR_UPER_DECODE_PT1000S_CELSIUS_DATA_ELM_2		1130  /**/
flag PT1000s_Celsius_Data_Decode(PT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_CELSIUS_DATA		1138  /**/
#define ERR_ACN_ENCODE_PT1000S_CELSIUS_DATA_ELM_2		1131  /**/
#define PT1000s_Celsius_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       78 
#define PT1000s_Celsius_Data_REQUIRED_BITS_FOR_ACN_ENCODING        624

flag PT1000s_Celsius_Data_ACN_Encode(const PT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_CELSIUS_DATA		1139  /**/
#define ERR_ACN_DECODE_PT1000S_CELSIUS_DATA_ELM_2		1132  /**/
flag PT1000s_Celsius_Data_ACN_Decode(PT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PS_Calibration_Data --------------------------------------------*/
typedef struct {
    T_UInt16 c1;
    T_UInt16 c2;
    T_UInt16 c3;
    T_UInt16 c4;
    T_UInt16 c5;
    T_UInt16 c6;
    T_Float sens_t1;
    T_Float off_t1;
    T_Float tcs;
    T_Float tco;
    T_Float tref;
    T_Float temp_sens;

} PS_Calibration_Data;

flag PS_Calibration_Data_Equal(const PS_Calibration_Data* pVal1, const PS_Calibration_Data* pVal2);

void PS_Calibration_Data_Initialize(PS_Calibration_Data* pVal);

#define ERR_PS_CALIBRATION_DATA		1415  /**/
#define ERR_PS_CALIBRATION_DATA_C1_2		1254  /**/
#define ERR_PS_CALIBRATION_DATA_C2_2		1268  /**/
#define ERR_PS_CALIBRATION_DATA_C3_2		1282  /**/
#define ERR_PS_CALIBRATION_DATA_C4_2		1296  /**/
#define ERR_PS_CALIBRATION_DATA_C5_2		1310  /**/
#define ERR_PS_CALIBRATION_DATA_C6_2		1324  /**/
#define ERR_PS_CALIBRATION_DATA_SENS_T1_2		1338  /**/
#define ERR_PS_CALIBRATION_DATA_OFF_T1_2		1352  /**/
#define ERR_PS_CALIBRATION_DATA_TCS_2		1366  /**/
#define ERR_PS_CALIBRATION_DATA_TCO_2		1380  /**/
#define ERR_PS_CALIBRATION_DATA_TREF_2		1394  /**/
#define ERR_PS_CALIBRATION_DATA_TEMP_SENS_2		1408  /**/
flag PS_Calibration_Data_IsConstraintValid(const PS_Calibration_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA		1416  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C1_2		1255  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C2_2		1269  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C3_2		1283  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C4_2		1297  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C5_2		1311  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C6_2		1325  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_SENS_T1_2		1339  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_OFF_T1_2		1353  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TCS_2		1367  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TCO_2		1381  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TREF_2		1395  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1409  /**/
#define PS_Calibration_Data_REQUIRED_BYTES_FOR_ENCODING       90 
#define PS_Calibration_Data_REQUIRED_BITS_FOR_ENCODING        720

flag PS_Calibration_Data_Encode(const PS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_CALIBRATION_DATA		1417  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C1_2		1256  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C2_2		1270  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C3_2		1284  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C4_2		1298  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C5_2		1312  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C6_2		1326  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_SENS_T1_2		1340  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_OFF_T1_2		1354  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TCS_2		1368  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TCO_2		1382  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TREF_2		1396  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1410  /**/
flag PS_Calibration_Data_Decode(PS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA		1418  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C1_2		1257  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C2_2		1271  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C3_2		1285  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C4_2		1299  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C5_2		1313  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C6_2		1327  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_SENS_T1_2		1341  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_OFF_T1_2		1355  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TCS_2		1369  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TCO_2		1383  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TREF_2		1397  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1411  /**/
#define PS_Calibration_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       90 
#define PS_Calibration_Data_REQUIRED_BITS_FOR_ACN_ENCODING        720

flag PS_Calibration_Data_ACN_Encode(const PS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_CALIBRATION_DATA		1419  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C1_2		1258  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C2_2		1272  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C3_2		1286  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C4_2		1300  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C5_2		1314  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C6_2		1328  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_SENS_T1_2		1342  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_OFF_T1_2		1356  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TCS_2		1370  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TCO_2		1384  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TREF_2		1398  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1412  /**/
flag PS_Calibration_Data_ACN_Decode(PS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real T_Double;


flag T_Double_Equal(const T_Double* pVal1, const T_Double* pVal2);

void T_Double_Initialize(T_Double* pVal);

#define ERR_T_DOUBLE		29  /**/
flag T_Double_IsConstraintValid(const T_Double* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_DOUBLE		30  /**/
#define T_Double_REQUIRED_BYTES_FOR_ENCODING       13 
#define T_Double_REQUIRED_BITS_FOR_ENCODING        104

flag T_Double_Encode(const T_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_DOUBLE		31  /**/
flag T_Double_Decode(T_Double* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_DOUBLE		32  /**/
#define T_Double_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define T_Double_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag T_Double_ACN_Encode(const T_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_DOUBLE		33  /**/
flag T_Double_ACN_Decode(T_Double* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- GPS_PVT --------------------------------------------*/
typedef enum {
    not_seen = 0,
    no_fix = 1,
    two_dims = 2,
    three_dims = 3
} GPS_PVT_mode;

// please use the following macros to avoid breaking code.
#define GPS_PVT_mode_not_seen not_seen
#define GPS_PVT_mode_no_fix no_fix
#define GPS_PVT_mode_two_dims two_dims
#define GPS_PVT_mode_three_dims three_dims
typedef struct {
    GPS_PVT_mode mode;
    T_Double date_and_time;
    T_Double ept;
    T_Double latitude;
    T_Double epy;
    T_Double longitude;
    T_Double epx;
    T_Double altitude;
    T_Double epv;
    T_Double course;
    T_Double epd;
    T_Double speed;
    T_Double eps;
    T_Double climb;
    T_Double epc;

} GPS_PVT;

flag GPS_PVT_mode_Equal(const GPS_PVT_mode* pVal1, const GPS_PVT_mode* pVal2);

flag GPS_PVT_Equal(const GPS_PVT* pVal1, const GPS_PVT* pVal2);

void GPS_PVT_mode_Initialize(GPS_PVT_mode* pVal);
void GPS_PVT_Initialize(GPS_PVT* pVal);

#define ERR_GPS_PVT		309  /**/
#define ERR_GPS_PVT_MODE		106  /**/
#define ERR_GPS_PVT_DATE_AND_TIME_2		120  /**/
#define ERR_GPS_PVT_EPT_2		134  /**/
#define ERR_GPS_PVT_LATITUDE_2		148  /**/
#define ERR_GPS_PVT_EPY_2		162  /**/
#define ERR_GPS_PVT_LONGITUDE_2		176  /**/
#define ERR_GPS_PVT_EPX_2		190  /**/
#define ERR_GPS_PVT_ALTITUDE_2		204  /**/
#define ERR_GPS_PVT_EPV_2		218  /**/
#define ERR_GPS_PVT_COURSE_2		232  /**/
#define ERR_GPS_PVT_EPD_2		246  /**/
#define ERR_GPS_PVT_SPEED_2		260  /**/
#define ERR_GPS_PVT_EPS_2		274  /**/
#define ERR_GPS_PVT_CLIMB_2		288  /**/
#define ERR_GPS_PVT_EPC_2		302  /**/
flag GPS_PVT_IsConstraintValid(const GPS_PVT* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GPS_PVT		310  /**/
#define ERR_UPER_ENCODE_GPS_PVT_MODE		107  /**/
#define ERR_UPER_ENCODE_GPS_PVT_DATE_AND_TIME_2		121  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPT_2		135  /**/
#define ERR_UPER_ENCODE_GPS_PVT_LATITUDE_2		149  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPY_2		163  /**/
#define ERR_UPER_ENCODE_GPS_PVT_LONGITUDE_2		177  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPX_2		191  /**/
#define ERR_UPER_ENCODE_GPS_PVT_ALTITUDE_2		205  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPV_2		219  /**/
#define ERR_UPER_ENCODE_GPS_PVT_COURSE_2		233  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPD_2		247  /**/
#define ERR_UPER_ENCODE_GPS_PVT_SPEED_2		261  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPS_2		275  /**/
#define ERR_UPER_ENCODE_GPS_PVT_CLIMB_2		289  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPC_2		303  /**/
#define GPS_PVT_REQUIRED_BYTES_FOR_ENCODING       183 
#define GPS_PVT_REQUIRED_BITS_FOR_ENCODING        1458

flag GPS_PVT_Encode(const GPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GPS_PVT		311  /**/
#define ERR_UPER_DECODE_GPS_PVT_MODE		108  /**/
#define ERR_UPER_DECODE_GPS_PVT_DATE_AND_TIME_2		122  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPT_2		136  /**/
#define ERR_UPER_DECODE_GPS_PVT_LATITUDE_2		150  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPY_2		164  /**/
#define ERR_UPER_DECODE_GPS_PVT_LONGITUDE_2		178  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPX_2		192  /**/
#define ERR_UPER_DECODE_GPS_PVT_ALTITUDE_2		206  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPV_2		220  /**/
#define ERR_UPER_DECODE_GPS_PVT_COURSE_2		234  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPD_2		248  /**/
#define ERR_UPER_DECODE_GPS_PVT_SPEED_2		262  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPS_2		276  /**/
#define ERR_UPER_DECODE_GPS_PVT_CLIMB_2		290  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPC_2		304  /**/
flag GPS_PVT_Decode(GPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_GPS_PVT		312  /**/
#define ERR_ACN_ENCODE_GPS_PVT_MODE		109  /**/
#define ERR_ACN_ENCODE_GPS_PVT_DATE_AND_TIME_2		123  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPT_2		137  /**/
#define ERR_ACN_ENCODE_GPS_PVT_LATITUDE_2		151  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPY_2		165  /**/
#define ERR_ACN_ENCODE_GPS_PVT_LONGITUDE_2		179  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPX_2		193  /**/
#define ERR_ACN_ENCODE_GPS_PVT_ALTITUDE_2		207  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPV_2		221  /**/
#define ERR_ACN_ENCODE_GPS_PVT_COURSE_2		235  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPD_2		249  /**/
#define ERR_ACN_ENCODE_GPS_PVT_SPEED_2		263  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPS_2		277  /**/
#define ERR_ACN_ENCODE_GPS_PVT_CLIMB_2		291  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPC_2		305  /**/
#define GPS_PVT_REQUIRED_BYTES_FOR_ACN_ENCODING       183 
#define GPS_PVT_REQUIRED_BITS_FOR_ACN_ENCODING        1458

flag GPS_PVT_ACN_Encode(const GPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_GPS_PVT		313  /**/
#define ERR_ACN_DECODE_GPS_PVT_MODE		110  /**/
#define ERR_ACN_DECODE_GPS_PVT_DATE_AND_TIME_2		124  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPT_2		138  /**/
#define ERR_ACN_DECODE_GPS_PVT_LATITUDE_2		152  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPY_2		166  /**/
#define ERR_ACN_DECODE_GPS_PVT_LONGITUDE_2		180  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPX_2		194  /**/
#define ERR_ACN_DECODE_GPS_PVT_ALTITUDE_2		208  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPV_2		222  /**/
#define ERR_ACN_DECODE_GPS_PVT_COURSE_2		236  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPD_2		250  /**/
#define ERR_ACN_DECODE_GPS_PVT_SPEED_2		264  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPS_2		278  /**/
#define ERR_ACN_DECODE_GPS_PVT_CLIMB_2		292  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPC_2		306  /**/
flag GPS_PVT_ACN_Decode(GPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    valid = 0,
    invalid = 1
} Content_Validity;

// please use the following macros to avoid breaking code.
#define Content_Validity_valid valid
#define Content_Validity_invalid invalid

flag Content_Validity_Equal(const Content_Validity* pVal1, const Content_Validity* pVal2);

void Content_Validity_Initialize(Content_Validity* pVal);

#define ERR_CONTENT_VALIDITY		1814  /**/
flag Content_Validity_IsConstraintValid(const Content_Validity* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_CONTENT_VALIDITY		1815  /**/
#define Content_Validity_REQUIRED_BYTES_FOR_ENCODING       1 
#define Content_Validity_REQUIRED_BITS_FOR_ENCODING        1

flag Content_Validity_Encode(const Content_Validity* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CONTENT_VALIDITY		1816  /**/
flag Content_Validity_Decode(Content_Validity* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_CONTENT_VALIDITY		1817  /**/
#define Content_Validity_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define Content_Validity_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag Content_Validity_ACN_Encode(const Content_Validity* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_CONTENT_VALIDITY		1818  /**/
flag Content_Validity_ACN_Decode(Content_Validity* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- IMU_All_Data --------------------------------------------*/
typedef struct {
    MGT_Raw_Data mgt_raw;
    MGT_MilliGauss_Data mgt_mgauss;
    ACC_Raw_Data accel_raw;
    ACC_MilliG_Data accel_mg;
    GYRO_Raw_Data gyro_raw;
    GYRO_MilliDPS_Data gyro_mdps;
    Content_Validity mgt_valid;
    Content_Validity acc_valid;
    Content_Validity gyro_valid;

} IMU_All_Data;

flag IMU_All_Data_Equal(const IMU_All_Data* pVal1, const IMU_All_Data* pVal2);

void IMU_All_Data_Initialize(IMU_All_Data* pVal);

#define ERR_IMU_ALL_DATA		988  /**/
#define ERR_IMU_ALL_DATA_MGT_RAW_2		659  /**/
#define ERR_IMU_ALL_DATA_MGT_MGAUSS_2		715  /**/
#define ERR_IMU_ALL_DATA_ACCEL_RAW_2		771  /**/
#define ERR_IMU_ALL_DATA_ACCEL_MG_2		827  /**/
#define ERR_IMU_ALL_DATA_GYRO_RAW_2		883  /**/
#define ERR_IMU_ALL_DATA_GYRO_MDPS_2		939  /**/
#define ERR_IMU_ALL_DATA_MGT_VALID_2		953  /**/
#define ERR_IMU_ALL_DATA_ACC_VALID_2		967  /**/
#define ERR_IMU_ALL_DATA_GYRO_VALID_2		981  /**/
flag IMU_All_Data_IsConstraintValid(const IMU_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_IMU_ALL_DATA		989  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_MGT_RAW_2		660  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_MGT_MGAUSS_2		716  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_ACCEL_RAW_2		772  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_ACCEL_MG_2		828  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_GYRO_RAW_2		884  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_GYRO_MDPS_2		940  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_MGT_VALID_2		954  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_ACC_VALID_2		968  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_GYRO_VALID_2		982  /**/
#define IMU_All_Data_REQUIRED_BYTES_FOR_ENCODING       136 
#define IMU_All_Data_REQUIRED_BITS_FOR_ENCODING        1083

flag IMU_All_Data_Encode(const IMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_IMU_ALL_DATA		990  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_MGT_RAW_2		661  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_MGT_MGAUSS_2		717  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_ACCEL_RAW_2		773  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_ACCEL_MG_2		829  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_GYRO_RAW_2		885  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_GYRO_MDPS_2		941  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_MGT_VALID_2		955  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_ACC_VALID_2		969  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_GYRO_VALID_2		983  /**/
flag IMU_All_Data_Decode(IMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_IMU_ALL_DATA		991  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_MGT_RAW_2		662  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_MGT_MGAUSS_2		718  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_ACCEL_RAW_2		774  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_ACCEL_MG_2		830  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_GYRO_RAW_2		886  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_GYRO_MDPS_2		942  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_MGT_VALID_2		956  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_ACC_VALID_2		970  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_GYRO_VALID_2		984  /**/
#define IMU_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       136 
#define IMU_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        1083

flag IMU_All_Data_ACN_Encode(const IMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_IMU_ALL_DATA		992  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_MGT_RAW_2		663  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_MGT_MGAUSS_2		719  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_ACCEL_RAW_2		775  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_ACCEL_MG_2		831  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_GYRO_RAW_2		887  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_GYRO_MDPS_2		943  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_MGT_VALID_2		957  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_ACC_VALID_2		971  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_GYRO_VALID_2		985  /**/
flag IMU_All_Data_ACN_Decode(IMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

/*-- TC74s_All_Data_elem --------------------------------------------*/
typedef struct {
    T_Float temperature;
    Content_Validity validity;

    struct {
        unsigned int validity:1;
    } exist;

} TC74s_All_Data_elem;

typedef struct {
    
    TC74s_All_Data_elem arr[5];
} TC74s_All_Data;

flag TC74s_All_Data_elem_Equal(const TC74s_All_Data_elem* pVal1, const TC74s_All_Data_elem* pVal2);

flag TC74s_All_Data_Equal(const TC74s_All_Data* pVal1, const TC74s_All_Data* pVal2);

void TC74s_All_Data_elem_Initialize(TC74s_All_Data_elem* pVal);
void TC74s_All_Data_Initialize(TC74s_All_Data* pVal);

#define ERR_TC74S_ALL_DATA		1051  /**/
#define ERR_TC74S_ALL_DATA_ELM		1044  /**/
#define ERR_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1023  /**/
#define ERR_TC74S_ALL_DATA_ELM_VALIDITY_2		1037  /**/
flag TC74s_All_Data_IsConstraintValid(const TC74s_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC74S_ALL_DATA		1052  /**/
#define ERR_UPER_ENCODE_TC74S_ALL_DATA_ELM		1045  /**/
#define ERR_UPER_ENCODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1024  /**/
#define ERR_UPER_ENCODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1038  /**/
#define TC74s_All_Data_REQUIRED_BYTES_FOR_ENCODING       67 
#define TC74s_All_Data_REQUIRED_BITS_FOR_ENCODING        530

flag TC74s_All_Data_Encode(const TC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC74S_ALL_DATA		1053  /**/
#define ERR_UPER_DECODE_TC74S_ALL_DATA_ELM		1046  /**/
#define ERR_UPER_DECODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1025  /**/
#define ERR_UPER_DECODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1039  /**/
flag TC74s_All_Data_Decode(TC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TC74S_ALL_DATA		1054  /**/
#define ERR_ACN_ENCODE_TC74S_ALL_DATA_ELM		1047  /**/
#define ERR_ACN_ENCODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1026  /**/
#define ERR_ACN_ENCODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1040  /**/
#define TC74s_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       67 
#define TC74s_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        530

flag TC74s_All_Data_ACN_Encode(const TC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TC74S_ALL_DATA		1055  /**/
#define ERR_ACN_DECODE_TC74S_ALL_DATA_ELM		1048  /**/
#define ERR_ACN_DECODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1027  /**/
#define ERR_ACN_DECODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1041  /**/
flag TC74s_All_Data_ACN_Decode(TC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PT1000s_All_Data --------------------------------------------*/


typedef struct {
    
    Content_Validity arr[6];
} PT1000s_All_Data_validity;
typedef struct {
    PT1000s_Raw_Data raw;
    PT1000s_Celsius_Data celsius;
    PT1000s_All_Data_validity validity;

} PT1000s_All_Data;

flag PT1000s_All_Data_validity_Equal(const PT1000s_All_Data_validity* pVal1, const PT1000s_All_Data_validity* pVal2);

flag PT1000s_All_Data_Equal(const PT1000s_All_Data* pVal1, const PT1000s_All_Data* pVal2);

void PT1000s_All_Data_validity_Initialize(PT1000s_All_Data_validity* pVal);
void PT1000s_All_Data_Initialize(PT1000s_All_Data* pVal);

#define ERR_PT1000S_ALL_DATA		1240  /**/
#define ERR_PT1000S_ALL_DATA_RAW_2		1184  /**/
#define ERR_PT1000S_ALL_DATA_CELSIUS_2		1212  /**/
#define ERR_PT1000S_ALL_DATA_VALIDITY		1233  /**/
#define ERR_PT1000S_ALL_DATA_VALIDITY_ELM_2		1226  /**/
flag PT1000s_All_Data_IsConstraintValid(const PT1000s_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_ALL_DATA		1241  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_RAW_2		1185  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_CELSIUS_2		1213  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_VALIDITY		1234  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1227  /**/
#define PT1000s_All_Data_REQUIRED_BYTES_FOR_ENCODING       235 
#define PT1000s_All_Data_REQUIRED_BITS_FOR_ENCODING        1878

flag PT1000s_All_Data_Encode(const PT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_ALL_DATA		1242  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_RAW_2		1186  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_CELSIUS_2		1214  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_VALIDITY		1235  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1228  /**/
flag PT1000s_All_Data_Decode(PT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_ALL_DATA		1243  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_RAW_2		1187  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_CELSIUS_2		1215  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_VALIDITY		1236  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1229  /**/
#define PT1000s_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       235 
#define PT1000s_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        1878

flag PT1000s_All_Data_ACN_Encode(const PT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_ALL_DATA		1244  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_RAW_2		1188  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_CELSIUS_2		1216  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_VALIDITY		1237  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1230  /**/
flag PT1000s_All_Data_ACN_Decode(PT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Heater_Data --------------------------------------------*/
typedef struct {
    T_Float power_watts;
    Content_Validity validity;

    struct {
        unsigned int validity:1;
    } exist;

} Heater_Data;

flag Heater_Data_Equal(const Heater_Data* pVal1, const Heater_Data* pVal2);

void Heater_Data_Initialize(Heater_Data* pVal);

#define ERR_HEATER_DATA		1807  /**/
#define ERR_HEATER_DATA_POWER_WATTS_2		1786  /**/
#define ERR_HEATER_DATA_VALIDITY_2		1800  /**/
flag Heater_Data_IsConstraintValid(const Heater_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HEATER_DATA		1808  /**/
#define ERR_UPER_ENCODE_HEATER_DATA_POWER_WATTS_2		1787  /**/
#define ERR_UPER_ENCODE_HEATER_DATA_VALIDITY_2		1801  /**/
#define Heater_Data_REQUIRED_BYTES_FOR_ENCODING       14 
#define Heater_Data_REQUIRED_BITS_FOR_ENCODING        106

flag Heater_Data_Encode(const Heater_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HEATER_DATA		1809  /**/
#define ERR_UPER_DECODE_HEATER_DATA_POWER_WATTS_2		1788  /**/
#define ERR_UPER_DECODE_HEATER_DATA_VALIDITY_2		1802  /**/
flag Heater_Data_Decode(Heater_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HEATER_DATA		1810  /**/
#define ERR_ACN_ENCODE_HEATER_DATA_POWER_WATTS_2		1789  /**/
#define ERR_ACN_ENCODE_HEATER_DATA_VALIDITY_2		1803  /**/
#define Heater_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       14 
#define Heater_Data_REQUIRED_BITS_FOR_ACN_ENCODING        106

flag Heater_Data_ACN_Encode(const Heater_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HEATER_DATA		1811  /**/
#define ERR_ACN_DECODE_HEATER_DATA_POWER_WATTS_2		1790  /**/
#define ERR_ACN_DECODE_HEATER_DATA_VALIDITY_2		1804  /**/
flag Heater_Data_ACN_Decode(Heater_Data* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int32;


flag T_Int32_Equal(const T_Int32* pVal1, const T_Int32* pVal2);

void T_Int32_Initialize(T_Int32* pVal);

#define ERR_T_INT32		3445  /**/
flag T_Int32_IsConstraintValid(const T_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT32		3446  /**/
#define T_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag T_Int32_Encode(const T_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		3447  /**/
flag T_Int32_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		3448  /**/
#define T_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag T_Int32_ACN_Encode(const T_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		3449  /**/
flag T_Int32_ACN_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    T_Int32 arr[5];
} TC74s_I2CBuses;

flag TC74s_I2CBuses_Equal(const TC74s_I2CBuses* pVal1, const TC74s_I2CBuses* pVal2);

void TC74s_I2CBuses_Initialize(TC74s_I2CBuses* pVal);

#define ERR_TC74S_I2CBUSES		1009  /**/
#define ERR_TC74S_I2CBUSES_ELM_2		1002  /**/
flag TC74s_I2CBuses_IsConstraintValid(const TC74s_I2CBuses* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC74S_I2CBUSES		1010  /**/
#define ERR_UPER_ENCODE_TC74S_I2CBUSES_ELM_2		1003  /**/
#define TC74s_I2CBuses_REQUIRED_BYTES_FOR_ENCODING       20 
#define TC74s_I2CBuses_REQUIRED_BITS_FOR_ENCODING        160

flag TC74s_I2CBuses_Encode(const TC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC74S_I2CBUSES		1011  /**/
#define ERR_UPER_DECODE_TC74S_I2CBUSES_ELM_2		1004  /**/
flag TC74s_I2CBuses_Decode(TC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TC74S_I2CBUSES		1012  /**/
#define ERR_ACN_ENCODE_TC74S_I2CBUSES_ELM_2		1005  /**/
#define TC74s_I2CBuses_REQUIRED_BYTES_FOR_ACN_ENCODING       20 
#define TC74s_I2CBuses_REQUIRED_BITS_FOR_ACN_ENCODING        160

flag TC74s_I2CBuses_ACN_Encode(const TC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TC74S_I2CBUSES		1013  /**/
#define ERR_ACN_DECODE_TC74S_I2CBUSES_ELM_2		1006  /**/
flag TC74s_I2CBuses_ACN_Decode(TC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    T_Int32 arr[6];
} PT1000s_Channels;

flag PT1000s_Channels_Equal(const PT1000s_Channels* pVal1, const PT1000s_Channels* pVal2);

void PT1000s_Channels_Initialize(PT1000s_Channels* pVal);

#define ERR_PT1000S_CHANNELS		1072  /**/
#define ERR_PT1000S_CHANNELS_ELM_2		1065  /**/
flag PT1000s_Channels_IsConstraintValid(const PT1000s_Channels* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_CHANNELS		1073  /**/
#define ERR_UPER_ENCODE_PT1000S_CHANNELS_ELM_2		1066  /**/
#define PT1000s_Channels_REQUIRED_BYTES_FOR_ENCODING       24 
#define PT1000s_Channels_REQUIRED_BITS_FOR_ENCODING        192

flag PT1000s_Channels_Encode(const PT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_CHANNELS		1074  /**/
#define ERR_UPER_DECODE_PT1000S_CHANNELS_ELM_2		1067  /**/
flag PT1000s_Channels_Decode(PT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_CHANNELS		1075  /**/
#define ERR_ACN_ENCODE_PT1000S_CHANNELS_ELM_2		1068  /**/
#define PT1000s_Channels_REQUIRED_BYTES_FOR_ACN_ENCODING       24 
#define PT1000s_Channels_REQUIRED_BITS_FOR_ACN_ENCODING        192

flag PT1000s_Channels_ACN_Encode(const PT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_CHANNELS		1076  /**/
#define ERR_ACN_DECODE_PT1000S_CHANNELS_ELM_2		1069  /**/
flag PT1000s_Channels_ACN_Decode(PT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PS_Processed_Data --------------------------------------------*/
typedef struct {
    T_Int32 pressure;
    T_Int32 temp;

} PS_Processed_Data;

flag PS_Processed_Data_Equal(const PS_Processed_Data* pVal1, const PS_Processed_Data* pVal2);

void PS_Processed_Data_Initialize(PS_Processed_Data* pVal);

#define ERR_PS_PROCESSED_DATA		1485  /**/
#define ERR_PS_PROCESSED_DATA_PRESSURE_2		1464  /**/
#define ERR_PS_PROCESSED_DATA_TEMP_2		1478  /**/
flag PS_Processed_Data_IsConstraintValid(const PS_Processed_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_PROCESSED_DATA		1486  /**/
#define ERR_UPER_ENCODE_PS_PROCESSED_DATA_PRESSURE_2		1465  /**/
#define ERR_UPER_ENCODE_PS_PROCESSED_DATA_TEMP_2		1479  /**/
#define PS_Processed_Data_REQUIRED_BYTES_FOR_ENCODING       8 
#define PS_Processed_Data_REQUIRED_BITS_FOR_ENCODING        64

flag PS_Processed_Data_Encode(const PS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_PROCESSED_DATA		1487  /**/
#define ERR_UPER_DECODE_PS_PROCESSED_DATA_PRESSURE_2		1466  /**/
#define ERR_UPER_DECODE_PS_PROCESSED_DATA_TEMP_2		1480  /**/
flag PS_Processed_Data_Decode(PS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_PROCESSED_DATA		1488  /**/
#define ERR_ACN_ENCODE_PS_PROCESSED_DATA_PRESSURE_2		1467  /**/
#define ERR_ACN_ENCODE_PS_PROCESSED_DATA_TEMP_2		1481  /**/
#define PS_Processed_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define PS_Processed_Data_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag PS_Processed_Data_ACN_Encode(const PS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_PROCESSED_DATA		1489  /**/
#define ERR_ACN_DECODE_PS_PROCESSED_DATA_PRESSURE_2		1468  /**/
#define ERR_ACN_DECODE_PS_PROCESSED_DATA_TEMP_2		1482  /**/
flag PS_Processed_Data_ACN_Decode(PS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt32;


flag T_UInt32_Equal(const T_UInt32* pVal1, const T_UInt32* pVal2);

void T_UInt32_Initialize(T_UInt32* pVal);

#define ERR_T_UINT32		3452  /**/
flag T_UInt32_IsConstraintValid(const T_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT32		3453  /**/
#define T_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag T_UInt32_Encode(const T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		3454  /**/
flag T_UInt32_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		3455  /**/
#define T_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag T_UInt32_ACN_Encode(const T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		3456  /**/
flag T_UInt32_ACN_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PS_Raw_Data --------------------------------------------*/
typedef struct {
    T_UInt32 d1;
    T_UInt32 d2;

} PS_Raw_Data;

flag PS_Raw_Data_Equal(const PS_Raw_Data* pVal1, const PS_Raw_Data* pVal2);

void PS_Raw_Data_Initialize(PS_Raw_Data* pVal);

#define ERR_PS_RAW_DATA		1450  /**/
#define ERR_PS_RAW_DATA_D1_2		1429  /**/
#define ERR_PS_RAW_DATA_D2_2		1443  /**/
flag PS_Raw_Data_IsConstraintValid(const PS_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_RAW_DATA		1451  /**/
#define ERR_UPER_ENCODE_PS_RAW_DATA_D1_2		1430  /**/
#define ERR_UPER_ENCODE_PS_RAW_DATA_D2_2		1444  /**/
#define PS_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       8 
#define PS_Raw_Data_REQUIRED_BITS_FOR_ENCODING        64

flag PS_Raw_Data_Encode(const PS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_RAW_DATA		1452  /**/
#define ERR_UPER_DECODE_PS_RAW_DATA_D1_2		1431  /**/
#define ERR_UPER_DECODE_PS_RAW_DATA_D2_2		1445  /**/
flag PS_Raw_Data_Decode(PS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_RAW_DATA		1453  /**/
#define ERR_ACN_ENCODE_PS_RAW_DATA_D1_2		1432  /**/
#define ERR_ACN_ENCODE_PS_RAW_DATA_D2_2		1446  /**/
#define PS_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define PS_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag PS_Raw_Data_ACN_Encode(const PS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_RAW_DATA		1454  /**/
#define ERR_ACN_DECODE_PS_RAW_DATA_D1_2		1433  /**/
#define ERR_ACN_DECODE_PS_RAW_DATA_D2_2		1447  /**/
flag PS_Raw_Data_ACN_Decode(PS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PS_All_Data --------------------------------------------*/
typedef struct {
    PS_Calibration_Data calib;
    PS_Raw_Data raw;
    PS_Processed_Data processed;
    Content_Validity validity;

    struct {
        unsigned int calib:1;
        unsigned int validity:1;
    } exist;

} PS_All_Data;

flag PS_All_Data_Equal(const PS_All_Data* pVal1, const PS_All_Data* pVal2);

void PS_All_Data_Initialize(PS_All_Data* pVal);

#define ERR_PS_ALL_DATA		1772  /**/
#define ERR_PS_ALL_DATA_CALIB_2		1667  /**/
#define ERR_PS_ALL_DATA_RAW_2		1709  /**/
#define ERR_PS_ALL_DATA_PROCESSED_2		1751  /**/
#define ERR_PS_ALL_DATA_VALIDITY_2		1765  /**/
flag PS_All_Data_IsConstraintValid(const PS_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_ALL_DATA		1773  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_CALIB_2		1668  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_RAW_2		1710  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_PROCESSED_2		1752  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_VALIDITY_2		1766  /**/
#define PS_All_Data_REQUIRED_BYTES_FOR_ENCODING       107 
#define PS_All_Data_REQUIRED_BITS_FOR_ENCODING        851

flag PS_All_Data_Encode(const PS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_ALL_DATA		1774  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_CALIB_2		1669  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_RAW_2		1711  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_PROCESSED_2		1753  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_VALIDITY_2		1767  /**/
flag PS_All_Data_Decode(PS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_ALL_DATA		1775  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_CALIB_2		1670  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_RAW_2		1712  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_PROCESSED_2		1754  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_VALIDITY_2		1768  /**/
#define PS_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       107 
#define PS_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        851

flag PS_All_Data_ACN_Encode(const PS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_ALL_DATA		1776  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_CALIB_2		1671  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_RAW_2		1713  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_PROCESSED_2		1755  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_VALIDITY_2		1769  /**/
flag PS_All_Data_ACN_Decode(PS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- OBSW_DP_Data --------------------------------------------*/
/*-- OBSW_DP_Data_gps --------------------------------------------*/
typedef struct {
    GPS_PVT data;
    Content_Validity validity;

    struct {
        unsigned int validity:1;
    } exist;

} OBSW_DP_Data_gps;
/*-- OBSW_DP_Data_imu --------------------------------------------*/
typedef struct {
    IMU_All_Data data;
    T_Double timestamp;

} OBSW_DP_Data_imu;
/*-- OBSW_DP_Data_tc74s --------------------------------------------*/
typedef struct {
    TC74s_All_Data data;
    T_Double timestamp;

} OBSW_DP_Data_tc74s;
/*-- OBSW_DP_Data_pt1000s --------------------------------------------*/
typedef struct {
    PT1000s_All_Data data;
    T_Double timestamp;

} OBSW_DP_Data_pt1000s;
/*-- OBSW_DP_Data_ps1 --------------------------------------------*/
typedef struct {
    PS_All_Data data;
    T_Double timestamp;

} OBSW_DP_Data_ps1;
/*-- OBSW_DP_Data_ps2 --------------------------------------------*/
typedef struct {
    PS_All_Data data;
    T_Double timestamp;

} OBSW_DP_Data_ps2;
/*-- OBSW_DP_Data_heater1 --------------------------------------------*/
typedef struct {
    T_Float data;
    T_Double timestamp;

} OBSW_DP_Data_heater1;
/*-- OBSW_DP_Data_heater2 --------------------------------------------*/
typedef struct {
    Heater_Data data;
    T_Double timestamp;

} OBSW_DP_Data_heater2;
/*-- OBSW_DP_Data_anemometer --------------------------------------------*/
typedef struct {
    T_UInt64 data;
    T_Double timestamp;

} OBSW_DP_Data_anemometer;
typedef struct {
    OBSW_DP_Data_gps gps;
    OBSW_DP_Data_imu imu;
    OBSW_DP_Data_tc74s tc74s;
    OBSW_DP_Data_pt1000s pt1000s;
    OBSW_DP_Data_ps1 ps1;
    OBSW_DP_Data_ps2 ps2;
    OBSW_DP_Data_heater1 heater1;
    OBSW_DP_Data_heater2 heater2;
    OBSW_DP_Data_anemometer anemometer;

    struct {
        unsigned int gps:1;
        unsigned int imu:1;
        unsigned int tc74s:1;
        unsigned int pt1000s:1;
        unsigned int ps1:1;
        unsigned int ps2:1;
        unsigned int heater1:1;
        unsigned int heater2:1;
        unsigned int anemometer:1;
    } exist;

} OBSW_DP_Data;

flag OBSW_DP_Data_gps_Equal(const OBSW_DP_Data_gps* pVal1, const OBSW_DP_Data_gps* pVal2);

flag OBSW_DP_Data_imu_Equal(const OBSW_DP_Data_imu* pVal1, const OBSW_DP_Data_imu* pVal2);

flag OBSW_DP_Data_tc74s_Equal(const OBSW_DP_Data_tc74s* pVal1, const OBSW_DP_Data_tc74s* pVal2);

flag OBSW_DP_Data_pt1000s_Equal(const OBSW_DP_Data_pt1000s* pVal1, const OBSW_DP_Data_pt1000s* pVal2);

flag OBSW_DP_Data_ps1_Equal(const OBSW_DP_Data_ps1* pVal1, const OBSW_DP_Data_ps1* pVal2);

flag OBSW_DP_Data_ps2_Equal(const OBSW_DP_Data_ps2* pVal1, const OBSW_DP_Data_ps2* pVal2);

flag OBSW_DP_Data_heater1_Equal(const OBSW_DP_Data_heater1* pVal1, const OBSW_DP_Data_heater1* pVal2);

flag OBSW_DP_Data_heater2_Equal(const OBSW_DP_Data_heater2* pVal1, const OBSW_DP_Data_heater2* pVal2);

flag OBSW_DP_Data_anemometer_Equal(const OBSW_DP_Data_anemometer* pVal1, const OBSW_DP_Data_anemometer* pVal2);

flag OBSW_DP_Data_Equal(const OBSW_DP_Data* pVal1, const OBSW_DP_Data* pVal2);

void OBSW_DP_Data_gps_Initialize(OBSW_DP_Data_gps* pVal);
void OBSW_DP_Data_imu_Initialize(OBSW_DP_Data_imu* pVal);
void OBSW_DP_Data_tc74s_Initialize(OBSW_DP_Data_tc74s* pVal);
void OBSW_DP_Data_pt1000s_Initialize(OBSW_DP_Data_pt1000s* pVal);
void OBSW_DP_Data_ps1_Initialize(OBSW_DP_Data_ps1* pVal);
void OBSW_DP_Data_ps2_Initialize(OBSW_DP_Data_ps2* pVal);
void OBSW_DP_Data_heater1_Initialize(OBSW_DP_Data_heater1* pVal);
void OBSW_DP_Data_heater2_Initialize(OBSW_DP_Data_heater2* pVal);
void OBSW_DP_Data_anemometer_Initialize(OBSW_DP_Data_anemometer* pVal);
void OBSW_DP_Data_Initialize(OBSW_DP_Data* pVal);

#define ERR_OBSW_DP_DATA		3438  /**/
#define ERR_OBSW_DP_DATA_GPS		2052  /**/
#define ERR_OBSW_DP_DATA_GPS_DATA_2		2031  /**/
#define ERR_OBSW_DP_DATA_GPS_VALIDITY_2		2045  /**/
#define ERR_OBSW_DP_DATA_IMU		2465  /**/
#define ERR_OBSW_DP_DATA_IMU_DATA_2		2444  /**/
#define ERR_OBSW_DP_DATA_IMU_TIMESTAMP_2		2458  /**/
#define ERR_OBSW_DP_DATA_TC74S		2535  /**/
#define ERR_OBSW_DP_DATA_TC74S_DATA_2		2514  /**/
#define ERR_OBSW_DP_DATA_TC74S_TIMESTAMP_2		2528  /**/
#define ERR_OBSW_DP_DATA_PT1000S		2668  /**/
#define ERR_OBSW_DP_DATA_PT1000S_DATA_2		2647  /**/
#define ERR_OBSW_DP_DATA_PT1000S_TIMESTAMP_2		2661  /**/
#define ERR_OBSW_DP_DATA_PS1		2983  /**/
#define ERR_OBSW_DP_DATA_PS1_DATA_2		2962  /**/
#define ERR_OBSW_DP_DATA_PS1_TIMESTAMP_2		2976  /**/
#define ERR_OBSW_DP_DATA_PS2		3298  /**/
#define ERR_OBSW_DP_DATA_PS2_DATA_2		3277  /**/
#define ERR_OBSW_DP_DATA_PS2_TIMESTAMP_2		3291  /**/
#define ERR_OBSW_DP_DATA_HEATER1		3333  /**/
#define ERR_OBSW_DP_DATA_HEATER1_DATA_2		3312  /**/
#define ERR_OBSW_DP_DATA_HEATER1_TIMESTAMP_2		3326  /**/
#define ERR_OBSW_DP_DATA_HEATER2		3396  /**/
#define ERR_OBSW_DP_DATA_HEATER2_DATA_2		3375  /**/
#define ERR_OBSW_DP_DATA_HEATER2_TIMESTAMP_2		3389  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER		3431  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER_DATA_2		3410  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER_TIMESTAMP_2		3424  /**/
flag OBSW_DP_Data_IsConstraintValid(const OBSW_DP_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_OBSW_DP_DATA		3439  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS		2053  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS_DATA_2		2032  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS_VALIDITY_2		2046  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU		2466  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU_DATA_2		2445  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU_TIMESTAMP_2		2459  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S		2536  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S_DATA_2		2515  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S_TIMESTAMP_2		2529  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S		2669  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S_DATA_2		2648  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S_TIMESTAMP_2		2662  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1		2984  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1_DATA_2		2963  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1_TIMESTAMP_2		2977  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2		3299  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2_DATA_2		3278  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2_TIMESTAMP_2		3292  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1		3334  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1_DATA_2		3313  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1_TIMESTAMP_2		3327  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2		3397  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2_DATA_2		3376  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2_TIMESTAMP_2		3390  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER		3432  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3411  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER_TIMESTAMP_2		3425  /**/
#define OBSW_DP_Data_REQUIRED_BYTES_FOR_ENCODING       971 
#define OBSW_DP_Data_REQUIRED_BITS_FOR_ENCODING        7768

flag OBSW_DP_Data_Encode(const OBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_OBSW_DP_DATA		3440  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS		2054  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS_DATA_2		2033  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS_VALIDITY_2		2047  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU		2467  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU_DATA_2		2446  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU_TIMESTAMP_2		2460  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S		2537  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S_DATA_2		2516  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S_TIMESTAMP_2		2530  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S		2670  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S_DATA_2		2649  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S_TIMESTAMP_2		2663  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1		2985  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1_DATA_2		2964  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1_TIMESTAMP_2		2978  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2		3300  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2_DATA_2		3279  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2_TIMESTAMP_2		3293  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1		3335  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1_DATA_2		3314  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1_TIMESTAMP_2		3328  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2		3398  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2_DATA_2		3377  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2_TIMESTAMP_2		3391  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER		3433  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3412  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER_TIMESTAMP_2		3426  /**/
flag OBSW_DP_Data_Decode(OBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_OBSW_DP_DATA		3441  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS		2055  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS_DATA_2		2034  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS_VALIDITY_2		2048  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU		2468  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU_DATA_2		2447  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU_TIMESTAMP_2		2461  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S		2538  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S_DATA_2		2517  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S_TIMESTAMP_2		2531  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S		2671  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S_DATA_2		2650  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S_TIMESTAMP_2		2664  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1		2986  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1_DATA_2		2965  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1_TIMESTAMP_2		2979  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2		3301  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2_DATA_2		3280  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2_TIMESTAMP_2		3294  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1		3336  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1_DATA_2		3315  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1_TIMESTAMP_2		3329  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2		3399  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2_DATA_2		3378  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2_TIMESTAMP_2		3392  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER		3434  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3413  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER_TIMESTAMP_2		3427  /**/
#define OBSW_DP_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       971 
#define OBSW_DP_Data_REQUIRED_BITS_FOR_ACN_ENCODING        7768

flag OBSW_DP_Data_ACN_Encode(const OBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_OBSW_DP_DATA		3442  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS		2056  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS_DATA_2		2035  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS_VALIDITY_2		2049  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU		2469  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU_DATA_2		2448  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU_TIMESTAMP_2		2462  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S		2539  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S_DATA_2		2518  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S_TIMESTAMP_2		2532  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S		2672  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S_DATA_2		2651  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S_TIMESTAMP_2		2665  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1		2987  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1_DATA_2		2966  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1_TIMESTAMP_2		2980  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2		3302  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2_DATA_2		3281  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2_TIMESTAMP_2		3295  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1		3337  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1_DATA_2		3316  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1_TIMESTAMP_2		3330  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2		3400  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2_DATA_2		3379  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2_TIMESTAMP_2		3393  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER		3435  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3414  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER_TIMESTAMP_2		3428  /**/
flag OBSW_DP_Data_ACN_Decode(OBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int8;


flag T_Int8_Equal(const T_Int8* pVal1, const T_Int8* pVal2);

void T_Int8_Initialize(T_Int8* pVal);

#define ERR_T_INT8		3459  /**/
flag T_Int8_IsConstraintValid(const T_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT8		3460  /**/
#define T_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag T_Int8_Encode(const T_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		3461  /**/
flag T_Int8_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		3462  /**/
#define T_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_Int8_ACN_Encode(const T_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		3463  /**/
flag T_Int8_ACN_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt8;


flag T_UInt8_Equal(const T_UInt8* pVal1, const T_UInt8* pVal2);

void T_UInt8_Initialize(T_UInt8* pVal);

#define ERR_T_UINT8		3466  /**/
flag T_UInt8_IsConstraintValid(const T_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT8		3467  /**/
#define T_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag T_UInt8_Encode(const T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		3468  /**/
flag T_UInt8_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		3469  /**/
#define T_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_UInt8_ACN_Encode(const T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		3470  /**/
flag T_UInt8_ACN_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- SPI_ID --------------------------------------------*/
typedef struct {
    T_UInt8 bus;
    T_UInt8 cs;

} SPI_ID;

flag SPI_ID_Equal(const SPI_ID* pVal1, const SPI_ID* pVal2);

void SPI_ID_Initialize(SPI_ID* pVal);

#define ERR_SPI_ID		64  /**/
#define ERR_SPI_ID_BUS_2		43  /**/
#define ERR_SPI_ID_CS_2		57  /**/
flag SPI_ID_IsConstraintValid(const SPI_ID* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SPI_ID		65  /**/
#define ERR_UPER_ENCODE_SPI_ID_BUS_2		44  /**/
#define ERR_UPER_ENCODE_SPI_ID_CS_2		58  /**/
#define SPI_ID_REQUIRED_BYTES_FOR_ENCODING       2 
#define SPI_ID_REQUIRED_BITS_FOR_ENCODING        16

flag SPI_ID_Encode(const SPI_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SPI_ID		66  /**/
#define ERR_UPER_DECODE_SPI_ID_BUS_2		45  /**/
#define ERR_UPER_DECODE_SPI_ID_CS_2		59  /**/
flag SPI_ID_Decode(SPI_ID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SPI_ID		67  /**/
#define ERR_ACN_ENCODE_SPI_ID_BUS_2		46  /**/
#define ERR_ACN_ENCODE_SPI_ID_CS_2		60  /**/
#define SPI_ID_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define SPI_ID_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag SPI_ID_ACN_Encode(const SPI_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SPI_ID		68  /**/
#define ERR_ACN_DECODE_SPI_ID_BUS_2		47  /**/
#define ERR_ACN_DECODE_SPI_ID_CS_2		61  /**/
flag SPI_ID_ACN_Decode(SPI_ID* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- I2C_ID --------------------------------------------*/
typedef struct {
    T_UInt8 bus;
    T_UInt8 address;

} I2C_ID;

flag I2C_ID_Equal(const I2C_ID* pVal1, const I2C_ID* pVal2);

void I2C_ID_Initialize(I2C_ID* pVal);

#define ERR_I2C_ID		99  /**/
#define ERR_I2C_ID_BUS_2		78  /**/
#define ERR_I2C_ID_ADDRESS_2		92  /**/
flag I2C_ID_IsConstraintValid(const I2C_ID* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_I2C_ID		100  /**/
#define ERR_UPER_ENCODE_I2C_ID_BUS_2		79  /**/
#define ERR_UPER_ENCODE_I2C_ID_ADDRESS_2		93  /**/
#define I2C_ID_REQUIRED_BYTES_FOR_ENCODING       2 
#define I2C_ID_REQUIRED_BITS_FOR_ENCODING        16

flag I2C_ID_Encode(const I2C_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_I2C_ID		101  /**/
#define ERR_UPER_DECODE_I2C_ID_BUS_2		80  /**/
#define ERR_UPER_DECODE_I2C_ID_ADDRESS_2		94  /**/
flag I2C_ID_Decode(I2C_ID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_I2C_ID		102  /**/
#define ERR_ACN_ENCODE_I2C_ID_BUS_2		81  /**/
#define ERR_ACN_ENCODE_I2C_ID_ADDRESS_2		95  /**/
#define I2C_ID_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define I2C_ID_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag I2C_ID_ACN_Encode(const I2C_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_I2C_ID		103  /**/
#define ERR_ACN_DECODE_I2C_ID_BUS_2		82  /**/
#define ERR_ACN_DECODE_I2C_ID_ADDRESS_2		96  /**/
flag I2C_ID_ACN_Decode(I2C_ID* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag T_Boolean;


flag T_Boolean_Equal(const T_Boolean* pVal1, const T_Boolean* pVal2);

void T_Boolean_Initialize(T_Boolean* pVal);

#define ERR_T_BOOLEAN		3473  /**/
flag T_Boolean_IsConstraintValid(const T_Boolean* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_BOOLEAN		3474  /**/
#define T_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag T_Boolean_Encode(const T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		3475  /**/
flag T_Boolean_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		3476  /**/
#define T_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_Boolean_ACN_Encode(const T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		3477  /**/
flag T_Boolean_ACN_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- T_Null_Record --------------------------------------------*/
typedef struct {

} T_Null_Record;

flag T_Null_Record_Equal(const T_Null_Record* pVal1, const T_Null_Record* pVal2);

void T_Null_Record_Initialize(T_Null_Record* pVal);

#define ERR_T_NULL_RECORD		3480  /**/
flag T_Null_Record_IsConstraintValid(const T_Null_Record* pVal, int* pErrCode);

#define T_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define T_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag T_Null_Record_Encode(const T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag T_Null_Record_Decode(T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define T_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define T_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag T_Null_Record_ACN_Encode(const T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag T_Null_Record_ACN_Decode(T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

extern const asn1SccSint n_of_TC74s;
extern const asn1SccSint n_of_pt1000; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
