#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccSint asn1SccT_Int16;


flag asn1SccT_Int16_Equal(const asn1SccT_Int16* pVal1, const asn1SccT_Int16* pVal2);

void asn1SccT_Int16_Initialize(asn1SccT_Int16* pVal);

#define ERR_T_INT16		1  /**/
flag asn1SccT_Int16_IsConstraintValid(const asn1SccT_Int16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT16		2  /**/
#define asn1SccT_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_Int16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccT_Int16_Encode(const asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT16		3  /**/
flag asn1SccT_Int16_Decode(asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT16		4  /**/
#define asn1SccT_Int16_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define asn1SccT_Int16_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag asn1SccT_Int16_ACN_Encode(const asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT16		5  /**/
flag asn1SccT_Int16_ACN_Decode(asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccMGT_Raw_Data --------------------------------------------*/
typedef struct {
    asn1SccT_Int16 x_axis;
    asn1SccT_Int16 y_axis;
    asn1SccT_Int16 z_axis;

} asn1SccMGT_Raw_Data;

flag asn1SccMGT_Raw_Data_Equal(const asn1SccMGT_Raw_Data* pVal1, const asn1SccMGT_Raw_Data* pVal2);

void asn1SccMGT_Raw_Data_Initialize(asn1SccMGT_Raw_Data* pVal);

#define ERR_MGT_RAW_DATA		372  /**/
#define ERR_MGT_RAW_DATA_X_AXIS_2		337  /**/
#define ERR_MGT_RAW_DATA_Y_AXIS_2		351  /**/
#define ERR_MGT_RAW_DATA_Z_AXIS_2		365  /**/
flag asn1SccMGT_Raw_Data_IsConstraintValid(const asn1SccMGT_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_MGT_RAW_DATA		373  /**/
#define ERR_UPER_ENCODE_MGT_RAW_DATA_X_AXIS_2		338  /**/
#define ERR_UPER_ENCODE_MGT_RAW_DATA_Y_AXIS_2		352  /**/
#define ERR_UPER_ENCODE_MGT_RAW_DATA_Z_AXIS_2		366  /**/
#define asn1SccMGT_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       6 
#define asn1SccMGT_Raw_Data_REQUIRED_BITS_FOR_ENCODING        48

flag asn1SccMGT_Raw_Data_Encode(const asn1SccMGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MGT_RAW_DATA		374  /**/
#define ERR_UPER_DECODE_MGT_RAW_DATA_X_AXIS_2		339  /**/
#define ERR_UPER_DECODE_MGT_RAW_DATA_Y_AXIS_2		353  /**/
#define ERR_UPER_DECODE_MGT_RAW_DATA_Z_AXIS_2		367  /**/
flag asn1SccMGT_Raw_Data_Decode(asn1SccMGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MGT_RAW_DATA		375  /**/
#define ERR_ACN_ENCODE_MGT_RAW_DATA_X_AXIS_2		340  /**/
#define ERR_ACN_ENCODE_MGT_RAW_DATA_Y_AXIS_2		354  /**/
#define ERR_ACN_ENCODE_MGT_RAW_DATA_Z_AXIS_2		368  /**/
#define asn1SccMGT_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       6 
#define asn1SccMGT_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        48

flag asn1SccMGT_Raw_Data_ACN_Encode(const asn1SccMGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MGT_RAW_DATA		376  /**/
#define ERR_ACN_DECODE_MGT_RAW_DATA_X_AXIS_2		341  /**/
#define ERR_ACN_DECODE_MGT_RAW_DATA_Y_AXIS_2		355  /**/
#define ERR_ACN_DECODE_MGT_RAW_DATA_Z_AXIS_2		369  /**/
flag asn1SccMGT_Raw_Data_ACN_Decode(asn1SccMGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccACC_Raw_Data --------------------------------------------*/
typedef struct {
    asn1SccT_Int16 x_axis;
    asn1SccT_Int16 y_axis;
    asn1SccT_Int16 z_axis;

} asn1SccACC_Raw_Data;

flag asn1SccACC_Raw_Data_Equal(const asn1SccACC_Raw_Data* pVal1, const asn1SccACC_Raw_Data* pVal2);

void asn1SccACC_Raw_Data_Initialize(asn1SccACC_Raw_Data* pVal);

#define ERR_ACC_RAW_DATA		470  /**/
#define ERR_ACC_RAW_DATA_X_AXIS_2		435  /**/
#define ERR_ACC_RAW_DATA_Y_AXIS_2		449  /**/
#define ERR_ACC_RAW_DATA_Z_AXIS_2		463  /**/
flag asn1SccACC_Raw_Data_IsConstraintValid(const asn1SccACC_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ACC_RAW_DATA		471  /**/
#define ERR_UPER_ENCODE_ACC_RAW_DATA_X_AXIS_2		436  /**/
#define ERR_UPER_ENCODE_ACC_RAW_DATA_Y_AXIS_2		450  /**/
#define ERR_UPER_ENCODE_ACC_RAW_DATA_Z_AXIS_2		464  /**/
#define asn1SccACC_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       6 
#define asn1SccACC_Raw_Data_REQUIRED_BITS_FOR_ENCODING        48

flag asn1SccACC_Raw_Data_Encode(const asn1SccACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACC_RAW_DATA		472  /**/
#define ERR_UPER_DECODE_ACC_RAW_DATA_X_AXIS_2		437  /**/
#define ERR_UPER_DECODE_ACC_RAW_DATA_Y_AXIS_2		451  /**/
#define ERR_UPER_DECODE_ACC_RAW_DATA_Z_AXIS_2		465  /**/
flag asn1SccACC_Raw_Data_Decode(asn1SccACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACC_RAW_DATA		473  /**/
#define ERR_ACN_ENCODE_ACC_RAW_DATA_X_AXIS_2		438  /**/
#define ERR_ACN_ENCODE_ACC_RAW_DATA_Y_AXIS_2		452  /**/
#define ERR_ACN_ENCODE_ACC_RAW_DATA_Z_AXIS_2		466  /**/
#define asn1SccACC_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       6 
#define asn1SccACC_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        48

flag asn1SccACC_Raw_Data_ACN_Encode(const asn1SccACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACC_RAW_DATA		474  /**/
#define ERR_ACN_DECODE_ACC_RAW_DATA_X_AXIS_2		439  /**/
#define ERR_ACN_DECODE_ACC_RAW_DATA_Y_AXIS_2		453  /**/
#define ERR_ACN_DECODE_ACC_RAW_DATA_Z_AXIS_2		467  /**/
flag asn1SccACC_Raw_Data_ACN_Decode(asn1SccACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccGYRO_Raw_Data --------------------------------------------*/
typedef struct {
    asn1SccT_Int16 x_axis;
    asn1SccT_Int16 y_axis;
    asn1SccT_Int16 z_axis;

} asn1SccGYRO_Raw_Data;

flag asn1SccGYRO_Raw_Data_Equal(const asn1SccGYRO_Raw_Data* pVal1, const asn1SccGYRO_Raw_Data* pVal2);

void asn1SccGYRO_Raw_Data_Initialize(asn1SccGYRO_Raw_Data* pVal);

#define ERR_GYRO_RAW_DATA		568  /**/
#define ERR_GYRO_RAW_DATA_X_AXIS_2		533  /**/
#define ERR_GYRO_RAW_DATA_Y_AXIS_2		547  /**/
#define ERR_GYRO_RAW_DATA_Z_AXIS_2		561  /**/
flag asn1SccGYRO_Raw_Data_IsConstraintValid(const asn1SccGYRO_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GYRO_RAW_DATA		569  /**/
#define ERR_UPER_ENCODE_GYRO_RAW_DATA_X_AXIS_2		534  /**/
#define ERR_UPER_ENCODE_GYRO_RAW_DATA_Y_AXIS_2		548  /**/
#define ERR_UPER_ENCODE_GYRO_RAW_DATA_Z_AXIS_2		562  /**/
#define asn1SccGYRO_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       6 
#define asn1SccGYRO_Raw_Data_REQUIRED_BITS_FOR_ENCODING        48

flag asn1SccGYRO_Raw_Data_Encode(const asn1SccGYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GYRO_RAW_DATA		570  /**/
#define ERR_UPER_DECODE_GYRO_RAW_DATA_X_AXIS_2		535  /**/
#define ERR_UPER_DECODE_GYRO_RAW_DATA_Y_AXIS_2		549  /**/
#define ERR_UPER_DECODE_GYRO_RAW_DATA_Z_AXIS_2		563  /**/
flag asn1SccGYRO_Raw_Data_Decode(asn1SccGYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_GYRO_RAW_DATA		571  /**/
#define ERR_ACN_ENCODE_GYRO_RAW_DATA_X_AXIS_2		536  /**/
#define ERR_ACN_ENCODE_GYRO_RAW_DATA_Y_AXIS_2		550  /**/
#define ERR_ACN_ENCODE_GYRO_RAW_DATA_Z_AXIS_2		564  /**/
#define asn1SccGYRO_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       6 
#define asn1SccGYRO_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        48

flag asn1SccGYRO_Raw_Data_ACN_Encode(const asn1SccGYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_GYRO_RAW_DATA		572  /**/
#define ERR_ACN_DECODE_GYRO_RAW_DATA_X_AXIS_2		537  /**/
#define ERR_ACN_DECODE_GYRO_RAW_DATA_Y_AXIS_2		551  /**/
#define ERR_ACN_DECODE_GYRO_RAW_DATA_Z_AXIS_2		565  /**/
flag asn1SccGYRO_Raw_Data_ACN_Decode(asn1SccGYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt16;


flag asn1SccT_UInt16_Equal(const asn1SccT_UInt16* pVal1, const asn1SccT_UInt16* pVal2);

void asn1SccT_UInt16_Initialize(asn1SccT_UInt16* pVal);

#define ERR_T_UINT16		8  /**/
flag asn1SccT_UInt16_IsConstraintValid(const asn1SccT_UInt16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT16		9  /**/
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccT_UInt16_Encode(const asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT16		10  /**/
flag asn1SccT_UInt16_Decode(asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT16		11  /**/
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag asn1SccT_UInt16_ACN_Encode(const asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT16		12  /**/
flag asn1SccT_UInt16_ACN_Decode(asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt64;


flag asn1SccT_UInt64_Equal(const asn1SccT_UInt64* pVal1, const asn1SccT_UInt64* pVal2);

void asn1SccT_UInt64_Initialize(asn1SccT_UInt64* pVal);

#define ERR_T_UINT64		15  /**/
flag asn1SccT_UInt64_IsConstraintValid(const asn1SccT_UInt64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT64		16  /**/
#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_UInt64_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccT_UInt64_Encode(const asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT64		17  /**/
flag asn1SccT_UInt64_Decode(asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT64		18  /**/
#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define asn1SccT_UInt64_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag asn1SccT_UInt64_ACN_Encode(const asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT64		19  /**/
flag asn1SccT_UInt64_ACN_Decode(asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real asn1SccT_Float;


flag asn1SccT_Float_Equal(const asn1SccT_Float* pVal1, const asn1SccT_Float* pVal2);

void asn1SccT_Float_Initialize(asn1SccT_Float* pVal);

#define ERR_T_FLOAT		22  /**/
flag asn1SccT_Float_IsConstraintValid(const asn1SccT_Float* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_FLOAT		23  /**/
#define asn1SccT_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Float_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccT_Float_Encode(const asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FLOAT		24  /**/
flag asn1SccT_Float_Decode(asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_FLOAT		25  /**/
#define asn1SccT_Float_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccT_Float_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccT_Float_ACN_Encode(const asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_FLOAT		26  /**/
flag asn1SccT_Float_ACN_Decode(asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccMGT_MilliGauss_Data --------------------------------------------*/
typedef struct {
    asn1SccT_Float x_axis;
    asn1SccT_Float y_axis;
    asn1SccT_Float z_axis;

} asn1SccMGT_MilliGauss_Data;

flag asn1SccMGT_MilliGauss_Data_Equal(const asn1SccMGT_MilliGauss_Data* pVal1, const asn1SccMGT_MilliGauss_Data* pVal2);

void asn1SccMGT_MilliGauss_Data_Initialize(asn1SccMGT_MilliGauss_Data* pVal);

#define ERR_MGT_MILLIGAUSS_DATA		421  /**/
#define ERR_MGT_MILLIGAUSS_DATA_X_AXIS_2		386  /**/
#define ERR_MGT_MILLIGAUSS_DATA_Y_AXIS_2		400  /**/
#define ERR_MGT_MILLIGAUSS_DATA_Z_AXIS_2		414  /**/
flag asn1SccMGT_MilliGauss_Data_IsConstraintValid(const asn1SccMGT_MilliGauss_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA		422  /**/
#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		387  /**/
#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		401  /**/
#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		415  /**/
#define asn1SccMGT_MilliGauss_Data_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccMGT_MilliGauss_Data_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccMGT_MilliGauss_Data_Encode(const asn1SccMGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA		423  /**/
#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		388  /**/
#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		402  /**/
#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		416  /**/
flag asn1SccMGT_MilliGauss_Data_Decode(asn1SccMGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA		424  /**/
#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		389  /**/
#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		403  /**/
#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		417  /**/
#define asn1SccMGT_MilliGauss_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define asn1SccMGT_MilliGauss_Data_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag asn1SccMGT_MilliGauss_Data_ACN_Encode(const asn1SccMGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA		425  /**/
#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		390  /**/
#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		404  /**/
#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		418  /**/
flag asn1SccMGT_MilliGauss_Data_ACN_Decode(asn1SccMGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccACC_MilliG_Data --------------------------------------------*/
typedef struct {
    asn1SccT_Float x_axis;
    asn1SccT_Float y_axis;
    asn1SccT_Float z_axis;

} asn1SccACC_MilliG_Data;

flag asn1SccACC_MilliG_Data_Equal(const asn1SccACC_MilliG_Data* pVal1, const asn1SccACC_MilliG_Data* pVal2);

void asn1SccACC_MilliG_Data_Initialize(asn1SccACC_MilliG_Data* pVal);

#define ERR_ACC_MILLIG_DATA		519  /**/
#define ERR_ACC_MILLIG_DATA_X_AXIS_2		484  /**/
#define ERR_ACC_MILLIG_DATA_Y_AXIS_2		498  /**/
#define ERR_ACC_MILLIG_DATA_Z_AXIS_2		512  /**/
flag asn1SccACC_MilliG_Data_IsConstraintValid(const asn1SccACC_MilliG_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ACC_MILLIG_DATA		520  /**/
#define ERR_UPER_ENCODE_ACC_MILLIG_DATA_X_AXIS_2		485  /**/
#define ERR_UPER_ENCODE_ACC_MILLIG_DATA_Y_AXIS_2		499  /**/
#define ERR_UPER_ENCODE_ACC_MILLIG_DATA_Z_AXIS_2		513  /**/
#define asn1SccACC_MilliG_Data_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccACC_MilliG_Data_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccACC_MilliG_Data_Encode(const asn1SccACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACC_MILLIG_DATA		521  /**/
#define ERR_UPER_DECODE_ACC_MILLIG_DATA_X_AXIS_2		486  /**/
#define ERR_UPER_DECODE_ACC_MILLIG_DATA_Y_AXIS_2		500  /**/
#define ERR_UPER_DECODE_ACC_MILLIG_DATA_Z_AXIS_2		514  /**/
flag asn1SccACC_MilliG_Data_Decode(asn1SccACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACC_MILLIG_DATA		522  /**/
#define ERR_ACN_ENCODE_ACC_MILLIG_DATA_X_AXIS_2		487  /**/
#define ERR_ACN_ENCODE_ACC_MILLIG_DATA_Y_AXIS_2		501  /**/
#define ERR_ACN_ENCODE_ACC_MILLIG_DATA_Z_AXIS_2		515  /**/
#define asn1SccACC_MilliG_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define asn1SccACC_MilliG_Data_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag asn1SccACC_MilliG_Data_ACN_Encode(const asn1SccACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACC_MILLIG_DATA		523  /**/
#define ERR_ACN_DECODE_ACC_MILLIG_DATA_X_AXIS_2		488  /**/
#define ERR_ACN_DECODE_ACC_MILLIG_DATA_Y_AXIS_2		502  /**/
#define ERR_ACN_DECODE_ACC_MILLIG_DATA_Z_AXIS_2		516  /**/
flag asn1SccACC_MilliG_Data_ACN_Decode(asn1SccACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccGYRO_MilliDPS_Data --------------------------------------------*/
typedef struct {
    asn1SccT_Float x_axis;
    asn1SccT_Float y_axis;
    asn1SccT_Float z_axis;

} asn1SccGYRO_MilliDPS_Data;

flag asn1SccGYRO_MilliDPS_Data_Equal(const asn1SccGYRO_MilliDPS_Data* pVal1, const asn1SccGYRO_MilliDPS_Data* pVal2);

void asn1SccGYRO_MilliDPS_Data_Initialize(asn1SccGYRO_MilliDPS_Data* pVal);

#define ERR_GYRO_MILLIDPS_DATA		617  /**/
#define ERR_GYRO_MILLIDPS_DATA_X_AXIS_2		582  /**/
#define ERR_GYRO_MILLIDPS_DATA_Y_AXIS_2		596  /**/
#define ERR_GYRO_MILLIDPS_DATA_Z_AXIS_2		610  /**/
flag asn1SccGYRO_MilliDPS_Data_IsConstraintValid(const asn1SccGYRO_MilliDPS_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA		618  /**/
#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA_X_AXIS_2		583  /**/
#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		597  /**/
#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		611  /**/
#define asn1SccGYRO_MilliDPS_Data_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccGYRO_MilliDPS_Data_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccGYRO_MilliDPS_Data_Encode(const asn1SccGYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA		619  /**/
#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA_X_AXIS_2		584  /**/
#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		598  /**/
#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		612  /**/
flag asn1SccGYRO_MilliDPS_Data_Decode(asn1SccGYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA		620  /**/
#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA_X_AXIS_2		585  /**/
#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		599  /**/
#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		613  /**/
#define asn1SccGYRO_MilliDPS_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define asn1SccGYRO_MilliDPS_Data_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag asn1SccGYRO_MilliDPS_Data_ACN_Encode(const asn1SccGYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA		621  /**/
#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA_X_AXIS_2		586  /**/
#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		600  /**/
#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		614  /**/
flag asn1SccGYRO_MilliDPS_Data_ACN_Decode(asn1SccGYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode);

/*-- asn1SccPT1000s_Raw_Data_elem --------------------------------------------*/
typedef struct {
    asn1SccT_Float vcc_volts;
    asn1SccT_Float pt1000;

} asn1SccPT1000s_Raw_Data_elem;

typedef struct {
    
    asn1SccPT1000s_Raw_Data_elem arr[7];
} asn1SccPT1000s_Raw_Data;

flag asn1SccPT1000s_Raw_Data_elem_Equal(const asn1SccPT1000s_Raw_Data_elem* pVal1, const asn1SccPT1000s_Raw_Data_elem* pVal2);

flag asn1SccPT1000s_Raw_Data_Equal(const asn1SccPT1000s_Raw_Data* pVal1, const asn1SccPT1000s_Raw_Data* pVal2);

void asn1SccPT1000s_Raw_Data_elem_Initialize(asn1SccPT1000s_Raw_Data_elem* pVal);
void asn1SccPT1000s_Raw_Data_Initialize(asn1SccPT1000s_Raw_Data* pVal);

#define ERR_PT1000S_RAW_DATA		1170  /**/
#define ERR_PT1000S_RAW_DATA_ELM		1163  /**/
#define ERR_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1142  /**/
#define ERR_PT1000S_RAW_DATA_ELM_PT1000_2		1156  /**/
flag asn1SccPT1000s_Raw_Data_IsConstraintValid(const asn1SccPT1000s_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_RAW_DATA		1171  /**/
#define ERR_UPER_ENCODE_PT1000S_RAW_DATA_ELM		1164  /**/
#define ERR_UPER_ENCODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1143  /**/
#define ERR_UPER_ENCODE_PT1000S_RAW_DATA_ELM_PT1000_2		1157  /**/
#define asn1SccPT1000s_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       182 
#define asn1SccPT1000s_Raw_Data_REQUIRED_BITS_FOR_ENCODING        1456

flag asn1SccPT1000s_Raw_Data_Encode(const asn1SccPT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_RAW_DATA		1172  /**/
#define ERR_UPER_DECODE_PT1000S_RAW_DATA_ELM		1165  /**/
#define ERR_UPER_DECODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1144  /**/
#define ERR_UPER_DECODE_PT1000S_RAW_DATA_ELM_PT1000_2		1158  /**/
flag asn1SccPT1000s_Raw_Data_Decode(asn1SccPT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_RAW_DATA		1173  /**/
#define ERR_ACN_ENCODE_PT1000S_RAW_DATA_ELM		1166  /**/
#define ERR_ACN_ENCODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1145  /**/
#define ERR_ACN_ENCODE_PT1000S_RAW_DATA_ELM_PT1000_2		1159  /**/
#define asn1SccPT1000s_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       182 
#define asn1SccPT1000s_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        1456

flag asn1SccPT1000s_Raw_Data_ACN_Encode(const asn1SccPT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_RAW_DATA		1174  /**/
#define ERR_ACN_DECODE_PT1000S_RAW_DATA_ELM		1167  /**/
#define ERR_ACN_DECODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1146  /**/
#define ERR_ACN_DECODE_PT1000S_RAW_DATA_ELM_PT1000_2		1160  /**/
flag asn1SccPT1000s_Raw_Data_ACN_Decode(asn1SccPT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    asn1SccT_Float arr[7];
} asn1SccPT1000s_Celsius_Data;

flag asn1SccPT1000s_Celsius_Data_Equal(const asn1SccPT1000s_Celsius_Data* pVal1, const asn1SccPT1000s_Celsius_Data* pVal2);

void asn1SccPT1000s_Celsius_Data_Initialize(asn1SccPT1000s_Celsius_Data* pVal);

#define ERR_PT1000S_CELSIUS_DATA		1191  /**/
#define ERR_PT1000S_CELSIUS_DATA_ELM_2		1184  /**/
flag asn1SccPT1000s_Celsius_Data_IsConstraintValid(const asn1SccPT1000s_Celsius_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_CELSIUS_DATA		1192  /**/
#define ERR_UPER_ENCODE_PT1000S_CELSIUS_DATA_ELM_2		1185  /**/
#define asn1SccPT1000s_Celsius_Data_REQUIRED_BYTES_FOR_ENCODING       91 
#define asn1SccPT1000s_Celsius_Data_REQUIRED_BITS_FOR_ENCODING        728

flag asn1SccPT1000s_Celsius_Data_Encode(const asn1SccPT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_CELSIUS_DATA		1193  /**/
#define ERR_UPER_DECODE_PT1000S_CELSIUS_DATA_ELM_2		1186  /**/
flag asn1SccPT1000s_Celsius_Data_Decode(asn1SccPT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_CELSIUS_DATA		1194  /**/
#define ERR_ACN_ENCODE_PT1000S_CELSIUS_DATA_ELM_2		1187  /**/
#define asn1SccPT1000s_Celsius_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       91 
#define asn1SccPT1000s_Celsius_Data_REQUIRED_BITS_FOR_ACN_ENCODING        728

flag asn1SccPT1000s_Celsius_Data_ACN_Encode(const asn1SccPT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_CELSIUS_DATA		1195  /**/
#define ERR_ACN_DECODE_PT1000S_CELSIUS_DATA_ELM_2		1188  /**/
flag asn1SccPT1000s_Celsius_Data_ACN_Decode(asn1SccPT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccPS_Calibration_Data --------------------------------------------*/
typedef struct {
    asn1SccT_UInt16 c1;
    asn1SccT_UInt16 c2;
    asn1SccT_UInt16 c3;
    asn1SccT_UInt16 c4;
    asn1SccT_UInt16 c5;
    asn1SccT_UInt16 c6;
    asn1SccT_Float sens_t1;
    asn1SccT_Float off_t1;
    asn1SccT_Float tcs;
    asn1SccT_Float tco;
    asn1SccT_Float tref;
    asn1SccT_Float temp_sens;

} asn1SccPS_Calibration_Data;

flag asn1SccPS_Calibration_Data_Equal(const asn1SccPS_Calibration_Data* pVal1, const asn1SccPS_Calibration_Data* pVal2);

void asn1SccPS_Calibration_Data_Initialize(asn1SccPS_Calibration_Data* pVal);

#define ERR_PS_CALIBRATION_DATA		1471  /**/
#define ERR_PS_CALIBRATION_DATA_C1_2		1310  /**/
#define ERR_PS_CALIBRATION_DATA_C2_2		1324  /**/
#define ERR_PS_CALIBRATION_DATA_C3_2		1338  /**/
#define ERR_PS_CALIBRATION_DATA_C4_2		1352  /**/
#define ERR_PS_CALIBRATION_DATA_C5_2		1366  /**/
#define ERR_PS_CALIBRATION_DATA_C6_2		1380  /**/
#define ERR_PS_CALIBRATION_DATA_SENS_T1_2		1394  /**/
#define ERR_PS_CALIBRATION_DATA_OFF_T1_2		1408  /**/
#define ERR_PS_CALIBRATION_DATA_TCS_2		1422  /**/
#define ERR_PS_CALIBRATION_DATA_TCO_2		1436  /**/
#define ERR_PS_CALIBRATION_DATA_TREF_2		1450  /**/
#define ERR_PS_CALIBRATION_DATA_TEMP_SENS_2		1464  /**/
flag asn1SccPS_Calibration_Data_IsConstraintValid(const asn1SccPS_Calibration_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA		1472  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C1_2		1311  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C2_2		1325  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C3_2		1339  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C4_2		1353  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C5_2		1367  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C6_2		1381  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_SENS_T1_2		1395  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_OFF_T1_2		1409  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TCS_2		1423  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TCO_2		1437  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TREF_2		1451  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1465  /**/
#define asn1SccPS_Calibration_Data_REQUIRED_BYTES_FOR_ENCODING       90 
#define asn1SccPS_Calibration_Data_REQUIRED_BITS_FOR_ENCODING        720

flag asn1SccPS_Calibration_Data_Encode(const asn1SccPS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_CALIBRATION_DATA		1473  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C1_2		1312  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C2_2		1326  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C3_2		1340  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C4_2		1354  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C5_2		1368  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C6_2		1382  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_SENS_T1_2		1396  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_OFF_T1_2		1410  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TCS_2		1424  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TCO_2		1438  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TREF_2		1452  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1466  /**/
flag asn1SccPS_Calibration_Data_Decode(asn1SccPS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA		1474  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C1_2		1313  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C2_2		1327  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C3_2		1341  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C4_2		1355  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C5_2		1369  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C6_2		1383  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_SENS_T1_2		1397  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_OFF_T1_2		1411  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TCS_2		1425  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TCO_2		1439  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TREF_2		1453  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1467  /**/
#define asn1SccPS_Calibration_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       90 
#define asn1SccPS_Calibration_Data_REQUIRED_BITS_FOR_ACN_ENCODING        720

flag asn1SccPS_Calibration_Data_ACN_Encode(const asn1SccPS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_CALIBRATION_DATA		1475  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C1_2		1314  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C2_2		1328  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C3_2		1342  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C4_2		1356  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C5_2		1370  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C6_2		1384  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_SENS_T1_2		1398  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_OFF_T1_2		1412  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TCS_2		1426  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TCO_2		1440  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TREF_2		1454  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1468  /**/
flag asn1SccPS_Calibration_Data_ACN_Decode(asn1SccPS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccTC_Heater --------------------------------------------*/
typedef enum {
    asn1Sccheater_HTL = 0,
    asn1Sccheater_anemo = 1
} asn1SccTC_Heater_heater;

// please use the following macros to avoid breaking code.
#define asn1SccTC_Heater_heater_heater_HTL asn1Sccheater_HTL
#define asn1SccTC_Heater_heater_heater_anemo asn1Sccheater_anemo
/*-- asn1SccTC_Heater_command --------------------------------------------*/
typedef enum {
    asn1Sccmax = 0,
    asn1Sccmin = 1
} asn1SccTC_Heater_command_max_min;

// please use the following macros to avoid breaking code.
#define asn1SccTC_Heater_command_max_min_max asn1Sccmax
#define asn1SccTC_Heater_command_max_min_min asn1Sccmin

typedef enum {
    TC_Heater_command_NONE,
    power_manual_PRESENT,
    max_min_PRESENT 
} asn1SccTC_Heater_command_selection;


typedef struct {
    asn1SccTC_Heater_command_selection kind;
    
    union {
        asn1SccT_Float power_manual;
        asn1SccTC_Heater_command_max_min max_min;
    } u; 
} asn1SccTC_Heater_command;
typedef struct {
    asn1SccTC_Heater_heater heater;
    asn1SccTC_Heater_command command;

} asn1SccTC_Heater;

flag asn1SccTC_Heater_heater_Equal(const asn1SccTC_Heater_heater* pVal1, const asn1SccTC_Heater_heater* pVal2);

flag asn1SccTC_Heater_command_max_min_Equal(const asn1SccTC_Heater_command_max_min* pVal1, const asn1SccTC_Heater_command_max_min* pVal2);

flag asn1SccTC_Heater_command_Equal(const asn1SccTC_Heater_command* pVal1, const asn1SccTC_Heater_command* pVal2);

flag asn1SccTC_Heater_Equal(const asn1SccTC_Heater* pVal1, const asn1SccTC_Heater* pVal2);

void asn1SccTC_Heater_heater_Initialize(asn1SccTC_Heater_heater* pVal);
void asn1SccTC_Heater_command_max_min_Initialize(asn1SccTC_Heater_command_max_min* pVal);
void asn1SccTC_Heater_command_Initialize(asn1SccTC_Heater_command* pVal);
void asn1SccTC_Heater_Initialize(asn1SccTC_Heater* pVal);

#define ERR_TC_HEATER		7015  /**/
#define ERR_TC_HEATER_HEATER		6980  /**/
#define ERR_TC_HEATER_COMMAND		7008  /**/
#define ERR_TC_HEATER_COMMAND_POWER_MANUAL_2		6994  /**/
#define ERR_TC_HEATER_COMMAND_MAX_MIN		7001  /**/
flag asn1SccTC_Heater_IsConstraintValid(const asn1SccTC_Heater* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC_HEATER		7016  /**/
#define ERR_UPER_ENCODE_TC_HEATER_HEATER		6981  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMAND		7009  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMAND_POWER_MANUAL_2		6995  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMAND_MAX_MIN		7002  /**/
#define asn1SccTC_Heater_REQUIRED_BYTES_FOR_ENCODING       14 
#define asn1SccTC_Heater_REQUIRED_BITS_FOR_ENCODING        106

flag asn1SccTC_Heater_Encode(const asn1SccTC_Heater* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC_HEATER		7017  /**/
#define ERR_UPER_DECODE_TC_HEATER_HEATER		6982  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMAND		7010  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMAND_POWER_MANUAL_2		6996  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMAND_MAX_MIN		7003  /**/
flag asn1SccTC_Heater_Decode(asn1SccTC_Heater* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TC_HEATER		7018  /**/
#define ERR_ACN_ENCODE_TC_HEATER_HEATER		6983  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMAND		7011  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMAND_POWER_MANUAL_2		6997  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMAND_MAX_MIN		7004  /**/
#define asn1SccTC_Heater_REQUIRED_BYTES_FOR_ACN_ENCODING       14 
#define asn1SccTC_Heater_REQUIRED_BITS_FOR_ACN_ENCODING        106

flag asn1SccTC_Heater_ACN_Encode(const asn1SccTC_Heater* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TC_HEATER		7019  /**/
#define ERR_ACN_DECODE_TC_HEATER_HEATER		6984  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMAND		7012  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMAND_POWER_MANUAL_2		6998  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMAND_MAX_MIN		7005  /**/
flag asn1SccTC_Heater_ACN_Decode(asn1SccTC_Heater* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real asn1SccT_Double;


flag asn1SccT_Double_Equal(const asn1SccT_Double* pVal1, const asn1SccT_Double* pVal2);

void asn1SccT_Double_Initialize(asn1SccT_Double* pVal);

#define ERR_T_DOUBLE		29  /**/
flag asn1SccT_Double_IsConstraintValid(const asn1SccT_Double* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_DOUBLE		30  /**/
#define asn1SccT_Double_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Double_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccT_Double_Encode(const asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_DOUBLE		31  /**/
flag asn1SccT_Double_Decode(asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_DOUBLE		32  /**/
#define asn1SccT_Double_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccT_Double_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccT_Double_ACN_Encode(const asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_DOUBLE		33  /**/
flag asn1SccT_Double_ACN_Decode(asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccGPS_PVT --------------------------------------------*/
typedef enum {
    asn1Sccnot_seen = 0,
    asn1Sccno_fix = 1,
    asn1Scctwo_dims = 2,
    asn1Sccthree_dims = 3
} asn1SccGPS_PVT_mode;

// please use the following macros to avoid breaking code.
#define asn1SccGPS_PVT_mode_not_seen asn1Sccnot_seen
#define asn1SccGPS_PVT_mode_no_fix asn1Sccno_fix
#define asn1SccGPS_PVT_mode_two_dims asn1Scctwo_dims
#define asn1SccGPS_PVT_mode_three_dims asn1Sccthree_dims
typedef struct {
    asn1SccGPS_PVT_mode mode;
    asn1SccT_Double date_and_time;
    asn1SccT_Double ept;
    asn1SccT_Double latitude;
    asn1SccT_Double epy;
    asn1SccT_Double longitude;
    asn1SccT_Double epx;
    asn1SccT_Double altitude;
    asn1SccT_Double epv;
    asn1SccT_Double course;
    asn1SccT_Double epd;
    asn1SccT_Double speed;
    asn1SccT_Double eps;
    asn1SccT_Double climb;
    asn1SccT_Double epc;

} asn1SccGPS_PVT;

flag asn1SccGPS_PVT_mode_Equal(const asn1SccGPS_PVT_mode* pVal1, const asn1SccGPS_PVT_mode* pVal2);

flag asn1SccGPS_PVT_Equal(const asn1SccGPS_PVT* pVal1, const asn1SccGPS_PVT* pVal2);

void asn1SccGPS_PVT_mode_Initialize(asn1SccGPS_PVT_mode* pVal);
void asn1SccGPS_PVT_Initialize(asn1SccGPS_PVT* pVal);

#define ERR_GPS_PVT		323  /**/
#define ERR_GPS_PVT_MODE		120  /**/
#define ERR_GPS_PVT_DATE_AND_TIME_2		134  /**/
#define ERR_GPS_PVT_EPT_2		148  /**/
#define ERR_GPS_PVT_LATITUDE_2		162  /**/
#define ERR_GPS_PVT_EPY_2		176  /**/
#define ERR_GPS_PVT_LONGITUDE_2		190  /**/
#define ERR_GPS_PVT_EPX_2		204  /**/
#define ERR_GPS_PVT_ALTITUDE_2		218  /**/
#define ERR_GPS_PVT_EPV_2		232  /**/
#define ERR_GPS_PVT_COURSE_2		246  /**/
#define ERR_GPS_PVT_EPD_2		260  /**/
#define ERR_GPS_PVT_SPEED_2		274  /**/
#define ERR_GPS_PVT_EPS_2		288  /**/
#define ERR_GPS_PVT_CLIMB_2		302  /**/
#define ERR_GPS_PVT_EPC_2		316  /**/
flag asn1SccGPS_PVT_IsConstraintValid(const asn1SccGPS_PVT* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GPS_PVT		324  /**/
#define ERR_UPER_ENCODE_GPS_PVT_MODE		121  /**/
#define ERR_UPER_ENCODE_GPS_PVT_DATE_AND_TIME_2		135  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPT_2		149  /**/
#define ERR_UPER_ENCODE_GPS_PVT_LATITUDE_2		163  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPY_2		177  /**/
#define ERR_UPER_ENCODE_GPS_PVT_LONGITUDE_2		191  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPX_2		205  /**/
#define ERR_UPER_ENCODE_GPS_PVT_ALTITUDE_2		219  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPV_2		233  /**/
#define ERR_UPER_ENCODE_GPS_PVT_COURSE_2		247  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPD_2		261  /**/
#define ERR_UPER_ENCODE_GPS_PVT_SPEED_2		275  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPS_2		289  /**/
#define ERR_UPER_ENCODE_GPS_PVT_CLIMB_2		303  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPC_2		317  /**/
#define asn1SccGPS_PVT_REQUIRED_BYTES_FOR_ENCODING       183 
#define asn1SccGPS_PVT_REQUIRED_BITS_FOR_ENCODING        1458

flag asn1SccGPS_PVT_Encode(const asn1SccGPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GPS_PVT		325  /**/
#define ERR_UPER_DECODE_GPS_PVT_MODE		122  /**/
#define ERR_UPER_DECODE_GPS_PVT_DATE_AND_TIME_2		136  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPT_2		150  /**/
#define ERR_UPER_DECODE_GPS_PVT_LATITUDE_2		164  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPY_2		178  /**/
#define ERR_UPER_DECODE_GPS_PVT_LONGITUDE_2		192  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPX_2		206  /**/
#define ERR_UPER_DECODE_GPS_PVT_ALTITUDE_2		220  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPV_2		234  /**/
#define ERR_UPER_DECODE_GPS_PVT_COURSE_2		248  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPD_2		262  /**/
#define ERR_UPER_DECODE_GPS_PVT_SPEED_2		276  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPS_2		290  /**/
#define ERR_UPER_DECODE_GPS_PVT_CLIMB_2		304  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPC_2		318  /**/
flag asn1SccGPS_PVT_Decode(asn1SccGPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_GPS_PVT		326  /**/
#define ERR_ACN_ENCODE_GPS_PVT_MODE		123  /**/
#define ERR_ACN_ENCODE_GPS_PVT_DATE_AND_TIME_2		137  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPT_2		151  /**/
#define ERR_ACN_ENCODE_GPS_PVT_LATITUDE_2		165  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPY_2		179  /**/
#define ERR_ACN_ENCODE_GPS_PVT_LONGITUDE_2		193  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPX_2		207  /**/
#define ERR_ACN_ENCODE_GPS_PVT_ALTITUDE_2		221  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPV_2		235  /**/
#define ERR_ACN_ENCODE_GPS_PVT_COURSE_2		249  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPD_2		263  /**/
#define ERR_ACN_ENCODE_GPS_PVT_SPEED_2		277  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPS_2		291  /**/
#define ERR_ACN_ENCODE_GPS_PVT_CLIMB_2		305  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPC_2		319  /**/
#define asn1SccGPS_PVT_REQUIRED_BYTES_FOR_ACN_ENCODING       183 
#define asn1SccGPS_PVT_REQUIRED_BITS_FOR_ACN_ENCODING        1458

flag asn1SccGPS_PVT_ACN_Encode(const asn1SccGPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_GPS_PVT		327  /**/
#define ERR_ACN_DECODE_GPS_PVT_MODE		124  /**/
#define ERR_ACN_DECODE_GPS_PVT_DATE_AND_TIME_2		138  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPT_2		152  /**/
#define ERR_ACN_DECODE_GPS_PVT_LATITUDE_2		166  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPY_2		180  /**/
#define ERR_ACN_DECODE_GPS_PVT_LONGITUDE_2		194  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPX_2		208  /**/
#define ERR_ACN_DECODE_GPS_PVT_ALTITUDE_2		222  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPV_2		236  /**/
#define ERR_ACN_DECODE_GPS_PVT_COURSE_2		250  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPD_2		264  /**/
#define ERR_ACN_DECODE_GPS_PVT_SPEED_2		278  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPS_2		292  /**/
#define ERR_ACN_DECODE_GPS_PVT_CLIMB_2		306  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPC_2		320  /**/
flag asn1SccGPS_PVT_ACN_Decode(asn1SccGPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    
    byte arr[81];
} asn1SccFile_Name;


flag asn1SccFile_Name_Equal(const asn1SccFile_Name* pVal1, const asn1SccFile_Name* pVal2);

void asn1SccFile_Name_Initialize(asn1SccFile_Name* pVal);

#define ERR_FILE_NAME		36  /**/
flag asn1SccFile_Name_IsConstraintValid(const asn1SccFile_Name* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_FILE_NAME		37  /**/
#define asn1SccFile_Name_REQUIRED_BYTES_FOR_ENCODING       81 
#define asn1SccFile_Name_REQUIRED_BITS_FOR_ENCODING        648

flag asn1SccFile_Name_Encode(const asn1SccFile_Name* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILE_NAME		38  /**/
flag asn1SccFile_Name_Decode(asn1SccFile_Name* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILE_NAME		39  /**/
#define asn1SccFile_Name_REQUIRED_BYTES_FOR_ACN_ENCODING       81 
#define asn1SccFile_Name_REQUIRED_BITS_FOR_ACN_ENCODING        648

flag asn1SccFile_Name_ACN_Encode(const asn1SccFile_Name* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILE_NAME		40  /**/
flag asn1SccFile_Name_ACN_Decode(asn1SccFile_Name* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Sccvalid = 0,
    asn1Sccinvalid = 1
} asn1SccContent_Validity;

// please use the following macros to avoid breaking code.
#define asn1SccContent_Validity_valid asn1Sccvalid
#define asn1SccContent_Validity_invalid asn1Sccinvalid

flag asn1SccContent_Validity_Equal(const asn1SccContent_Validity* pVal1, const asn1SccContent_Validity* pVal2);

void asn1SccContent_Validity_Initialize(asn1SccContent_Validity* pVal);

#define ERR_CONTENT_VALIDITY		43  /**/
flag asn1SccContent_Validity_IsConstraintValid(const asn1SccContent_Validity* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_CONTENT_VALIDITY		44  /**/
#define asn1SccContent_Validity_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccContent_Validity_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccContent_Validity_Encode(const asn1SccContent_Validity* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CONTENT_VALIDITY		45  /**/
flag asn1SccContent_Validity_Decode(asn1SccContent_Validity* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_CONTENT_VALIDITY		46  /**/
#define asn1SccContent_Validity_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccContent_Validity_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag asn1SccContent_Validity_ACN_Encode(const asn1SccContent_Validity* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_CONTENT_VALIDITY		47  /**/
flag asn1SccContent_Validity_ACN_Decode(asn1SccContent_Validity* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccIMU_All_Data --------------------------------------------*/
typedef struct {
    asn1SccMGT_Raw_Data mgt_raw;
    asn1SccMGT_MilliGauss_Data mgt_mgauss;
    asn1SccACC_Raw_Data accel_raw;
    asn1SccACC_MilliG_Data accel_mg;
    asn1SccGYRO_Raw_Data gyro_raw;
    asn1SccGYRO_MilliDPS_Data gyro_mdps;
    asn1SccT_Int16 temp_raw;
    asn1SccT_Float temp_celsius;
    asn1SccContent_Validity mgt_valid;
    asn1SccContent_Validity acc_valid;
    asn1SccContent_Validity gyro_valid;
    asn1SccContent_Validity temp_valid;

} asn1SccIMU_All_Data;

flag asn1SccIMU_All_Data_Equal(const asn1SccIMU_All_Data* pVal1, const asn1SccIMU_All_Data* pVal2);

void asn1SccIMU_All_Data_Initialize(asn1SccIMU_All_Data* pVal);

#define ERR_IMU_ALL_DATA		1044  /**/
#define ERR_IMU_ALL_DATA_MGT_RAW_2		673  /**/
#define ERR_IMU_ALL_DATA_MGT_MGAUSS_2		729  /**/
#define ERR_IMU_ALL_DATA_ACCEL_RAW_2		785  /**/
#define ERR_IMU_ALL_DATA_ACCEL_MG_2		841  /**/
#define ERR_IMU_ALL_DATA_GYRO_RAW_2		897  /**/
#define ERR_IMU_ALL_DATA_GYRO_MDPS_2		953  /**/
#define ERR_IMU_ALL_DATA_TEMP_RAW_2		967  /**/
#define ERR_IMU_ALL_DATA_TEMP_CELSIUS_2		981  /**/
#define ERR_IMU_ALL_DATA_MGT_VALID_2		995  /**/
#define ERR_IMU_ALL_DATA_ACC_VALID_2		1009  /**/
#define ERR_IMU_ALL_DATA_GYRO_VALID_2		1023  /**/
#define ERR_IMU_ALL_DATA_TEMP_VALID_2		1037  /**/
flag asn1SccIMU_All_Data_IsConstraintValid(const asn1SccIMU_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_IMU_ALL_DATA		1045  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_MGT_RAW_2		674  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_MGT_MGAUSS_2		730  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_ACCEL_RAW_2		786  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_ACCEL_MG_2		842  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_GYRO_RAW_2		898  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_GYRO_MDPS_2		954  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_TEMP_RAW_2		968  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_TEMP_CELSIUS_2		982  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_MGT_VALID_2		996  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_ACC_VALID_2		1010  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_GYRO_VALID_2		1024  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_TEMP_VALID_2		1038  /**/
#define asn1SccIMU_All_Data_REQUIRED_BYTES_FOR_ENCODING       151 
#define asn1SccIMU_All_Data_REQUIRED_BITS_FOR_ENCODING        1204

flag asn1SccIMU_All_Data_Encode(const asn1SccIMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_IMU_ALL_DATA		1046  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_MGT_RAW_2		675  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_MGT_MGAUSS_2		731  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_ACCEL_RAW_2		787  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_ACCEL_MG_2		843  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_GYRO_RAW_2		899  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_GYRO_MDPS_2		955  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_TEMP_RAW_2		969  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_TEMP_CELSIUS_2		983  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_MGT_VALID_2		997  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_ACC_VALID_2		1011  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_GYRO_VALID_2		1025  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_TEMP_VALID_2		1039  /**/
flag asn1SccIMU_All_Data_Decode(asn1SccIMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_IMU_ALL_DATA		1047  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_MGT_RAW_2		676  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_MGT_MGAUSS_2		732  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_ACCEL_RAW_2		788  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_ACCEL_MG_2		844  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_GYRO_RAW_2		900  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_GYRO_MDPS_2		956  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_TEMP_RAW_2		970  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_TEMP_CELSIUS_2		984  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_MGT_VALID_2		998  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_ACC_VALID_2		1012  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_GYRO_VALID_2		1026  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_TEMP_VALID_2		1040  /**/
#define asn1SccIMU_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       151 
#define asn1SccIMU_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        1204

flag asn1SccIMU_All_Data_ACN_Encode(const asn1SccIMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_IMU_ALL_DATA		1048  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_MGT_RAW_2		677  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_MGT_MGAUSS_2		733  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_ACCEL_RAW_2		789  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_ACCEL_MG_2		845  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_GYRO_RAW_2		901  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_GYRO_MDPS_2		957  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_TEMP_RAW_2		971  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_TEMP_CELSIUS_2		985  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_MGT_VALID_2		999  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_ACC_VALID_2		1013  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_GYRO_VALID_2		1027  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_TEMP_VALID_2		1041  /**/
flag asn1SccIMU_All_Data_ACN_Decode(asn1SccIMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

/*-- asn1SccIMU_Queue_elem --------------------------------------------*/
typedef struct {
    asn1SccIMU_All_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccIMU_Queue_elem;

typedef struct {
    
    asn1SccIMU_Queue_elem arr[50];
} asn1SccIMU_Queue;

flag asn1SccIMU_Queue_elem_Equal(const asn1SccIMU_Queue_elem* pVal1, const asn1SccIMU_Queue_elem* pVal2);

flag asn1SccIMU_Queue_Equal(const asn1SccIMU_Queue* pVal1, const asn1SccIMU_Queue* pVal2);

void asn1SccIMU_Queue_elem_Initialize(asn1SccIMU_Queue_elem* pVal);
void asn1SccIMU_Queue_Initialize(asn1SccIMU_Queue* pVal);

#define ERR_IMU_QUEUE		6119  /**/
#define ERR_IMU_QUEUE_ELM		6112  /**/
#define ERR_IMU_QUEUE_ELM_DATA_2		6077  /**/
#define ERR_IMU_QUEUE_ELM_GPS_TIME_2		6091  /**/
#define ERR_IMU_QUEUE_ELM_MISSION_TIME_2		6105  /**/
flag asn1SccIMU_Queue_IsConstraintValid(const asn1SccIMU_Queue* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_IMU_QUEUE		6120  /**/
#define ERR_UPER_ENCODE_IMU_QUEUE_ELM		6113  /**/
#define ERR_UPER_ENCODE_IMU_QUEUE_ELM_DATA_2		6078  /**/
#define ERR_UPER_ENCODE_IMU_QUEUE_ELM_GPS_TIME_2		6092  /**/
#define ERR_UPER_ENCODE_IMU_QUEUE_ELM_MISSION_TIME_2		6106  /**/
#define asn1SccIMU_Queue_REQUIRED_BYTES_FOR_ENCODING       8825 
#define asn1SccIMU_Queue_REQUIRED_BITS_FOR_ENCODING        70600

flag asn1SccIMU_Queue_Encode(const asn1SccIMU_Queue* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_IMU_QUEUE		6121  /**/
#define ERR_UPER_DECODE_IMU_QUEUE_ELM		6114  /**/
#define ERR_UPER_DECODE_IMU_QUEUE_ELM_DATA_2		6079  /**/
#define ERR_UPER_DECODE_IMU_QUEUE_ELM_GPS_TIME_2		6093  /**/
#define ERR_UPER_DECODE_IMU_QUEUE_ELM_MISSION_TIME_2		6107  /**/
flag asn1SccIMU_Queue_Decode(asn1SccIMU_Queue* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_IMU_QUEUE		6122  /**/
#define ERR_ACN_ENCODE_IMU_QUEUE_ELM		6115  /**/
#define ERR_ACN_ENCODE_IMU_QUEUE_ELM_DATA_2		6080  /**/
#define ERR_ACN_ENCODE_IMU_QUEUE_ELM_GPS_TIME_2		6094  /**/
#define ERR_ACN_ENCODE_IMU_QUEUE_ELM_MISSION_TIME_2		6108  /**/
#define asn1SccIMU_Queue_REQUIRED_BYTES_FOR_ACN_ENCODING       8825 
#define asn1SccIMU_Queue_REQUIRED_BITS_FOR_ACN_ENCODING        70600

flag asn1SccIMU_Queue_ACN_Encode(const asn1SccIMU_Queue* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_IMU_QUEUE		6123  /**/
#define ERR_ACN_DECODE_IMU_QUEUE_ELM		6116  /**/
#define ERR_ACN_DECODE_IMU_QUEUE_ELM_DATA_2		6081  /**/
#define ERR_ACN_DECODE_IMU_QUEUE_ELM_GPS_TIME_2		6095  /**/
#define ERR_ACN_DECODE_IMU_QUEUE_ELM_MISSION_TIME_2		6109  /**/
flag asn1SccIMU_Queue_ACN_Decode(asn1SccIMU_Queue* pVal, BitStream* pBitStrm, int* pErrCode);

/*-- asn1SccTC74s_All_Data_elem --------------------------------------------*/
typedef struct {
    asn1SccT_Float temperature;
    asn1SccContent_Validity validity;

} asn1SccTC74s_All_Data_elem;

typedef struct {
    
    asn1SccTC74s_All_Data_elem arr[5];
} asn1SccTC74s_All_Data;

flag asn1SccTC74s_All_Data_elem_Equal(const asn1SccTC74s_All_Data_elem* pVal1, const asn1SccTC74s_All_Data_elem* pVal2);

flag asn1SccTC74s_All_Data_Equal(const asn1SccTC74s_All_Data* pVal1, const asn1SccTC74s_All_Data* pVal2);

void asn1SccTC74s_All_Data_elem_Initialize(asn1SccTC74s_All_Data_elem* pVal);
void asn1SccTC74s_All_Data_Initialize(asn1SccTC74s_All_Data* pVal);

#define ERR_TC74S_ALL_DATA		1107  /**/
#define ERR_TC74S_ALL_DATA_ELM		1100  /**/
#define ERR_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1079  /**/
#define ERR_TC74S_ALL_DATA_ELM_VALIDITY_2		1093  /**/
flag asn1SccTC74s_All_Data_IsConstraintValid(const asn1SccTC74s_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC74S_ALL_DATA		1108  /**/
#define ERR_UPER_ENCODE_TC74S_ALL_DATA_ELM		1101  /**/
#define ERR_UPER_ENCODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1080  /**/
#define ERR_UPER_ENCODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1094  /**/
#define asn1SccTC74s_All_Data_REQUIRED_BYTES_FOR_ENCODING       66 
#define asn1SccTC74s_All_Data_REQUIRED_BITS_FOR_ENCODING        525

flag asn1SccTC74s_All_Data_Encode(const asn1SccTC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC74S_ALL_DATA		1109  /**/
#define ERR_UPER_DECODE_TC74S_ALL_DATA_ELM		1102  /**/
#define ERR_UPER_DECODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1081  /**/
#define ERR_UPER_DECODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1095  /**/
flag asn1SccTC74s_All_Data_Decode(asn1SccTC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TC74S_ALL_DATA		1110  /**/
#define ERR_ACN_ENCODE_TC74S_ALL_DATA_ELM		1103  /**/
#define ERR_ACN_ENCODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1082  /**/
#define ERR_ACN_ENCODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1096  /**/
#define asn1SccTC74s_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       66 
#define asn1SccTC74s_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        525

flag asn1SccTC74s_All_Data_ACN_Encode(const asn1SccTC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TC74S_ALL_DATA		1111  /**/
#define ERR_ACN_DECODE_TC74S_ALL_DATA_ELM		1104  /**/
#define ERR_ACN_DECODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1083  /**/
#define ERR_ACN_DECODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1097  /**/
flag asn1SccTC74s_All_Data_ACN_Decode(asn1SccTC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccPT1000s_All_Data --------------------------------------------*/


typedef struct {
    
    asn1SccContent_Validity arr[7];
} asn1SccPT1000s_All_Data_validity;
typedef struct {
    asn1SccPT1000s_Raw_Data raw;
    asn1SccPT1000s_Celsius_Data celsius;
    asn1SccPT1000s_All_Data_validity validity;

} asn1SccPT1000s_All_Data;

flag asn1SccPT1000s_All_Data_validity_Equal(const asn1SccPT1000s_All_Data_validity* pVal1, const asn1SccPT1000s_All_Data_validity* pVal2);

flag asn1SccPT1000s_All_Data_Equal(const asn1SccPT1000s_All_Data* pVal1, const asn1SccPT1000s_All_Data* pVal2);

void asn1SccPT1000s_All_Data_validity_Initialize(asn1SccPT1000s_All_Data_validity* pVal);
void asn1SccPT1000s_All_Data_Initialize(asn1SccPT1000s_All_Data* pVal);

#define ERR_PT1000S_ALL_DATA		1296  /**/
#define ERR_PT1000S_ALL_DATA_RAW_2		1240  /**/
#define ERR_PT1000S_ALL_DATA_CELSIUS_2		1268  /**/
#define ERR_PT1000S_ALL_DATA_VALIDITY		1289  /**/
#define ERR_PT1000S_ALL_DATA_VALIDITY_ELM_2		1282  /**/
flag asn1SccPT1000s_All_Data_IsConstraintValid(const asn1SccPT1000s_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_ALL_DATA		1297  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_RAW_2		1241  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_CELSIUS_2		1269  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_VALIDITY		1290  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1283  /**/
#define asn1SccPT1000s_All_Data_REQUIRED_BYTES_FOR_ENCODING       274 
#define asn1SccPT1000s_All_Data_REQUIRED_BITS_FOR_ENCODING        2191

flag asn1SccPT1000s_All_Data_Encode(const asn1SccPT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_ALL_DATA		1298  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_RAW_2		1242  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_CELSIUS_2		1270  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_VALIDITY		1291  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1284  /**/
flag asn1SccPT1000s_All_Data_Decode(asn1SccPT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_ALL_DATA		1299  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_RAW_2		1243  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_CELSIUS_2		1271  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_VALIDITY		1292  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1285  /**/
#define asn1SccPT1000s_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       274 
#define asn1SccPT1000s_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        2191

flag asn1SccPT1000s_All_Data_ACN_Encode(const asn1SccPT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_ALL_DATA		1300  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_RAW_2		1244  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_CELSIUS_2		1272  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_VALIDITY		1293  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1286  /**/
flag asn1SccPT1000s_All_Data_ACN_Decode(asn1SccPT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccHeater_Data --------------------------------------------*/
typedef struct {
    asn1SccT_Float power_watts;
    asn1SccContent_Validity validity;

} asn1SccHeater_Data;

flag asn1SccHeater_Data_Equal(const asn1SccHeater_Data* pVal1, const asn1SccHeater_Data* pVal2);

void asn1SccHeater_Data_Initialize(asn1SccHeater_Data* pVal);

#define ERR_HEATER_DATA		1863  /**/
#define ERR_HEATER_DATA_POWER_WATTS_2		1842  /**/
#define ERR_HEATER_DATA_VALIDITY_2		1856  /**/
flag asn1SccHeater_Data_IsConstraintValid(const asn1SccHeater_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HEATER_DATA		1864  /**/
#define ERR_UPER_ENCODE_HEATER_DATA_POWER_WATTS_2		1843  /**/
#define ERR_UPER_ENCODE_HEATER_DATA_VALIDITY_2		1857  /**/
#define asn1SccHeater_Data_REQUIRED_BYTES_FOR_ENCODING       14 
#define asn1SccHeater_Data_REQUIRED_BITS_FOR_ENCODING        105

flag asn1SccHeater_Data_Encode(const asn1SccHeater_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HEATER_DATA		1865  /**/
#define ERR_UPER_DECODE_HEATER_DATA_POWER_WATTS_2		1844  /**/
#define ERR_UPER_DECODE_HEATER_DATA_VALIDITY_2		1858  /**/
flag asn1SccHeater_Data_Decode(asn1SccHeater_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HEATER_DATA		1866  /**/
#define ERR_ACN_ENCODE_HEATER_DATA_POWER_WATTS_2		1845  /**/
#define ERR_ACN_ENCODE_HEATER_DATA_VALIDITY_2		1859  /**/
#define asn1SccHeater_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       14 
#define asn1SccHeater_Data_REQUIRED_BITS_FOR_ACN_ENCODING        105

flag asn1SccHeater_Data_ACN_Encode(const asn1SccHeater_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HEATER_DATA		1867  /**/
#define ERR_ACN_DECODE_HEATER_DATA_POWER_WATTS_2		1846  /**/
#define ERR_ACN_DECODE_HEATER_DATA_VALIDITY_2		1860  /**/
flag asn1SccHeater_Data_ACN_Decode(asn1SccHeater_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccPS_GUI --------------------------------------------*/
typedef struct {
    asn1SccT_Double pressure_mbar;
    asn1SccT_Double temperature_celsius;
    asn1SccContent_Validity validity;

} asn1SccPS_GUI;

flag asn1SccPS_GUI_Equal(const asn1SccPS_GUI* pVal1, const asn1SccPS_GUI* pVal2);

void asn1SccPS_GUI_Initialize(asn1SccPS_GUI* pVal);

#define ERR_PS_GUI		8205  /**/
#define ERR_PS_GUI_PRESSURE_MBAR_2		8170  /**/
#define ERR_PS_GUI_TEMPERATURE_CELSIUS_2		8184  /**/
#define ERR_PS_GUI_VALIDITY_2		8198  /**/
flag asn1SccPS_GUI_IsConstraintValid(const asn1SccPS_GUI* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_GUI		8206  /**/
#define ERR_UPER_ENCODE_PS_GUI_PRESSURE_MBAR_2		8171  /**/
#define ERR_UPER_ENCODE_PS_GUI_TEMPERATURE_CELSIUS_2		8185  /**/
#define ERR_UPER_ENCODE_PS_GUI_VALIDITY_2		8199  /**/
#define asn1SccPS_GUI_REQUIRED_BYTES_FOR_ENCODING       27 
#define asn1SccPS_GUI_REQUIRED_BITS_FOR_ENCODING        209

flag asn1SccPS_GUI_Encode(const asn1SccPS_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_GUI		8207  /**/
#define ERR_UPER_DECODE_PS_GUI_PRESSURE_MBAR_2		8172  /**/
#define ERR_UPER_DECODE_PS_GUI_TEMPERATURE_CELSIUS_2		8186  /**/
#define ERR_UPER_DECODE_PS_GUI_VALIDITY_2		8200  /**/
flag asn1SccPS_GUI_Decode(asn1SccPS_GUI* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_GUI		8208  /**/
#define ERR_ACN_ENCODE_PS_GUI_PRESSURE_MBAR_2		8173  /**/
#define ERR_ACN_ENCODE_PS_GUI_TEMPERATURE_CELSIUS_2		8187  /**/
#define ERR_ACN_ENCODE_PS_GUI_VALIDITY_2		8201  /**/
#define asn1SccPS_GUI_REQUIRED_BYTES_FOR_ACN_ENCODING       27 
#define asn1SccPS_GUI_REQUIRED_BITS_FOR_ACN_ENCODING        209

flag asn1SccPS_GUI_ACN_Encode(const asn1SccPS_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_GUI		8209  /**/
#define ERR_ACN_DECODE_PS_GUI_PRESSURE_MBAR_2		8174  /**/
#define ERR_ACN_DECODE_PS_GUI_TEMPERATURE_CELSIUS_2		8188  /**/
#define ERR_ACN_DECODE_PS_GUI_VALIDITY_2		8202  /**/
flag asn1SccPS_GUI_ACN_Decode(asn1SccPS_GUI* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccENV_GUI --------------------------------------------*/
/*-- asn1SccENV_GUI_anemometer --------------------------------------------*/
typedef struct {
    asn1SccT_UInt64 global_counter;
    asn1SccT_Float temperature_celsius;
    asn1SccContent_Validity temperature_validity;

} asn1SccENV_GUI_anemometer;
typedef struct {
    asn1SccPS_GUI pressure_sensor_1;
    asn1SccPS_GUI pressure_sensor_2;
    asn1SccENV_GUI_anemometer anemometer;
    asn1SccHeater_Data heater;

} asn1SccENV_GUI;

flag asn1SccENV_GUI_anemometer_Equal(const asn1SccENV_GUI_anemometer* pVal1, const asn1SccENV_GUI_anemometer* pVal2);

flag asn1SccENV_GUI_Equal(const asn1SccENV_GUI* pVal1, const asn1SccENV_GUI* pVal2);

void asn1SccENV_GUI_anemometer_Initialize(asn1SccENV_GUI_anemometer* pVal);
void asn1SccENV_GUI_Initialize(asn1SccENV_GUI* pVal);

#define ERR_ENV_GUI		8415  /**/
#define ERR_ENV_GUI_PRESSURE_SENSOR_1_2		8261  /**/
#define ERR_ENV_GUI_PRESSURE_SENSOR_2_2		8317  /**/
#define ERR_ENV_GUI_ANEMOMETER		8366  /**/
#define ERR_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		8331  /**/
#define ERR_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		8345  /**/
#define ERR_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		8359  /**/
#define ERR_ENV_GUI_HEATER_2		8408  /**/
flag asn1SccENV_GUI_IsConstraintValid(const asn1SccENV_GUI* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ENV_GUI		8416  /**/
#define ERR_UPER_ENCODE_ENV_GUI_PRESSURE_SENSOR_1_2		8262  /**/
#define ERR_UPER_ENCODE_ENV_GUI_PRESSURE_SENSOR_2_2		8318  /**/
#define ERR_UPER_ENCODE_ENV_GUI_ANEMOMETER		8367  /**/
#define ERR_UPER_ENCODE_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		8332  /**/
#define ERR_UPER_ENCODE_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		8346  /**/
#define ERR_UPER_ENCODE_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		8360  /**/
#define ERR_UPER_ENCODE_ENV_GUI_HEATER_2		8409  /**/
#define asn1SccENV_GUI_REQUIRED_BYTES_FOR_ENCODING       87 
#define asn1SccENV_GUI_REQUIRED_BITS_FOR_ENCODING        692

flag asn1SccENV_GUI_Encode(const asn1SccENV_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ENV_GUI		8417  /**/
#define ERR_UPER_DECODE_ENV_GUI_PRESSURE_SENSOR_1_2		8263  /**/
#define ERR_UPER_DECODE_ENV_GUI_PRESSURE_SENSOR_2_2		8319  /**/
#define ERR_UPER_DECODE_ENV_GUI_ANEMOMETER		8368  /**/
#define ERR_UPER_DECODE_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		8333  /**/
#define ERR_UPER_DECODE_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		8347  /**/
#define ERR_UPER_DECODE_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		8361  /**/
#define ERR_UPER_DECODE_ENV_GUI_HEATER_2		8410  /**/
flag asn1SccENV_GUI_Decode(asn1SccENV_GUI* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ENV_GUI		8418  /**/
#define ERR_ACN_ENCODE_ENV_GUI_PRESSURE_SENSOR_1_2		8264  /**/
#define ERR_ACN_ENCODE_ENV_GUI_PRESSURE_SENSOR_2_2		8320  /**/
#define ERR_ACN_ENCODE_ENV_GUI_ANEMOMETER		8369  /**/
#define ERR_ACN_ENCODE_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		8334  /**/
#define ERR_ACN_ENCODE_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		8348  /**/
#define ERR_ACN_ENCODE_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		8362  /**/
#define ERR_ACN_ENCODE_ENV_GUI_HEATER_2		8411  /**/
#define asn1SccENV_GUI_REQUIRED_BYTES_FOR_ACN_ENCODING       87 
#define asn1SccENV_GUI_REQUIRED_BITS_FOR_ACN_ENCODING        692

flag asn1SccENV_GUI_ACN_Encode(const asn1SccENV_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ENV_GUI		8419  /**/
#define ERR_ACN_DECODE_ENV_GUI_PRESSURE_SENSOR_1_2		8265  /**/
#define ERR_ACN_DECODE_ENV_GUI_PRESSURE_SENSOR_2_2		8321  /**/
#define ERR_ACN_DECODE_ENV_GUI_ANEMOMETER		8370  /**/
#define ERR_ACN_DECODE_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		8335  /**/
#define ERR_ACN_DECODE_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		8349  /**/
#define ERR_ACN_DECODE_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		8363  /**/
#define ERR_ACN_DECODE_ENV_GUI_HEATER_2		8412  /**/
flag asn1SccENV_GUI_ACN_Decode(asn1SccENV_GUI* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Sccon = 0,
    asn1Sccoff = 1
} asn1SccHeater_On_Off;

// please use the following macros to avoid breaking code.
#define asn1SccHeater_On_Off_on asn1Sccon
#define asn1SccHeater_On_Off_off asn1Sccoff

flag asn1SccHeater_On_Off_Equal(const asn1SccHeater_On_Off* pVal1, const asn1SccHeater_On_Off* pVal2);

void asn1SccHeater_On_Off_Initialize(asn1SccHeater_On_Off* pVal);

#define ERR_HEATER_ON_OFF		1870  /**/
flag asn1SccHeater_On_Off_IsConstraintValid(const asn1SccHeater_On_Off* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HEATER_ON_OFF		1871  /**/
#define asn1SccHeater_On_Off_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccHeater_On_Off_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccHeater_On_Off_Encode(const asn1SccHeater_On_Off* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HEATER_ON_OFF		1872  /**/
flag asn1SccHeater_On_Off_Decode(asn1SccHeater_On_Off* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HEATER_ON_OFF		1873  /**/
#define asn1SccHeater_On_Off_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccHeater_On_Off_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag asn1SccHeater_On_Off_ACN_Encode(const asn1SccHeater_On_Off* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HEATER_ON_OFF		1874  /**/
flag asn1SccHeater_On_Off_ACN_Decode(asn1SccHeater_On_Off* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Scca1 = 0,
    asn1Scca2 = 1,
    asn1Sccf1 = 2,
    asn1Sccf2 = 3,
    asn1Sccf3 = 4,
    asn1Sccerror = 5
} asn1SccHTL_State;

// please use the following macros to avoid breaking code.
#define asn1SccHTL_State_a1 asn1Scca1
#define asn1SccHTL_State_a2 asn1Scca2
#define asn1SccHTL_State_f1 asn1Sccf1
#define asn1SccHTL_State_f2 asn1Sccf2
#define asn1SccHTL_State_f3 asn1Sccf3
#define asn1SccHTL_State_error asn1Sccerror

flag asn1SccHTL_State_Equal(const asn1SccHTL_State* pVal1, const asn1SccHTL_State* pVal2);

void asn1SccHTL_State_Initialize(asn1SccHTL_State* pVal);

#define ERR_HTL_STATE		1877  /**/
flag asn1SccHTL_State_IsConstraintValid(const asn1SccHTL_State* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HTL_STATE		1878  /**/
#define asn1SccHTL_State_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccHTL_State_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccHTL_State_Encode(const asn1SccHTL_State* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HTL_STATE		1879  /**/
flag asn1SccHTL_State_Decode(asn1SccHTL_State* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HTL_STATE		1880  /**/
#define asn1SccHTL_State_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccHTL_State_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccHTL_State_ACN_Encode(const asn1SccHTL_State* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HTL_STATE		1881  /**/
flag asn1SccHTL_State_ACN_Decode(asn1SccHTL_State* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccHTL_GUI --------------------------------------------*/
/*-- asn1SccHTL_GUI_pt1000s --------------------------------------------*/


typedef struct {
    
    asn1SccContent_Validity arr[6];
} asn1SccHTL_GUI_pt1000s_validity;
typedef struct {
    asn1SccT_Float aire_abajo;
    asn1SccT_Float aire_arriba;
    asn1SccT_Float placa_abajo;
    asn1SccT_Float placa_arriba;
    asn1SccT_Float infinito;
    asn1SccT_Float exterior;
    asn1SccHTL_GUI_pt1000s_validity validity;

} asn1SccHTL_GUI_pt1000s;
/*-- asn1SccHTL_GUI_tc74s --------------------------------------------*/


typedef struct {
    
    asn1SccContent_Validity arr[5];
} asn1SccHTL_GUI_tc74s_validity;
typedef struct {
    asn1SccT_Float x_positive;
    asn1SccT_Float x_negative;
    asn1SccT_Float y_positive;
    asn1SccT_Float y_negative;
    asn1SccT_Float z_techo;
    asn1SccHTL_GUI_tc74s_validity validity;

} asn1SccHTL_GUI_tc74s;
typedef struct {
    asn1SccHTL_State state;
    asn1SccHeater_Data heater;
    asn1SccT_Float delta_T;
    asn1SccHTL_GUI_pt1000s pt1000s;
    asn1SccHTL_GUI_tc74s tc74s;

} asn1SccHTL_GUI;

flag asn1SccHTL_GUI_pt1000s_validity_Equal(const asn1SccHTL_GUI_pt1000s_validity* pVal1, const asn1SccHTL_GUI_pt1000s_validity* pVal2);

flag asn1SccHTL_GUI_pt1000s_Equal(const asn1SccHTL_GUI_pt1000s* pVal1, const asn1SccHTL_GUI_pt1000s* pVal2);

flag asn1SccHTL_GUI_tc74s_validity_Equal(const asn1SccHTL_GUI_tc74s_validity* pVal1, const asn1SccHTL_GUI_tc74s_validity* pVal2);

flag asn1SccHTL_GUI_tc74s_Equal(const asn1SccHTL_GUI_tc74s* pVal1, const asn1SccHTL_GUI_tc74s* pVal2);

flag asn1SccHTL_GUI_Equal(const asn1SccHTL_GUI* pVal1, const asn1SccHTL_GUI* pVal2);

void asn1SccHTL_GUI_pt1000s_validity_Initialize(asn1SccHTL_GUI_pt1000s_validity* pVal);
void asn1SccHTL_GUI_pt1000s_Initialize(asn1SccHTL_GUI_pt1000s* pVal);
void asn1SccHTL_GUI_tc74s_validity_Initialize(asn1SccHTL_GUI_tc74s_validity* pVal);
void asn1SccHTL_GUI_tc74s_Initialize(asn1SccHTL_GUI_tc74s* pVal);
void asn1SccHTL_GUI_Initialize(asn1SccHTL_GUI* pVal);

#define ERR_HTL_GUI		7498  /**/
#define ERR_HTL_GUI_STATE_2		7225  /**/
#define ERR_HTL_GUI_HEATER_2		7267  /**/
#define ERR_HTL_GUI_DELTA_T_2		7281  /**/
#define ERR_HTL_GUI_PT1000S		7393  /**/
#define ERR_HTL_GUI_PT1000S_AIRE_ABAJO_2		7295  /**/
#define ERR_HTL_GUI_PT1000S_AIRE_ARRIBA_2		7309  /**/
#define ERR_HTL_GUI_PT1000S_PLACA_ABAJO_2		7323  /**/
#define ERR_HTL_GUI_PT1000S_PLACA_ARRIBA_2		7337  /**/
#define ERR_HTL_GUI_PT1000S_INFINITO_2		7351  /**/
#define ERR_HTL_GUI_PT1000S_EXTERIOR_2		7365  /**/
#define ERR_HTL_GUI_PT1000S_VALIDITY		7386  /**/
#define ERR_HTL_GUI_PT1000S_VALIDITY_ELM_2		7379  /**/
#define ERR_HTL_GUI_TC74S		7491  /**/
#define ERR_HTL_GUI_TC74S_X_POSITIVE_2		7407  /**/
#define ERR_HTL_GUI_TC74S_X_NEGATIVE_2		7421  /**/
#define ERR_HTL_GUI_TC74S_Y_POSITIVE_2		7435  /**/
#define ERR_HTL_GUI_TC74S_Y_NEGATIVE_2		7449  /**/
#define ERR_HTL_GUI_TC74S_Z_TECHO_2		7463  /**/
#define ERR_HTL_GUI_TC74S_VALIDITY		7484  /**/
#define ERR_HTL_GUI_TC74S_VALIDITY_ELM_2		7477  /**/
flag asn1SccHTL_GUI_IsConstraintValid(const asn1SccHTL_GUI* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HTL_GUI		7499  /**/
#define ERR_UPER_ENCODE_HTL_GUI_STATE_2		7226  /**/
#define ERR_UPER_ENCODE_HTL_GUI_HEATER_2		7268  /**/
#define ERR_UPER_ENCODE_HTL_GUI_DELTA_T_2		7282  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S		7394  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_AIRE_ABAJO_2		7296  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_AIRE_ARRIBA_2		7310  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_PLACA_ABAJO_2		7324  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_PLACA_ARRIBA_2		7338  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_INFINITO_2		7352  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_EXTERIOR_2		7366  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_VALIDITY		7387  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_VALIDITY_ELM_2		7380  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S		7492  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_X_POSITIVE_2		7408  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_X_NEGATIVE_2		7422  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_Y_POSITIVE_2		7436  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_Y_NEGATIVE_2		7450  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_Z_TECHO_2		7464  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_VALIDITY		7485  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_VALIDITY_ELM_2		7478  /**/
#define asn1SccHTL_GUI_REQUIRED_BYTES_FOR_ENCODING       171 
#define asn1SccHTL_GUI_REQUIRED_BITS_FOR_ENCODING        1367

flag asn1SccHTL_GUI_Encode(const asn1SccHTL_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HTL_GUI		7500  /**/
#define ERR_UPER_DECODE_HTL_GUI_STATE_2		7227  /**/
#define ERR_UPER_DECODE_HTL_GUI_HEATER_2		7269  /**/
#define ERR_UPER_DECODE_HTL_GUI_DELTA_T_2		7283  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S		7395  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_AIRE_ABAJO_2		7297  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_AIRE_ARRIBA_2		7311  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_PLACA_ABAJO_2		7325  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_PLACA_ARRIBA_2		7339  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_INFINITO_2		7353  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_EXTERIOR_2		7367  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_VALIDITY		7388  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_VALIDITY_ELM_2		7381  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S		7493  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_X_POSITIVE_2		7409  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_X_NEGATIVE_2		7423  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_Y_POSITIVE_2		7437  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_Y_NEGATIVE_2		7451  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_Z_TECHO_2		7465  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_VALIDITY		7486  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_VALIDITY_ELM_2		7479  /**/
flag asn1SccHTL_GUI_Decode(asn1SccHTL_GUI* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HTL_GUI		7501  /**/
#define ERR_ACN_ENCODE_HTL_GUI_STATE_2		7228  /**/
#define ERR_ACN_ENCODE_HTL_GUI_HEATER_2		7270  /**/
#define ERR_ACN_ENCODE_HTL_GUI_DELTA_T_2		7284  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S		7396  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_AIRE_ABAJO_2		7298  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_AIRE_ARRIBA_2		7312  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_PLACA_ABAJO_2		7326  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_PLACA_ARRIBA_2		7340  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_INFINITO_2		7354  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_EXTERIOR_2		7368  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_VALIDITY		7389  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_VALIDITY_ELM_2		7382  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S		7494  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_X_POSITIVE_2		7410  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_X_NEGATIVE_2		7424  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_Y_POSITIVE_2		7438  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_Y_NEGATIVE_2		7452  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_Z_TECHO_2		7466  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_VALIDITY		7487  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_VALIDITY_ELM_2		7480  /**/
#define asn1SccHTL_GUI_REQUIRED_BYTES_FOR_ACN_ENCODING       171 
#define asn1SccHTL_GUI_REQUIRED_BITS_FOR_ACN_ENCODING        1367

flag asn1SccHTL_GUI_ACN_Encode(const asn1SccHTL_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HTL_GUI		7502  /**/
#define ERR_ACN_DECODE_HTL_GUI_STATE_2		7229  /**/
#define ERR_ACN_DECODE_HTL_GUI_HEATER_2		7271  /**/
#define ERR_ACN_DECODE_HTL_GUI_DELTA_T_2		7285  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S		7397  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_AIRE_ABAJO_2		7299  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_AIRE_ARRIBA_2		7313  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_PLACA_ABAJO_2		7327  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_PLACA_ARRIBA_2		7341  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_INFINITO_2		7355  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_EXTERIOR_2		7369  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_VALIDITY		7390  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_VALIDITY_ELM_2		7383  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S		7495  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_X_POSITIVE_2		7411  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_X_NEGATIVE_2		7425  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_Y_POSITIVE_2		7439  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_Y_NEGATIVE_2		7453  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_Z_TECHO_2		7467  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_VALIDITY		7488  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_VALIDITY_ELM_2		7481  /**/
flag asn1SccHTL_GUI_ACN_Decode(asn1SccHTL_GUI* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Sccgps = 0,
    asn1Sccimu = 1,
    asn1Scctc74s = 2,
    asn1Sccpt1000s = 3,
    asn1Sccps1 = 4,
    asn1Sccps2 = 5,
    asn1Sccheater1 = 6,
    asn1Sccheater2 = 7,
    asn1Sccanemometer = 8
} asn1SccOBSW_DP_Filter;

// please use the following macros to avoid breaking code.
#define asn1SccOBSW_DP_Filter_gps asn1Sccgps
#define asn1SccOBSW_DP_Filter_imu asn1Sccimu
#define asn1SccOBSW_DP_Filter_tc74s asn1Scctc74s
#define asn1SccOBSW_DP_Filter_pt1000s asn1Sccpt1000s
#define asn1SccOBSW_DP_Filter_ps1 asn1Sccps1
#define asn1SccOBSW_DP_Filter_ps2 asn1Sccps2
#define asn1SccOBSW_DP_Filter_heater1 asn1Sccheater1
#define asn1SccOBSW_DP_Filter_heater2 asn1Sccheater2
#define asn1SccOBSW_DP_Filter_anemometer asn1Sccanemometer

flag asn1SccOBSW_DP_Filter_Equal(const asn1SccOBSW_DP_Filter* pVal1, const asn1SccOBSW_DP_Filter* pVal2);

void asn1SccOBSW_DP_Filter_Initialize(asn1SccOBSW_DP_Filter* pVal);

#define ERR_OBSW_DP_FILTER		3823  /**/
flag asn1SccOBSW_DP_Filter_IsConstraintValid(const asn1SccOBSW_DP_Filter* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_OBSW_DP_FILTER		3824  /**/
#define asn1SccOBSW_DP_Filter_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccOBSW_DP_Filter_REQUIRED_BITS_FOR_ENCODING        4

flag asn1SccOBSW_DP_Filter_Encode(const asn1SccOBSW_DP_Filter* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_OBSW_DP_FILTER		3825  /**/
flag asn1SccOBSW_DP_Filter_Decode(asn1SccOBSW_DP_Filter* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_OBSW_DP_FILTER		3826  /**/
#define asn1SccOBSW_DP_Filter_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccOBSW_DP_Filter_REQUIRED_BITS_FOR_ACN_ENCODING        4

flag asn1SccOBSW_DP_Filter_ACN_Encode(const asn1SccOBSW_DP_Filter* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_OBSW_DP_FILTER		3827  /**/
flag asn1SccOBSW_DP_Filter_ACN_Decode(asn1SccOBSW_DP_Filter* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


flag asn1SccT_Int32_Equal(const asn1SccT_Int32* pVal1, const asn1SccT_Int32* pVal2);

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_T_INT32		8422  /**/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT32		8423  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		8424  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		8425  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_Int32_ACN_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		8426  /**/
flag asn1SccT_Int32_ACN_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    asn1SccT_Int32 arr[5];
} asn1SccTC74s_I2CBuses;

flag asn1SccTC74s_I2CBuses_Equal(const asn1SccTC74s_I2CBuses* pVal1, const asn1SccTC74s_I2CBuses* pVal2);

void asn1SccTC74s_I2CBuses_Initialize(asn1SccTC74s_I2CBuses* pVal);

#define ERR_TC74S_I2CBUSES		1065  /**/
#define ERR_TC74S_I2CBUSES_ELM_2		1058  /**/
flag asn1SccTC74s_I2CBuses_IsConstraintValid(const asn1SccTC74s_I2CBuses* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC74S_I2CBUSES		1066  /**/
#define ERR_UPER_ENCODE_TC74S_I2CBUSES_ELM_2		1059  /**/
#define asn1SccTC74s_I2CBuses_REQUIRED_BYTES_FOR_ENCODING       20 
#define asn1SccTC74s_I2CBuses_REQUIRED_BITS_FOR_ENCODING        160

flag asn1SccTC74s_I2CBuses_Encode(const asn1SccTC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC74S_I2CBUSES		1067  /**/
#define ERR_UPER_DECODE_TC74S_I2CBUSES_ELM_2		1060  /**/
flag asn1SccTC74s_I2CBuses_Decode(asn1SccTC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TC74S_I2CBUSES		1068  /**/
#define ERR_ACN_ENCODE_TC74S_I2CBUSES_ELM_2		1061  /**/
#define asn1SccTC74s_I2CBuses_REQUIRED_BYTES_FOR_ACN_ENCODING       20 
#define asn1SccTC74s_I2CBuses_REQUIRED_BITS_FOR_ACN_ENCODING        160

flag asn1SccTC74s_I2CBuses_ACN_Encode(const asn1SccTC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TC74S_I2CBUSES		1069  /**/
#define ERR_ACN_DECODE_TC74S_I2CBUSES_ELM_2		1062  /**/
flag asn1SccTC74s_I2CBuses_ACN_Decode(asn1SccTC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    asn1SccT_Int32 arr[7];
} asn1SccPT1000s_Channels;

flag asn1SccPT1000s_Channels_Equal(const asn1SccPT1000s_Channels* pVal1, const asn1SccPT1000s_Channels* pVal2);

void asn1SccPT1000s_Channels_Initialize(asn1SccPT1000s_Channels* pVal);

#define ERR_PT1000S_CHANNELS		1128  /**/
#define ERR_PT1000S_CHANNELS_ELM_2		1121  /**/
flag asn1SccPT1000s_Channels_IsConstraintValid(const asn1SccPT1000s_Channels* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_CHANNELS		1129  /**/
#define ERR_UPER_ENCODE_PT1000S_CHANNELS_ELM_2		1122  /**/
#define asn1SccPT1000s_Channels_REQUIRED_BYTES_FOR_ENCODING       28 
#define asn1SccPT1000s_Channels_REQUIRED_BITS_FOR_ENCODING        224

flag asn1SccPT1000s_Channels_Encode(const asn1SccPT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_CHANNELS		1130  /**/
#define ERR_UPER_DECODE_PT1000S_CHANNELS_ELM_2		1123  /**/
flag asn1SccPT1000s_Channels_Decode(asn1SccPT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_CHANNELS		1131  /**/
#define ERR_ACN_ENCODE_PT1000S_CHANNELS_ELM_2		1124  /**/
#define asn1SccPT1000s_Channels_REQUIRED_BYTES_FOR_ACN_ENCODING       28 
#define asn1SccPT1000s_Channels_REQUIRED_BITS_FOR_ACN_ENCODING        224

flag asn1SccPT1000s_Channels_ACN_Encode(const asn1SccPT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_CHANNELS		1132  /**/
#define ERR_ACN_DECODE_PT1000S_CHANNELS_ELM_2		1125  /**/
flag asn1SccPT1000s_Channels_ACN_Decode(asn1SccPT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccPS_Processed_Data --------------------------------------------*/
typedef struct {
    asn1SccT_Int32 pressure;
    asn1SccT_Int32 temp;

} asn1SccPS_Processed_Data;

flag asn1SccPS_Processed_Data_Equal(const asn1SccPS_Processed_Data* pVal1, const asn1SccPS_Processed_Data* pVal2);

void asn1SccPS_Processed_Data_Initialize(asn1SccPS_Processed_Data* pVal);

#define ERR_PS_PROCESSED_DATA		1541  /**/
#define ERR_PS_PROCESSED_DATA_PRESSURE_2		1520  /**/
#define ERR_PS_PROCESSED_DATA_TEMP_2		1534  /**/
flag asn1SccPS_Processed_Data_IsConstraintValid(const asn1SccPS_Processed_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_PROCESSED_DATA		1542  /**/
#define ERR_UPER_ENCODE_PS_PROCESSED_DATA_PRESSURE_2		1521  /**/
#define ERR_UPER_ENCODE_PS_PROCESSED_DATA_TEMP_2		1535  /**/
#define asn1SccPS_Processed_Data_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccPS_Processed_Data_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccPS_Processed_Data_Encode(const asn1SccPS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_PROCESSED_DATA		1543  /**/
#define ERR_UPER_DECODE_PS_PROCESSED_DATA_PRESSURE_2		1522  /**/
#define ERR_UPER_DECODE_PS_PROCESSED_DATA_TEMP_2		1536  /**/
flag asn1SccPS_Processed_Data_Decode(asn1SccPS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_PROCESSED_DATA		1544  /**/
#define ERR_ACN_ENCODE_PS_PROCESSED_DATA_PRESSURE_2		1523  /**/
#define ERR_ACN_ENCODE_PS_PROCESSED_DATA_TEMP_2		1537  /**/
#define asn1SccPS_Processed_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define asn1SccPS_Processed_Data_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag asn1SccPS_Processed_Data_ACN_Encode(const asn1SccPS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_PROCESSED_DATA		1545  /**/
#define ERR_ACN_DECODE_PS_PROCESSED_DATA_PRESSURE_2		1524  /**/
#define ERR_ACN_DECODE_PS_PROCESSED_DATA_TEMP_2		1538  /**/
flag asn1SccPS_Processed_Data_ACN_Decode(asn1SccPS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccTM --------------------------------------------*/
/*-- asn1SccTM_imu --------------------------------------------*/
typedef struct {
    asn1SccMGT_MilliGauss_Data mgt_mgauss;
    asn1SccACC_MilliG_Data accel_mg;
    asn1SccGYRO_MilliDPS_Data gyro_mdps;
    asn1SccT_Float temp_celsius;
    asn1SccContent_Validity mgt_valid;
    asn1SccContent_Validity acc_valid;
    asn1SccContent_Validity gyro_valid;
    asn1SccContent_Validity temp_valid;

} asn1SccTM_imu;
typedef struct {
    asn1SccHTL_State state_htl;
    asn1SccHeater_Data heater1;
    asn1SccHeater_Data heater2;
    asn1SccTC74s_All_Data tc74s;
    asn1SccPT1000s_All_Data pt1000s;
    asn1SccGPS_PVT gps;
    asn1SccTM_imu imu;
    asn1SccPS_Processed_Data ps1;
    asn1SccPS_Processed_Data ps2;
    asn1SccContent_Validity ps1_validity;
    asn1SccContent_Validity ps2_validity;
    asn1SccT_UInt64 anemometer;

} asn1SccTM;

flag asn1SccTM_imu_Equal(const asn1SccTM_imu* pVal1, const asn1SccTM_imu* pVal2);

flag asn1SccTM_Equal(const asn1SccTM* pVal1, const asn1SccTM* pVal2);

void asn1SccTM_imu_Initialize(asn1SccTM_imu* pVal);
void asn1SccTM_Initialize(asn1SccTM* pVal);

#define ERR_TM		6973  /**/
#define ERR_TM_STATE_HTL_2		6133  /**/
#define ERR_TM_HEATER1_2		6175  /**/
#define ERR_TM_HEATER2_2		6217  /**/
#define ERR_TM_TC74S_2		6266  /**/
#define ERR_TM_PT1000S_2		6378  /**/
#define ERR_TM_GPS_2		6595  /**/
#define ERR_TM_IMU		6840  /**/
#define ERR_TM_IMU_MGT_MGAUSS_2		6651  /**/
#define ERR_TM_IMU_ACCEL_MG_2		6707  /**/
#define ERR_TM_IMU_GYRO_MDPS_2		6763  /**/
#define ERR_TM_IMU_TEMP_CELSIUS_2		6777  /**/
#define ERR_TM_IMU_MGT_VALID_2		6791  /**/
#define ERR_TM_IMU_ACC_VALID_2		6805  /**/
#define ERR_TM_IMU_GYRO_VALID_2		6819  /**/
#define ERR_TM_IMU_TEMP_VALID_2		6833  /**/
#define ERR_TM_PS1_2		6882  /**/
#define ERR_TM_PS2_2		6924  /**/
#define ERR_TM_PS1_VALIDITY_2		6938  /**/
#define ERR_TM_PS2_VALIDITY_2		6952  /**/
#define ERR_TM_ANEMOMETER_2		6966  /**/
flag asn1SccTM_IsConstraintValid(const asn1SccTM* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM		6974  /**/
#define ERR_UPER_ENCODE_TM_STATE_HTL_2		6134  /**/
#define ERR_UPER_ENCODE_TM_HEATER1_2		6176  /**/
#define ERR_UPER_ENCODE_TM_HEATER2_2		6218  /**/
#define ERR_UPER_ENCODE_TM_TC74S_2		6267  /**/
#define ERR_UPER_ENCODE_TM_PT1000S_2		6379  /**/
#define ERR_UPER_ENCODE_TM_GPS_2		6596  /**/
#define ERR_UPER_ENCODE_TM_IMU		6841  /**/
#define ERR_UPER_ENCODE_TM_IMU_MGT_MGAUSS_2		6652  /**/
#define ERR_UPER_ENCODE_TM_IMU_ACCEL_MG_2		6708  /**/
#define ERR_UPER_ENCODE_TM_IMU_GYRO_MDPS_2		6764  /**/
#define ERR_UPER_ENCODE_TM_IMU_TEMP_CELSIUS_2		6778  /**/
#define ERR_UPER_ENCODE_TM_IMU_MGT_VALID_2		6792  /**/
#define ERR_UPER_ENCODE_TM_IMU_ACC_VALID_2		6806  /**/
#define ERR_UPER_ENCODE_TM_IMU_GYRO_VALID_2		6820  /**/
#define ERR_UPER_ENCODE_TM_IMU_TEMP_VALID_2		6834  /**/
#define ERR_UPER_ENCODE_TM_PS1_2		6883  /**/
#define ERR_UPER_ENCODE_TM_PS2_2		6925  /**/
#define ERR_UPER_ENCODE_TM_PS1_VALIDITY_2		6939  /**/
#define ERR_UPER_ENCODE_TM_PS2_VALIDITY_2		6953  /**/
#define ERR_UPER_ENCODE_TM_ANEMOMETER_2		6967  /**/
#define asn1SccTM_REQUIRED_BYTES_FOR_ENCODING       704 
#define asn1SccTM_REQUIRED_BITS_FOR_ENCODING        5625

flag asn1SccTM_Encode(const asn1SccTM* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM		6975  /**/
#define ERR_UPER_DECODE_TM_STATE_HTL_2		6135  /**/
#define ERR_UPER_DECODE_TM_HEATER1_2		6177  /**/
#define ERR_UPER_DECODE_TM_HEATER2_2		6219  /**/
#define ERR_UPER_DECODE_TM_TC74S_2		6268  /**/
#define ERR_UPER_DECODE_TM_PT1000S_2		6380  /**/
#define ERR_UPER_DECODE_TM_GPS_2		6597  /**/
#define ERR_UPER_DECODE_TM_IMU		6842  /**/
#define ERR_UPER_DECODE_TM_IMU_MGT_MGAUSS_2		6653  /**/
#define ERR_UPER_DECODE_TM_IMU_ACCEL_MG_2		6709  /**/
#define ERR_UPER_DECODE_TM_IMU_GYRO_MDPS_2		6765  /**/
#define ERR_UPER_DECODE_TM_IMU_TEMP_CELSIUS_2		6779  /**/
#define ERR_UPER_DECODE_TM_IMU_MGT_VALID_2		6793  /**/
#define ERR_UPER_DECODE_TM_IMU_ACC_VALID_2		6807  /**/
#define ERR_UPER_DECODE_TM_IMU_GYRO_VALID_2		6821  /**/
#define ERR_UPER_DECODE_TM_IMU_TEMP_VALID_2		6835  /**/
#define ERR_UPER_DECODE_TM_PS1_2		6884  /**/
#define ERR_UPER_DECODE_TM_PS2_2		6926  /**/
#define ERR_UPER_DECODE_TM_PS1_VALIDITY_2		6940  /**/
#define ERR_UPER_DECODE_TM_PS2_VALIDITY_2		6954  /**/
#define ERR_UPER_DECODE_TM_ANEMOMETER_2		6968  /**/
flag asn1SccTM_Decode(asn1SccTM* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TM		6976  /**/
#define ERR_ACN_ENCODE_TM_STATE_HTL_2		6136  /**/
#define ERR_ACN_ENCODE_TM_HEATER1_2		6178  /**/
#define ERR_ACN_ENCODE_TM_HEATER2_2		6220  /**/
#define ERR_ACN_ENCODE_TM_TC74S_2		6269  /**/
#define ERR_ACN_ENCODE_TM_PT1000S_2		6381  /**/
#define ERR_ACN_ENCODE_TM_GPS_2		6598  /**/
#define ERR_ACN_ENCODE_TM_IMU		6843  /**/
#define ERR_ACN_ENCODE_TM_IMU_MGT_MGAUSS_2		6654  /**/
#define ERR_ACN_ENCODE_TM_IMU_ACCEL_MG_2		6710  /**/
#define ERR_ACN_ENCODE_TM_IMU_GYRO_MDPS_2		6766  /**/
#define ERR_ACN_ENCODE_TM_IMU_TEMP_CELSIUS_2		6780  /**/
#define ERR_ACN_ENCODE_TM_IMU_MGT_VALID_2		6794  /**/
#define ERR_ACN_ENCODE_TM_IMU_ACC_VALID_2		6808  /**/
#define ERR_ACN_ENCODE_TM_IMU_GYRO_VALID_2		6822  /**/
#define ERR_ACN_ENCODE_TM_IMU_TEMP_VALID_2		6836  /**/
#define ERR_ACN_ENCODE_TM_PS1_2		6885  /**/
#define ERR_ACN_ENCODE_TM_PS2_2		6927  /**/
#define ERR_ACN_ENCODE_TM_PS1_VALIDITY_2		6941  /**/
#define ERR_ACN_ENCODE_TM_PS2_VALIDITY_2		6955  /**/
#define ERR_ACN_ENCODE_TM_ANEMOMETER_2		6969  /**/
#define asn1SccTM_REQUIRED_BYTES_FOR_ACN_ENCODING       704 
#define asn1SccTM_REQUIRED_BITS_FOR_ACN_ENCODING        5625

flag asn1SccTM_ACN_Encode(const asn1SccTM* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TM		6977  /**/
#define ERR_ACN_DECODE_TM_STATE_HTL_2		6137  /**/
#define ERR_ACN_DECODE_TM_HEATER1_2		6179  /**/
#define ERR_ACN_DECODE_TM_HEATER2_2		6221  /**/
#define ERR_ACN_DECODE_TM_TC74S_2		6270  /**/
#define ERR_ACN_DECODE_TM_PT1000S_2		6382  /**/
#define ERR_ACN_DECODE_TM_GPS_2		6599  /**/
#define ERR_ACN_DECODE_TM_IMU		6844  /**/
#define ERR_ACN_DECODE_TM_IMU_MGT_MGAUSS_2		6655  /**/
#define ERR_ACN_DECODE_TM_IMU_ACCEL_MG_2		6711  /**/
#define ERR_ACN_DECODE_TM_IMU_GYRO_MDPS_2		6767  /**/
#define ERR_ACN_DECODE_TM_IMU_TEMP_CELSIUS_2		6781  /**/
#define ERR_ACN_DECODE_TM_IMU_MGT_VALID_2		6795  /**/
#define ERR_ACN_DECODE_TM_IMU_ACC_VALID_2		6809  /**/
#define ERR_ACN_DECODE_TM_IMU_GYRO_VALID_2		6823  /**/
#define ERR_ACN_DECODE_TM_IMU_TEMP_VALID_2		6837  /**/
#define ERR_ACN_DECODE_TM_PS1_2		6886  /**/
#define ERR_ACN_DECODE_TM_PS2_2		6928  /**/
#define ERR_ACN_DECODE_TM_PS1_VALIDITY_2		6942  /**/
#define ERR_ACN_DECODE_TM_PS2_VALIDITY_2		6956  /**/
#define ERR_ACN_DECODE_TM_ANEMOMETER_2		6970  /**/
flag asn1SccTM_ACN_Decode(asn1SccTM* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccDate_Time --------------------------------------------*/
typedef struct {
    asn1SccT_Int32 day;
    asn1SccT_Int32 month;
    asn1SccT_Int32 year;
    asn1SccT_Int32 hour;
    asn1SccT_Int32 minute;
    asn1SccT_Int32 second;

} asn1SccDate_Time;

flag asn1SccDate_Time_Equal(const asn1SccDate_Time* pVal1, const asn1SccDate_Time* pVal2);

void asn1SccDate_Time_Initialize(asn1SccDate_Time* pVal);

#define ERR_DATE_TIME		7589  /**/
#define ERR_DATE_TIME_DAY_2		7512  /**/
#define ERR_DATE_TIME_MONTH_2		7526  /**/
#define ERR_DATE_TIME_YEAR_2		7540  /**/
#define ERR_DATE_TIME_HOUR_2		7554  /**/
#define ERR_DATE_TIME_MINUTE_2		7568  /**/
#define ERR_DATE_TIME_SECOND_2		7582  /**/
flag asn1SccDate_Time_IsConstraintValid(const asn1SccDate_Time* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DATE_TIME		7590  /**/
#define ERR_UPER_ENCODE_DATE_TIME_DAY_2		7513  /**/
#define ERR_UPER_ENCODE_DATE_TIME_MONTH_2		7527  /**/
#define ERR_UPER_ENCODE_DATE_TIME_YEAR_2		7541  /**/
#define ERR_UPER_ENCODE_DATE_TIME_HOUR_2		7555  /**/
#define ERR_UPER_ENCODE_DATE_TIME_MINUTE_2		7569  /**/
#define ERR_UPER_ENCODE_DATE_TIME_SECOND_2		7583  /**/
#define asn1SccDate_Time_REQUIRED_BYTES_FOR_ENCODING       24 
#define asn1SccDate_Time_REQUIRED_BITS_FOR_ENCODING        192

flag asn1SccDate_Time_Encode(const asn1SccDate_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DATE_TIME		7591  /**/
#define ERR_UPER_DECODE_DATE_TIME_DAY_2		7514  /**/
#define ERR_UPER_DECODE_DATE_TIME_MONTH_2		7528  /**/
#define ERR_UPER_DECODE_DATE_TIME_YEAR_2		7542  /**/
#define ERR_UPER_DECODE_DATE_TIME_HOUR_2		7556  /**/
#define ERR_UPER_DECODE_DATE_TIME_MINUTE_2		7570  /**/
#define ERR_UPER_DECODE_DATE_TIME_SECOND_2		7584  /**/
flag asn1SccDate_Time_Decode(asn1SccDate_Time* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DATE_TIME		7592  /**/
#define ERR_ACN_ENCODE_DATE_TIME_DAY_2		7515  /**/
#define ERR_ACN_ENCODE_DATE_TIME_MONTH_2		7529  /**/
#define ERR_ACN_ENCODE_DATE_TIME_YEAR_2		7543  /**/
#define ERR_ACN_ENCODE_DATE_TIME_HOUR_2		7557  /**/
#define ERR_ACN_ENCODE_DATE_TIME_MINUTE_2		7571  /**/
#define ERR_ACN_ENCODE_DATE_TIME_SECOND_2		7585  /**/
#define asn1SccDate_Time_REQUIRED_BYTES_FOR_ACN_ENCODING       24 
#define asn1SccDate_Time_REQUIRED_BITS_FOR_ACN_ENCODING        192

flag asn1SccDate_Time_ACN_Encode(const asn1SccDate_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DATE_TIME		7593  /**/
#define ERR_ACN_DECODE_DATE_TIME_DAY_2		7516  /**/
#define ERR_ACN_DECODE_DATE_TIME_MONTH_2		7530  /**/
#define ERR_ACN_DECODE_DATE_TIME_YEAR_2		7544  /**/
#define ERR_ACN_DECODE_DATE_TIME_HOUR_2		7558  /**/
#define ERR_ACN_DECODE_DATE_TIME_MINUTE_2		7572  /**/
#define ERR_ACN_DECODE_DATE_TIME_SECOND_2		7586  /**/
flag asn1SccDate_Time_ACN_Decode(asn1SccDate_Time* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccATT_GUI --------------------------------------------*/
/*-- asn1SccATT_GUI_imu --------------------------------------------*/
typedef struct {
    asn1SccMGT_MilliGauss_Data mgt_mgauss;
    asn1SccACC_MilliG_Data accel_mg;
    asn1SccGYRO_MilliDPS_Data gyro_mdps;
    asn1SccT_Float temp_celsius;
    asn1SccContent_Validity mgt_valid;
    asn1SccContent_Validity acc_valid;
    asn1SccContent_Validity gyro_valid;
    asn1SccContent_Validity temp_valid;

} asn1SccATT_GUI_imu;
typedef struct {
    asn1SccGPS_PVT gps;
    asn1SccDate_Time gps_date_time;
    asn1SccATT_GUI_imu imu;

} asn1SccATT_GUI;

flag asn1SccATT_GUI_imu_Equal(const asn1SccATT_GUI_imu* pVal1, const asn1SccATT_GUI_imu* pVal2);

flag asn1SccATT_GUI_Equal(const asn1SccATT_GUI* pVal1, const asn1SccATT_GUI* pVal2);

void asn1SccATT_GUI_imu_Initialize(asn1SccATT_GUI_imu* pVal);
void asn1SccATT_GUI_Initialize(asn1SccATT_GUI* pVal);

#define ERR_ATT_GUI		8156  /**/
#define ERR_ATT_GUI_GPS_2		7806  /**/
#define ERR_ATT_GUI_GPS_DATE_TIME_2		7904  /**/
#define ERR_ATT_GUI_IMU		8149  /**/
#define ERR_ATT_GUI_IMU_MGT_MGAUSS_2		7960  /**/
#define ERR_ATT_GUI_IMU_ACCEL_MG_2		8016  /**/
#define ERR_ATT_GUI_IMU_GYRO_MDPS_2		8072  /**/
#define ERR_ATT_GUI_IMU_TEMP_CELSIUS_2		8086  /**/
#define ERR_ATT_GUI_IMU_MGT_VALID_2		8100  /**/
#define ERR_ATT_GUI_IMU_ACC_VALID_2		8114  /**/
#define ERR_ATT_GUI_IMU_GYRO_VALID_2		8128  /**/
#define ERR_ATT_GUI_IMU_TEMP_VALID_2		8142  /**/
flag asn1SccATT_GUI_IsConstraintValid(const asn1SccATT_GUI* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ATT_GUI		8157  /**/
#define ERR_UPER_ENCODE_ATT_GUI_GPS_2		7807  /**/
#define ERR_UPER_ENCODE_ATT_GUI_GPS_DATE_TIME_2		7905  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU		8150  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_MGT_MGAUSS_2		7961  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_ACCEL_MG_2		8017  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_GYRO_MDPS_2		8073  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_TEMP_CELSIUS_2		8087  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_MGT_VALID_2		8101  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_ACC_VALID_2		8115  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_GYRO_VALID_2		8129  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_TEMP_VALID_2		8143  /**/
#define asn1SccATT_GUI_REQUIRED_BYTES_FOR_ENCODING       337 
#define asn1SccATT_GUI_REQUIRED_BITS_FOR_ENCODING        2694

flag asn1SccATT_GUI_Encode(const asn1SccATT_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ATT_GUI		8158  /**/
#define ERR_UPER_DECODE_ATT_GUI_GPS_2		7808  /**/
#define ERR_UPER_DECODE_ATT_GUI_GPS_DATE_TIME_2		7906  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU		8151  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_MGT_MGAUSS_2		7962  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_ACCEL_MG_2		8018  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_GYRO_MDPS_2		8074  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_TEMP_CELSIUS_2		8088  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_MGT_VALID_2		8102  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_ACC_VALID_2		8116  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_GYRO_VALID_2		8130  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_TEMP_VALID_2		8144  /**/
flag asn1SccATT_GUI_Decode(asn1SccATT_GUI* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ATT_GUI		8159  /**/
#define ERR_ACN_ENCODE_ATT_GUI_GPS_2		7809  /**/
#define ERR_ACN_ENCODE_ATT_GUI_GPS_DATE_TIME_2		7907  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU		8152  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_MGT_MGAUSS_2		7963  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_ACCEL_MG_2		8019  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_GYRO_MDPS_2		8075  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_TEMP_CELSIUS_2		8089  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_MGT_VALID_2		8103  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_ACC_VALID_2		8117  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_GYRO_VALID_2		8131  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_TEMP_VALID_2		8145  /**/
#define asn1SccATT_GUI_REQUIRED_BYTES_FOR_ACN_ENCODING       337 
#define asn1SccATT_GUI_REQUIRED_BITS_FOR_ACN_ENCODING        2694

flag asn1SccATT_GUI_ACN_Encode(const asn1SccATT_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ATT_GUI		8160  /**/
#define ERR_ACN_DECODE_ATT_GUI_GPS_2		7810  /**/
#define ERR_ACN_DECODE_ATT_GUI_GPS_DATE_TIME_2		7908  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU		8153  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_MGT_MGAUSS_2		7964  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_ACCEL_MG_2		8020  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_GYRO_MDPS_2		8076  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_TEMP_CELSIUS_2		8090  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_MGT_VALID_2		8104  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_ACC_VALID_2		8118  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_GYRO_VALID_2		8132  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_TEMP_VALID_2		8146  /**/
flag asn1SccATT_GUI_ACN_Decode(asn1SccATT_GUI* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


flag asn1SccT_UInt32_Equal(const asn1SccT_UInt32* pVal1, const asn1SccT_UInt32* pVal2);

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_T_UINT32		8429  /**/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT32		8430  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		8431  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		8432  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_UInt32_ACN_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		8433  /**/
flag asn1SccT_UInt32_ACN_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccPS_Raw_Data --------------------------------------------*/
typedef struct {
    asn1SccT_UInt32 d1;
    asn1SccT_UInt32 d2;

} asn1SccPS_Raw_Data;

flag asn1SccPS_Raw_Data_Equal(const asn1SccPS_Raw_Data* pVal1, const asn1SccPS_Raw_Data* pVal2);

void asn1SccPS_Raw_Data_Initialize(asn1SccPS_Raw_Data* pVal);

#define ERR_PS_RAW_DATA		1506  /**/
#define ERR_PS_RAW_DATA_D1_2		1485  /**/
#define ERR_PS_RAW_DATA_D2_2		1499  /**/
flag asn1SccPS_Raw_Data_IsConstraintValid(const asn1SccPS_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_RAW_DATA		1507  /**/
#define ERR_UPER_ENCODE_PS_RAW_DATA_D1_2		1486  /**/
#define ERR_UPER_ENCODE_PS_RAW_DATA_D2_2		1500  /**/
#define asn1SccPS_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccPS_Raw_Data_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccPS_Raw_Data_Encode(const asn1SccPS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_RAW_DATA		1508  /**/
#define ERR_UPER_DECODE_PS_RAW_DATA_D1_2		1487  /**/
#define ERR_UPER_DECODE_PS_RAW_DATA_D2_2		1501  /**/
flag asn1SccPS_Raw_Data_Decode(asn1SccPS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_RAW_DATA		1509  /**/
#define ERR_ACN_ENCODE_PS_RAW_DATA_D1_2		1488  /**/
#define ERR_ACN_ENCODE_PS_RAW_DATA_D2_2		1502  /**/
#define asn1SccPS_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define asn1SccPS_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag asn1SccPS_Raw_Data_ACN_Encode(const asn1SccPS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_RAW_DATA		1510  /**/
#define ERR_ACN_DECODE_PS_RAW_DATA_D1_2		1489  /**/
#define ERR_ACN_DECODE_PS_RAW_DATA_D2_2		1503  /**/
flag asn1SccPS_Raw_Data_ACN_Decode(asn1SccPS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccPS_All_Data --------------------------------------------*/
typedef struct {
    asn1SccPS_Calibration_Data calib;
    asn1SccPS_Raw_Data raw;
    asn1SccPS_Processed_Data processed;
    asn1SccContent_Validity validity;

} asn1SccPS_All_Data;

flag asn1SccPS_All_Data_Equal(const asn1SccPS_All_Data* pVal1, const asn1SccPS_All_Data* pVal2);

void asn1SccPS_All_Data_Initialize(asn1SccPS_All_Data* pVal);

#define ERR_PS_ALL_DATA		1828  /**/
#define ERR_PS_ALL_DATA_CALIB_2		1723  /**/
#define ERR_PS_ALL_DATA_RAW_2		1765  /**/
#define ERR_PS_ALL_DATA_PROCESSED_2		1807  /**/
#define ERR_PS_ALL_DATA_VALIDITY_2		1821  /**/
flag asn1SccPS_All_Data_IsConstraintValid(const asn1SccPS_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_ALL_DATA		1829  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_CALIB_2		1724  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_RAW_2		1766  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_PROCESSED_2		1808  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_VALIDITY_2		1822  /**/
#define asn1SccPS_All_Data_REQUIRED_BYTES_FOR_ENCODING       107 
#define asn1SccPS_All_Data_REQUIRED_BITS_FOR_ENCODING        849

flag asn1SccPS_All_Data_Encode(const asn1SccPS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_ALL_DATA		1830  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_CALIB_2		1725  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_RAW_2		1767  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_PROCESSED_2		1809  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_VALIDITY_2		1823  /**/
flag asn1SccPS_All_Data_Decode(asn1SccPS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_ALL_DATA		1831  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_CALIB_2		1726  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_RAW_2		1768  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_PROCESSED_2		1810  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_VALIDITY_2		1824  /**/
#define asn1SccPS_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       107 
#define asn1SccPS_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        849

flag asn1SccPS_All_Data_ACN_Encode(const asn1SccPS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_ALL_DATA		1832  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_CALIB_2		1727  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_RAW_2		1769  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_PROCESSED_2		1811  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_VALIDITY_2		1825  /**/
flag asn1SccPS_All_Data_ACN_Decode(asn1SccPS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccOBSW_DP_Data --------------------------------------------*/
/*-- asn1SccOBSW_DP_Data_gps --------------------------------------------*/
typedef struct {
    asn1SccGPS_PVT data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_Data_gps;
/*-- asn1SccOBSW_DP_Data_imu --------------------------------------------*/
typedef struct {
    asn1SccIMU_All_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_Data_imu;
/*-- asn1SccOBSW_DP_Data_tc74s --------------------------------------------*/
typedef struct {
    asn1SccTC74s_All_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_Data_tc74s;
/*-- asn1SccOBSW_DP_Data_pt1000s --------------------------------------------*/
typedef struct {
    asn1SccPT1000s_All_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_Data_pt1000s;
/*-- asn1SccOBSW_DP_Data_ps1 --------------------------------------------*/
typedef struct {
    asn1SccPS_All_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_Data_ps1;
/*-- asn1SccOBSW_DP_Data_ps2 --------------------------------------------*/
typedef struct {
    asn1SccPS_All_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_Data_ps2;
/*-- asn1SccOBSW_DP_Data_heater1 --------------------------------------------*/
typedef struct {
    asn1SccHeater_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_Data_heater1;
/*-- asn1SccOBSW_DP_Data_heater2 --------------------------------------------*/
typedef struct {
    asn1SccHeater_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_Data_heater2;
/*-- asn1SccOBSW_DP_Data_anemometer --------------------------------------------*/
typedef struct {
    asn1SccT_UInt64 data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_Data_anemometer;
typedef struct {
    asn1SccOBSW_DP_Data_gps gps;
    asn1SccOBSW_DP_Data_imu imu;
    asn1SccOBSW_DP_Data_tc74s tc74s;
    asn1SccOBSW_DP_Data_pt1000s pt1000s;
    asn1SccOBSW_DP_Data_ps1 ps1;
    asn1SccOBSW_DP_Data_ps2 ps2;
    asn1SccOBSW_DP_Data_heater1 heater1;
    asn1SccOBSW_DP_Data_heater2 heater2;
    asn1SccOBSW_DP_Data_anemometer anemometer;

    struct {
        unsigned int gps:1;
        unsigned int imu:1;
        unsigned int tc74s:1;
        unsigned int pt1000s:1;
        unsigned int ps1:1;
        unsigned int ps2:1;
        unsigned int heater1:1;
        unsigned int heater2:1;
        unsigned int anemometer:1;
    } exist;

} asn1SccOBSW_DP_Data;

flag asn1SccOBSW_DP_Data_gps_Equal(const asn1SccOBSW_DP_Data_gps* pVal1, const asn1SccOBSW_DP_Data_gps* pVal2);

flag asn1SccOBSW_DP_Data_imu_Equal(const asn1SccOBSW_DP_Data_imu* pVal1, const asn1SccOBSW_DP_Data_imu* pVal2);

flag asn1SccOBSW_DP_Data_tc74s_Equal(const asn1SccOBSW_DP_Data_tc74s* pVal1, const asn1SccOBSW_DP_Data_tc74s* pVal2);

flag asn1SccOBSW_DP_Data_pt1000s_Equal(const asn1SccOBSW_DP_Data_pt1000s* pVal1, const asn1SccOBSW_DP_Data_pt1000s* pVal2);

flag asn1SccOBSW_DP_Data_ps1_Equal(const asn1SccOBSW_DP_Data_ps1* pVal1, const asn1SccOBSW_DP_Data_ps1* pVal2);

flag asn1SccOBSW_DP_Data_ps2_Equal(const asn1SccOBSW_DP_Data_ps2* pVal1, const asn1SccOBSW_DP_Data_ps2* pVal2);

flag asn1SccOBSW_DP_Data_heater1_Equal(const asn1SccOBSW_DP_Data_heater1* pVal1, const asn1SccOBSW_DP_Data_heater1* pVal2);

flag asn1SccOBSW_DP_Data_heater2_Equal(const asn1SccOBSW_DP_Data_heater2* pVal1, const asn1SccOBSW_DP_Data_heater2* pVal2);

flag asn1SccOBSW_DP_Data_anemometer_Equal(const asn1SccOBSW_DP_Data_anemometer* pVal1, const asn1SccOBSW_DP_Data_anemometer* pVal2);

flag asn1SccOBSW_DP_Data_Equal(const asn1SccOBSW_DP_Data* pVal1, const asn1SccOBSW_DP_Data* pVal2);

void asn1SccOBSW_DP_Data_gps_Initialize(asn1SccOBSW_DP_Data_gps* pVal);
void asn1SccOBSW_DP_Data_imu_Initialize(asn1SccOBSW_DP_Data_imu* pVal);
void asn1SccOBSW_DP_Data_tc74s_Initialize(asn1SccOBSW_DP_Data_tc74s* pVal);
void asn1SccOBSW_DP_Data_pt1000s_Initialize(asn1SccOBSW_DP_Data_pt1000s* pVal);
void asn1SccOBSW_DP_Data_ps1_Initialize(asn1SccOBSW_DP_Data_ps1* pVal);
void asn1SccOBSW_DP_Data_ps2_Initialize(asn1SccOBSW_DP_Data_ps2* pVal);
void asn1SccOBSW_DP_Data_heater1_Initialize(asn1SccOBSW_DP_Data_heater1* pVal);
void asn1SccOBSW_DP_Data_heater2_Initialize(asn1SccOBSW_DP_Data_heater2* pVal);
void asn1SccOBSW_DP_Data_anemometer_Initialize(asn1SccOBSW_DP_Data_anemometer* pVal);
void asn1SccOBSW_DP_Data_Initialize(asn1SccOBSW_DP_Data* pVal);

#define ERR_OBSW_DP_DATA		3816  /**/
#define ERR_OBSW_DP_DATA_GPS		2248  /**/
#define ERR_OBSW_DP_DATA_GPS_DATA_2		2213  /**/
#define ERR_OBSW_DP_DATA_GPS_GPS_TIME_2		2227  /**/
#define ERR_OBSW_DP_DATA_GPS_MISSION_TIME_2		2241  /**/
#define ERR_OBSW_DP_DATA_IMU		2717  /**/
#define ERR_OBSW_DP_DATA_IMU_DATA_2		2682  /**/
#define ERR_OBSW_DP_DATA_IMU_GPS_TIME_2		2696  /**/
#define ERR_OBSW_DP_DATA_IMU_MISSION_TIME_2		2710  /**/
#define ERR_OBSW_DP_DATA_TC74S		2801  /**/
#define ERR_OBSW_DP_DATA_TC74S_DATA_2		2766  /**/
#define ERR_OBSW_DP_DATA_TC74S_GPS_TIME_2		2780  /**/
#define ERR_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2794  /**/
#define ERR_OBSW_DP_DATA_PT1000S		2948  /**/
#define ERR_OBSW_DP_DATA_PT1000S_DATA_2		2913  /**/
#define ERR_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2927  /**/
#define ERR_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2941  /**/
#define ERR_OBSW_DP_DATA_PS1		3277  /**/
#define ERR_OBSW_DP_DATA_PS1_DATA_2		3242  /**/
#define ERR_OBSW_DP_DATA_PS1_GPS_TIME_2		3256  /**/
#define ERR_OBSW_DP_DATA_PS1_MISSION_TIME_2		3270  /**/
#define ERR_OBSW_DP_DATA_PS2		3606  /**/
#define ERR_OBSW_DP_DATA_PS2_DATA_2		3571  /**/
#define ERR_OBSW_DP_DATA_PS2_GPS_TIME_2		3585  /**/
#define ERR_OBSW_DP_DATA_PS2_MISSION_TIME_2		3599  /**/
#define ERR_OBSW_DP_DATA_HEATER1		3683  /**/
#define ERR_OBSW_DP_DATA_HEATER1_DATA_2		3648  /**/
#define ERR_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3662  /**/
#define ERR_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3676  /**/
#define ERR_OBSW_DP_DATA_HEATER2		3760  /**/
#define ERR_OBSW_DP_DATA_HEATER2_DATA_2		3725  /**/
#define ERR_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3739  /**/
#define ERR_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3753  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER		3809  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER_DATA_2		3774  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3788  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3802  /**/
flag asn1SccOBSW_DP_Data_IsConstraintValid(const asn1SccOBSW_DP_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_OBSW_DP_DATA		3817  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS		2249  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS_DATA_2		2214  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS_GPS_TIME_2		2228  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS_MISSION_TIME_2		2242  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU		2718  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU_DATA_2		2683  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU_GPS_TIME_2		2697  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU_MISSION_TIME_2		2711  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S		2802  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S_DATA_2		2767  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S_GPS_TIME_2		2781  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2795  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S		2949  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S_DATA_2		2914  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2928  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2942  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1		3278  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1_DATA_2		3243  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1_GPS_TIME_2		3257  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1_MISSION_TIME_2		3271  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2		3607  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2_DATA_2		3572  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2_GPS_TIME_2		3586  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2_MISSION_TIME_2		3600  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1		3684  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1_DATA_2		3649  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3663  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3677  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2		3761  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2_DATA_2		3726  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3740  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3754  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER		3810  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3775  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3789  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3803  /**/
#define asn1SccOBSW_DP_Data_REQUIRED_BYTES_FOR_ENCODING       1154 
#define asn1SccOBSW_DP_Data_REQUIRED_BITS_FOR_ENCODING        9231

flag asn1SccOBSW_DP_Data_Encode(const asn1SccOBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_OBSW_DP_DATA		3818  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS		2250  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS_DATA_2		2215  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS_GPS_TIME_2		2229  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS_MISSION_TIME_2		2243  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU		2719  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU_DATA_2		2684  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU_GPS_TIME_2		2698  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU_MISSION_TIME_2		2712  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S		2803  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S_DATA_2		2768  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S_GPS_TIME_2		2782  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2796  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S		2950  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S_DATA_2		2915  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2929  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2943  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1		3279  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1_DATA_2		3244  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1_GPS_TIME_2		3258  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1_MISSION_TIME_2		3272  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2		3608  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2_DATA_2		3573  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2_GPS_TIME_2		3587  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2_MISSION_TIME_2		3601  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1		3685  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1_DATA_2		3650  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3664  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3678  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2		3762  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2_DATA_2		3727  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3741  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3755  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER		3811  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3776  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3790  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3804  /**/
flag asn1SccOBSW_DP_Data_Decode(asn1SccOBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_OBSW_DP_DATA		3819  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS		2251  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS_DATA_2		2216  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS_GPS_TIME_2		2230  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS_MISSION_TIME_2		2244  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU		2720  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU_DATA_2		2685  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU_GPS_TIME_2		2699  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU_MISSION_TIME_2		2713  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S		2804  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S_DATA_2		2769  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S_GPS_TIME_2		2783  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2797  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S		2951  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S_DATA_2		2916  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2930  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2944  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1		3280  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1_DATA_2		3245  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1_GPS_TIME_2		3259  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1_MISSION_TIME_2		3273  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2		3609  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2_DATA_2		3574  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2_GPS_TIME_2		3588  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2_MISSION_TIME_2		3602  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1		3686  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1_DATA_2		3651  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3665  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3679  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2		3763  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2_DATA_2		3728  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3742  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3756  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER		3812  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3777  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3791  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3805  /**/
#define asn1SccOBSW_DP_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       1154 
#define asn1SccOBSW_DP_Data_REQUIRED_BITS_FOR_ACN_ENCODING        9231

flag asn1SccOBSW_DP_Data_ACN_Encode(const asn1SccOBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_OBSW_DP_DATA		3820  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS		2252  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS_DATA_2		2217  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS_GPS_TIME_2		2231  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS_MISSION_TIME_2		2245  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU		2721  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU_DATA_2		2686  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU_GPS_TIME_2		2700  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU_MISSION_TIME_2		2714  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S		2805  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S_DATA_2		2770  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S_GPS_TIME_2		2784  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2798  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S		2952  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S_DATA_2		2917  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2931  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2945  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1		3281  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1_DATA_2		3246  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1_GPS_TIME_2		3260  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1_MISSION_TIME_2		3274  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2		3610  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2_DATA_2		3575  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2_GPS_TIME_2		3589  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2_MISSION_TIME_2		3603  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1		3687  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1_DATA_2		3652  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3666  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3680  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2		3764  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2_DATA_2		3729  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3743  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3757  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER		3813  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3778  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3792  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3806  /**/
flag asn1SccOBSW_DP_Data_ACN_Decode(asn1SccOBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccOBSW_DP_SingleData --------------------------------------------*/
/*-- asn1SccOBSW_DP_SingleData_gps --------------------------------------------*/
typedef struct {
    asn1SccGPS_PVT data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_SingleData_gps;
/*-- asn1SccOBSW_DP_SingleData_imu --------------------------------------------*/
typedef struct {
    asn1SccIMU_All_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_SingleData_imu;
/*-- asn1SccOBSW_DP_SingleData_tc74s --------------------------------------------*/
typedef struct {
    asn1SccTC74s_All_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_SingleData_tc74s;
/*-- asn1SccOBSW_DP_SingleData_pt1000s --------------------------------------------*/
typedef struct {
    asn1SccPT1000s_All_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_SingleData_pt1000s;
/*-- asn1SccOBSW_DP_SingleData_ps1 --------------------------------------------*/
typedef struct {
    asn1SccPS_All_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_SingleData_ps1;
/*-- asn1SccOBSW_DP_SingleData_ps2 --------------------------------------------*/
typedef struct {
    asn1SccPS_All_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_SingleData_ps2;
/*-- asn1SccOBSW_DP_SingleData_heater1 --------------------------------------------*/
typedef struct {
    asn1SccHeater_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_SingleData_heater1;
/*-- asn1SccOBSW_DP_SingleData_heater2 --------------------------------------------*/
typedef struct {
    asn1SccHeater_Data data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_SingleData_heater2;
/*-- asn1SccOBSW_DP_SingleData_anemometer --------------------------------------------*/
typedef struct {
    asn1SccT_UInt64 data;
    asn1SccT_Double gps_time;
    asn1SccT_Double mission_time;

} asn1SccOBSW_DP_SingleData_anemometer;

typedef enum {
    OBSW_DP_SingleData_NONE,
    gps_PRESENT,
    imu_PRESENT,
    tc74s_PRESENT,
    pt1000s_PRESENT,
    ps1_PRESENT,
    ps2_PRESENT,
    heater1_PRESENT,
    heater2_PRESENT,
    anemometer_PRESENT 
} asn1SccOBSW_DP_SingleData_selection;


typedef struct {
    asn1SccOBSW_DP_SingleData_selection kind;
    
    union {
        asn1SccOBSW_DP_SingleData_gps gps;
        asn1SccOBSW_DP_SingleData_imu imu;
        asn1SccOBSW_DP_SingleData_tc74s tc74s;
        asn1SccOBSW_DP_SingleData_pt1000s pt1000s;
        asn1SccOBSW_DP_SingleData_ps1 ps1;
        asn1SccOBSW_DP_SingleData_ps2 ps2;
        asn1SccOBSW_DP_SingleData_heater1 heater1;
        asn1SccOBSW_DP_SingleData_heater2 heater2;
        asn1SccOBSW_DP_SingleData_anemometer anemometer;
    } u; 
} asn1SccOBSW_DP_SingleData;

flag asn1SccOBSW_DP_SingleData_gps_Equal(const asn1SccOBSW_DP_SingleData_gps* pVal1, const asn1SccOBSW_DP_SingleData_gps* pVal2);

flag asn1SccOBSW_DP_SingleData_imu_Equal(const asn1SccOBSW_DP_SingleData_imu* pVal1, const asn1SccOBSW_DP_SingleData_imu* pVal2);

flag asn1SccOBSW_DP_SingleData_tc74s_Equal(const asn1SccOBSW_DP_SingleData_tc74s* pVal1, const asn1SccOBSW_DP_SingleData_tc74s* pVal2);

flag asn1SccOBSW_DP_SingleData_pt1000s_Equal(const asn1SccOBSW_DP_SingleData_pt1000s* pVal1, const asn1SccOBSW_DP_SingleData_pt1000s* pVal2);

flag asn1SccOBSW_DP_SingleData_ps1_Equal(const asn1SccOBSW_DP_SingleData_ps1* pVal1, const asn1SccOBSW_DP_SingleData_ps1* pVal2);

flag asn1SccOBSW_DP_SingleData_ps2_Equal(const asn1SccOBSW_DP_SingleData_ps2* pVal1, const asn1SccOBSW_DP_SingleData_ps2* pVal2);

flag asn1SccOBSW_DP_SingleData_heater1_Equal(const asn1SccOBSW_DP_SingleData_heater1* pVal1, const asn1SccOBSW_DP_SingleData_heater1* pVal2);

flag asn1SccOBSW_DP_SingleData_heater2_Equal(const asn1SccOBSW_DP_SingleData_heater2* pVal1, const asn1SccOBSW_DP_SingleData_heater2* pVal2);

flag asn1SccOBSW_DP_SingleData_anemometer_Equal(const asn1SccOBSW_DP_SingleData_anemometer* pVal1, const asn1SccOBSW_DP_SingleData_anemometer* pVal2);

flag asn1SccOBSW_DP_SingleData_Equal(const asn1SccOBSW_DP_SingleData* pVal1, const asn1SccOBSW_DP_SingleData* pVal2);

void asn1SccOBSW_DP_SingleData_gps_Initialize(asn1SccOBSW_DP_SingleData_gps* pVal);
void asn1SccOBSW_DP_SingleData_imu_Initialize(asn1SccOBSW_DP_SingleData_imu* pVal);
void asn1SccOBSW_DP_SingleData_tc74s_Initialize(asn1SccOBSW_DP_SingleData_tc74s* pVal);
void asn1SccOBSW_DP_SingleData_pt1000s_Initialize(asn1SccOBSW_DP_SingleData_pt1000s* pVal);
void asn1SccOBSW_DP_SingleData_ps1_Initialize(asn1SccOBSW_DP_SingleData_ps1* pVal);
void asn1SccOBSW_DP_SingleData_ps2_Initialize(asn1SccOBSW_DP_SingleData_ps2* pVal);
void asn1SccOBSW_DP_SingleData_heater1_Initialize(asn1SccOBSW_DP_SingleData_heater1* pVal);
void asn1SccOBSW_DP_SingleData_heater2_Initialize(asn1SccOBSW_DP_SingleData_heater2* pVal);
void asn1SccOBSW_DP_SingleData_anemometer_Initialize(asn1SccOBSW_DP_SingleData_anemometer* pVal);
void asn1SccOBSW_DP_SingleData_Initialize(asn1SccOBSW_DP_SingleData* pVal);

#define ERR_OBSW_DP_SINGLEDATA		5643  /**/
#define ERR_OBSW_DP_SINGLEDATA_GPS		4075  /**/
#define ERR_OBSW_DP_SINGLEDATA_GPS_DATA_2		4040  /**/
#define ERR_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4054  /**/
#define ERR_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4068  /**/
#define ERR_OBSW_DP_SINGLEDATA_IMU		4544  /**/
#define ERR_OBSW_DP_SINGLEDATA_IMU_DATA_2		4509  /**/
#define ERR_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4523  /**/
#define ERR_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4537  /**/
#define ERR_OBSW_DP_SINGLEDATA_TC74S		4628  /**/
#define ERR_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4593  /**/
#define ERR_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4607  /**/
#define ERR_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4621  /**/
#define ERR_OBSW_DP_SINGLEDATA_PT1000S		4775  /**/
#define ERR_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4740  /**/
#define ERR_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4754  /**/
#define ERR_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4768  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS1		5104  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS1_DATA_2		5069  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5083  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5097  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS2		5433  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS2_DATA_2		5398  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5412  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5426  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER1		5510  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5475  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5489  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5503  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER2		5587  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5552  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5566  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5580  /**/
#define ERR_OBSW_DP_SINGLEDATA_ANEMOMETER		5636  /**/
#define ERR_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5601  /**/
#define ERR_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5615  /**/
#define ERR_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5629  /**/
flag asn1SccOBSW_DP_SingleData_IsConstraintValid(const asn1SccOBSW_DP_SingleData* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA		5644  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_GPS		4076  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_GPS_DATA_2		4041  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4055  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4069  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_IMU		4545  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_IMU_DATA_2		4510  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4524  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4538  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_TC74S		4629  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4594  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4608  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4622  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PT1000S		4776  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4741  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4755  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4769  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS1		5105  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS1_DATA_2		5070  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5084  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5098  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS2		5434  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS2_DATA_2		5399  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5413  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5427  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER1		5511  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5476  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5490  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5504  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER2		5588  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5553  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5567  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5581  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER		5637  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5602  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5616  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5630  /**/
#define asn1SccOBSW_DP_SingleData_REQUIRED_BYTES_FOR_ENCODING       301 
#define asn1SccOBSW_DP_SingleData_REQUIRED_BITS_FOR_ENCODING        2403

flag asn1SccOBSW_DP_SingleData_Encode(const asn1SccOBSW_DP_SingleData* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA		5645  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_GPS		4077  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_GPS_DATA_2		4042  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4056  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4070  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_IMU		4546  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_IMU_DATA_2		4511  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4525  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4539  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_TC74S		4630  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4595  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4609  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4623  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PT1000S		4777  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4742  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4756  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4770  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS1		5106  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS1_DATA_2		5071  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5085  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5099  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS2		5435  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS2_DATA_2		5400  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5414  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5428  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER1		5512  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5477  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5491  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5505  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER2		5589  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5554  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5568  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5582  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER		5638  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5603  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5617  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5631  /**/
flag asn1SccOBSW_DP_SingleData_Decode(asn1SccOBSW_DP_SingleData* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA		5646  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_GPS		4078  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_GPS_DATA_2		4043  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4057  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4071  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_IMU		4547  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_IMU_DATA_2		4512  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4526  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4540  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_TC74S		4631  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4596  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4610  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4624  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PT1000S		4778  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4743  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4757  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4771  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS1		5107  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS1_DATA_2		5072  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5086  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5100  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS2		5436  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS2_DATA_2		5401  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5415  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5429  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER1		5513  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5478  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5492  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5506  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER2		5590  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5555  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5569  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5583  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER		5639  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5604  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5618  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5632  /**/
#define asn1SccOBSW_DP_SingleData_REQUIRED_BYTES_FOR_ACN_ENCODING       301 
#define asn1SccOBSW_DP_SingleData_REQUIRED_BITS_FOR_ACN_ENCODING        2403

flag asn1SccOBSW_DP_SingleData_ACN_Encode(const asn1SccOBSW_DP_SingleData* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA		5647  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_GPS		4079  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_GPS_DATA_2		4044  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4058  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4072  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_IMU		4548  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_IMU_DATA_2		4513  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4527  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4541  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_TC74S		4632  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4597  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4611  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4625  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PT1000S		4779  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4744  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4758  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4772  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS1		5108  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS1_DATA_2		5073  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5087  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5101  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS2		5437  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS2_DATA_2		5402  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5416  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5430  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER1		5514  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5479  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5493  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5507  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER2		5591  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5556  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5570  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5584  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER		5640  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5605  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5619  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5633  /**/
flag asn1SccOBSW_DP_SingleData_ACN_Decode(asn1SccOBSW_DP_SingleData* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccHTL_Config --------------------------------------------*/
typedef struct {
    asn1SccT_Float press_5km;
    asn1SccT_Float press_10km;
    asn1SccT_Float press_18km;
    asn1SccT_Double a1_duration_emergency_secs;
    asn1SccT_Double a1_duration_max_secs;
    asn1SccT_Double a2_duration_max_secs;
    asn1SccT_UInt32 f1_duration_secs;
    asn1SccT_UInt32 f2_duration_secs;

    struct {
        unsigned int press_5km:1;
        unsigned int press_10km:1;
        unsigned int press_18km:1;
        unsigned int a1_duration_emergency_secs:1;
        unsigned int a1_duration_max_secs:1;
        unsigned int a2_duration_max_secs:1;
        unsigned int f1_duration_secs:1;
        unsigned int f2_duration_secs:1;
    } exist;

} asn1SccHTL_Config;

flag asn1SccHTL_Config_Equal(const asn1SccHTL_Config* pVal1, const asn1SccHTL_Config* pVal2);

void asn1SccHTL_Config_Initialize(asn1SccHTL_Config* pVal);

#define ERR_HTL_CONFIG		1996  /**/
#define ERR_HTL_CONFIG_PRESS_5KM_2		1891  /**/
#define ERR_HTL_CONFIG_PRESS_10KM_2		1905  /**/
#define ERR_HTL_CONFIG_PRESS_18KM_2		1919  /**/
#define ERR_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1933  /**/
#define ERR_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1947  /**/
#define ERR_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1961  /**/
#define ERR_HTL_CONFIG_F1_DURATION_SECS_2		1975  /**/
#define ERR_HTL_CONFIG_F2_DURATION_SECS_2		1989  /**/
flag asn1SccHTL_Config_IsConstraintValid(const asn1SccHTL_Config* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HTL_CONFIG		1997  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_PRESS_5KM_2		1892  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_PRESS_10KM_2		1906  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_PRESS_18KM_2		1920  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1934  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1948  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1962  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_F1_DURATION_SECS_2		1976  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_F2_DURATION_SECS_2		1990  /**/
#define asn1SccHTL_Config_REQUIRED_BYTES_FOR_ENCODING       87 
#define asn1SccHTL_Config_REQUIRED_BITS_FOR_ENCODING        696

flag asn1SccHTL_Config_Encode(const asn1SccHTL_Config* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HTL_CONFIG		1998  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_PRESS_5KM_2		1893  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_PRESS_10KM_2		1907  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_PRESS_18KM_2		1921  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1935  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1949  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1963  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_F1_DURATION_SECS_2		1977  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_F2_DURATION_SECS_2		1991  /**/
flag asn1SccHTL_Config_Decode(asn1SccHTL_Config* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HTL_CONFIG		1999  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_PRESS_5KM_2		1894  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_PRESS_10KM_2		1908  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_PRESS_18KM_2		1922  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1936  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1950  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1964  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_F1_DURATION_SECS_2		1978  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_F2_DURATION_SECS_2		1992  /**/
#define asn1SccHTL_Config_REQUIRED_BYTES_FOR_ACN_ENCODING       87 
#define asn1SccHTL_Config_REQUIRED_BITS_FOR_ACN_ENCODING        696

flag asn1SccHTL_Config_ACN_Encode(const asn1SccHTL_Config* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HTL_CONFIG		2000  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_PRESS_5KM_2		1895  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_PRESS_10KM_2		1909  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_PRESS_18KM_2		1923  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1937  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1951  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1965  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_F1_DURATION_SECS_2		1979  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_F2_DURATION_SECS_2		1993  /**/
flag asn1SccHTL_Config_ACN_Decode(asn1SccHTL_Config* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccTC --------------------------------------------*/
/*-- asn1SccTC_heater_commands --------------------------------------------*/
typedef struct {
    asn1SccTC_Heater heater_of_HTL;
    asn1SccHTL_Config config_of_HTL;

} asn1SccTC_heater_commands;
typedef enum {
    asn1Sccstop = 0
} asn1SccTC_system_commands;

// please use the following macros to avoid breaking code.
#define asn1SccTC_system_commands_stop asn1Sccstop

typedef enum {
    TC_NONE,
    heater_commands_PRESENT,
    system_commands_PRESENT 
} asn1SccTC_selection;


typedef struct {
    asn1SccTC_selection kind;
    
    union {
        asn1SccTC_heater_commands heater_commands;
        asn1SccTC_system_commands system_commands;
    } u; 
} asn1SccTC;

flag asn1SccTC_heater_commands_Equal(const asn1SccTC_heater_commands* pVal1, const asn1SccTC_heater_commands* pVal2);

flag asn1SccTC_system_commands_Equal(const asn1SccTC_system_commands* pVal1, const asn1SccTC_system_commands* pVal2);

flag asn1SccTC_Equal(const asn1SccTC* pVal1, const asn1SccTC* pVal2);

void asn1SccTC_heater_commands_Initialize(asn1SccTC_heater_commands* pVal);
void asn1SccTC_system_commands_Initialize(asn1SccTC_system_commands* pVal);
void asn1SccTC_Initialize(asn1SccTC* pVal);

#define ERR_TC		7211  /**/
#define ERR_TC_HEATER_COMMANDS		7197  /**/
#define ERR_TC_HEATER_COMMANDS_HEATER_OF_HTL_2		7064  /**/
#define ERR_TC_HEATER_COMMANDS_CONFIG_OF_HTL_2		7190  /**/
#define ERR_TC_SYSTEM_COMMANDS		7204  /**/
flag asn1SccTC_IsConstraintValid(const asn1SccTC* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC		7212  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMANDS		7198  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMANDS_HEATER_OF_HTL_2		7065  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMANDS_CONFIG_OF_HTL_2		7191  /**/
#define ERR_UPER_ENCODE_TC_SYSTEM_COMMANDS		7205  /**/
#define asn1SccTC_REQUIRED_BYTES_FOR_ENCODING       101 
#define asn1SccTC_REQUIRED_BITS_FOR_ENCODING        803

flag asn1SccTC_Encode(const asn1SccTC* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC		7213  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMANDS		7199  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMANDS_HEATER_OF_HTL_2		7066  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMANDS_CONFIG_OF_HTL_2		7192  /**/
#define ERR_UPER_DECODE_TC_SYSTEM_COMMANDS		7206  /**/
flag asn1SccTC_Decode(asn1SccTC* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TC		7214  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMANDS		7200  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMANDS_HEATER_OF_HTL_2		7067  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMANDS_CONFIG_OF_HTL_2		7193  /**/
#define ERR_ACN_ENCODE_TC_SYSTEM_COMMANDS		7207  /**/
#define asn1SccTC_REQUIRED_BYTES_FOR_ACN_ENCODING       101 
#define asn1SccTC_REQUIRED_BITS_FOR_ACN_ENCODING        803

flag asn1SccTC_ACN_Encode(const asn1SccTC* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TC		7215  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMANDS		7201  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMANDS_HEATER_OF_HTL_2		7068  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMANDS_CONFIG_OF_HTL_2		7194  /**/
#define ERR_ACN_DECODE_TC_SYSTEM_COMMANDS		7208  /**/
flag asn1SccTC_ACN_Decode(asn1SccTC* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


flag asn1SccT_Int8_Equal(const asn1SccT_Int8* pVal1, const asn1SccT_Int8* pVal2);

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_T_INT8		8436  /**/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT8		8437  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		8438  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		8439  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_Int8_ACN_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		8440  /**/
flag asn1SccT_Int8_ACN_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


flag asn1SccT_UInt8_Equal(const asn1SccT_UInt8* pVal1, const asn1SccT_UInt8* pVal2);

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_T_UINT8		8443  /**/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT8		8444  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		8445  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		8446  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_UInt8_ACN_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		8447  /**/
flag asn1SccT_UInt8_ACN_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccSPI_ID --------------------------------------------*/
typedef struct {
    asn1SccT_UInt8 bus;
    asn1SccT_UInt8 cs;

} asn1SccSPI_ID;

flag asn1SccSPI_ID_Equal(const asn1SccSPI_ID* pVal1, const asn1SccSPI_ID* pVal2);

void asn1SccSPI_ID_Initialize(asn1SccSPI_ID* pVal);

#define ERR_SPI_ID		78  /**/
#define ERR_SPI_ID_BUS_2		57  /**/
#define ERR_SPI_ID_CS_2		71  /**/
flag asn1SccSPI_ID_IsConstraintValid(const asn1SccSPI_ID* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SPI_ID		79  /**/
#define ERR_UPER_ENCODE_SPI_ID_BUS_2		58  /**/
#define ERR_UPER_ENCODE_SPI_ID_CS_2		72  /**/
#define asn1SccSPI_ID_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccSPI_ID_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccSPI_ID_Encode(const asn1SccSPI_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SPI_ID		80  /**/
#define ERR_UPER_DECODE_SPI_ID_BUS_2		59  /**/
#define ERR_UPER_DECODE_SPI_ID_CS_2		73  /**/
flag asn1SccSPI_ID_Decode(asn1SccSPI_ID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SPI_ID		81  /**/
#define ERR_ACN_ENCODE_SPI_ID_BUS_2		60  /**/
#define ERR_ACN_ENCODE_SPI_ID_CS_2		74  /**/
#define asn1SccSPI_ID_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define asn1SccSPI_ID_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag asn1SccSPI_ID_ACN_Encode(const asn1SccSPI_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SPI_ID		82  /**/
#define ERR_ACN_DECODE_SPI_ID_BUS_2		61  /**/
#define ERR_ACN_DECODE_SPI_ID_CS_2		75  /**/
flag asn1SccSPI_ID_ACN_Decode(asn1SccSPI_ID* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccI2C_ID --------------------------------------------*/
typedef struct {
    asn1SccT_UInt8 bus;
    asn1SccT_UInt8 address;

} asn1SccI2C_ID;

flag asn1SccI2C_ID_Equal(const asn1SccI2C_ID* pVal1, const asn1SccI2C_ID* pVal2);

void asn1SccI2C_ID_Initialize(asn1SccI2C_ID* pVal);

#define ERR_I2C_ID		113  /**/
#define ERR_I2C_ID_BUS_2		92  /**/
#define ERR_I2C_ID_ADDRESS_2		106  /**/
flag asn1SccI2C_ID_IsConstraintValid(const asn1SccI2C_ID* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_I2C_ID		114  /**/
#define ERR_UPER_ENCODE_I2C_ID_BUS_2		93  /**/
#define ERR_UPER_ENCODE_I2C_ID_ADDRESS_2		107  /**/
#define asn1SccI2C_ID_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccI2C_ID_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccI2C_ID_Encode(const asn1SccI2C_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_I2C_ID		115  /**/
#define ERR_UPER_DECODE_I2C_ID_BUS_2		94  /**/
#define ERR_UPER_DECODE_I2C_ID_ADDRESS_2		108  /**/
flag asn1SccI2C_ID_Decode(asn1SccI2C_ID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_I2C_ID		116  /**/
#define ERR_ACN_ENCODE_I2C_ID_BUS_2		95  /**/
#define ERR_ACN_ENCODE_I2C_ID_ADDRESS_2		109  /**/
#define asn1SccI2C_ID_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define asn1SccI2C_ID_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag asn1SccI2C_ID_ACN_Encode(const asn1SccI2C_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_I2C_ID		117  /**/
#define ERR_ACN_DECODE_I2C_ID_BUS_2		96  /**/
#define ERR_ACN_DECODE_I2C_ID_ADDRESS_2		110  /**/
flag asn1SccI2C_ID_ACN_Decode(asn1SccI2C_ID* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


flag asn1SccT_Boolean_Equal(const asn1SccT_Boolean* pVal1, const asn1SccT_Boolean* pVal2);

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_T_BOOLEAN		8450  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_BOOLEAN		8451  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		8452  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		8453  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag asn1SccT_Boolean_ACN_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		8454  /**/
flag asn1SccT_Boolean_ACN_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Null_Record --------------------------------------------*/
typedef struct {

} asn1SccT_Null_Record;

flag asn1SccT_Null_Record_Equal(const asn1SccT_Null_Record* pVal1, const asn1SccT_Null_Record* pVal2);

void asn1SccT_Null_Record_Initialize(asn1SccT_Null_Record* pVal);

#define ERR_T_NULL_RECORD		8457  /**/
flag asn1SccT_Null_Record_IsConstraintValid(const asn1SccT_Null_Record* pVal, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccT_Null_Record_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag asn1SccT_Null_Record_ACN_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_ACN_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

extern const asn1SccSint n_of_TC74s;
extern const asn1SccSint n_of_pt1000;
extern const asn1SccSint imu_queue_size; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
