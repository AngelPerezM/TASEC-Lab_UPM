#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccSint T_Int16;


flag T_Int16_Equal(const T_Int16* pVal1, const T_Int16* pVal2);

void T_Int16_Initialize(T_Int16* pVal);

#define ERR_T_INT16		1  /**/
flag T_Int16_IsConstraintValid(const T_Int16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT16		2  /**/
#define T_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define T_Int16_REQUIRED_BITS_FOR_ENCODING        16

flag T_Int16_Encode(const T_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT16		3  /**/
flag T_Int16_Decode(T_Int16* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT16		4  /**/
#define T_Int16_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define T_Int16_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag T_Int16_ACN_Encode(const T_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT16		5  /**/
flag T_Int16_ACN_Decode(T_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- MGT_Raw_Data --------------------------------------------*/
typedef struct {
    T_Int16 x_axis;
    T_Int16 y_axis;
    T_Int16 z_axis;

} MGT_Raw_Data;

flag MGT_Raw_Data_Equal(const MGT_Raw_Data* pVal1, const MGT_Raw_Data* pVal2);

void MGT_Raw_Data_Initialize(MGT_Raw_Data* pVal);

#define ERR_MGT_RAW_DATA		372  /**/
#define ERR_MGT_RAW_DATA_X_AXIS_2		337  /**/
#define ERR_MGT_RAW_DATA_Y_AXIS_2		351  /**/
#define ERR_MGT_RAW_DATA_Z_AXIS_2		365  /**/
flag MGT_Raw_Data_IsConstraintValid(const MGT_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_MGT_RAW_DATA		373  /**/
#define ERR_UPER_ENCODE_MGT_RAW_DATA_X_AXIS_2		338  /**/
#define ERR_UPER_ENCODE_MGT_RAW_DATA_Y_AXIS_2		352  /**/
#define ERR_UPER_ENCODE_MGT_RAW_DATA_Z_AXIS_2		366  /**/
#define MGT_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       6 
#define MGT_Raw_Data_REQUIRED_BITS_FOR_ENCODING        48

flag MGT_Raw_Data_Encode(const MGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MGT_RAW_DATA		374  /**/
#define ERR_UPER_DECODE_MGT_RAW_DATA_X_AXIS_2		339  /**/
#define ERR_UPER_DECODE_MGT_RAW_DATA_Y_AXIS_2		353  /**/
#define ERR_UPER_DECODE_MGT_RAW_DATA_Z_AXIS_2		367  /**/
flag MGT_Raw_Data_Decode(MGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MGT_RAW_DATA		375  /**/
#define ERR_ACN_ENCODE_MGT_RAW_DATA_X_AXIS_2		340  /**/
#define ERR_ACN_ENCODE_MGT_RAW_DATA_Y_AXIS_2		354  /**/
#define ERR_ACN_ENCODE_MGT_RAW_DATA_Z_AXIS_2		368  /**/
#define MGT_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       6 
#define MGT_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        48

flag MGT_Raw_Data_ACN_Encode(const MGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MGT_RAW_DATA		376  /**/
#define ERR_ACN_DECODE_MGT_RAW_DATA_X_AXIS_2		341  /**/
#define ERR_ACN_DECODE_MGT_RAW_DATA_Y_AXIS_2		355  /**/
#define ERR_ACN_DECODE_MGT_RAW_DATA_Z_AXIS_2		369  /**/
flag MGT_Raw_Data_ACN_Decode(MGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- ACC_Raw_Data --------------------------------------------*/
typedef struct {
    T_Int16 x_axis;
    T_Int16 y_axis;
    T_Int16 z_axis;

} ACC_Raw_Data;

flag ACC_Raw_Data_Equal(const ACC_Raw_Data* pVal1, const ACC_Raw_Data* pVal2);

void ACC_Raw_Data_Initialize(ACC_Raw_Data* pVal);

#define ERR_ACC_RAW_DATA		470  /**/
#define ERR_ACC_RAW_DATA_X_AXIS_2		435  /**/
#define ERR_ACC_RAW_DATA_Y_AXIS_2		449  /**/
#define ERR_ACC_RAW_DATA_Z_AXIS_2		463  /**/
flag ACC_Raw_Data_IsConstraintValid(const ACC_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ACC_RAW_DATA		471  /**/
#define ERR_UPER_ENCODE_ACC_RAW_DATA_X_AXIS_2		436  /**/
#define ERR_UPER_ENCODE_ACC_RAW_DATA_Y_AXIS_2		450  /**/
#define ERR_UPER_ENCODE_ACC_RAW_DATA_Z_AXIS_2		464  /**/
#define ACC_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       6 
#define ACC_Raw_Data_REQUIRED_BITS_FOR_ENCODING        48

flag ACC_Raw_Data_Encode(const ACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACC_RAW_DATA		472  /**/
#define ERR_UPER_DECODE_ACC_RAW_DATA_X_AXIS_2		437  /**/
#define ERR_UPER_DECODE_ACC_RAW_DATA_Y_AXIS_2		451  /**/
#define ERR_UPER_DECODE_ACC_RAW_DATA_Z_AXIS_2		465  /**/
flag ACC_Raw_Data_Decode(ACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACC_RAW_DATA		473  /**/
#define ERR_ACN_ENCODE_ACC_RAW_DATA_X_AXIS_2		438  /**/
#define ERR_ACN_ENCODE_ACC_RAW_DATA_Y_AXIS_2		452  /**/
#define ERR_ACN_ENCODE_ACC_RAW_DATA_Z_AXIS_2		466  /**/
#define ACC_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       6 
#define ACC_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        48

flag ACC_Raw_Data_ACN_Encode(const ACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACC_RAW_DATA		474  /**/
#define ERR_ACN_DECODE_ACC_RAW_DATA_X_AXIS_2		439  /**/
#define ERR_ACN_DECODE_ACC_RAW_DATA_Y_AXIS_2		453  /**/
#define ERR_ACN_DECODE_ACC_RAW_DATA_Z_AXIS_2		467  /**/
flag ACC_Raw_Data_ACN_Decode(ACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- GYRO_Raw_Data --------------------------------------------*/
typedef struct {
    T_Int16 x_axis;
    T_Int16 y_axis;
    T_Int16 z_axis;

} GYRO_Raw_Data;

flag GYRO_Raw_Data_Equal(const GYRO_Raw_Data* pVal1, const GYRO_Raw_Data* pVal2);

void GYRO_Raw_Data_Initialize(GYRO_Raw_Data* pVal);

#define ERR_GYRO_RAW_DATA		568  /**/
#define ERR_GYRO_RAW_DATA_X_AXIS_2		533  /**/
#define ERR_GYRO_RAW_DATA_Y_AXIS_2		547  /**/
#define ERR_GYRO_RAW_DATA_Z_AXIS_2		561  /**/
flag GYRO_Raw_Data_IsConstraintValid(const GYRO_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GYRO_RAW_DATA		569  /**/
#define ERR_UPER_ENCODE_GYRO_RAW_DATA_X_AXIS_2		534  /**/
#define ERR_UPER_ENCODE_GYRO_RAW_DATA_Y_AXIS_2		548  /**/
#define ERR_UPER_ENCODE_GYRO_RAW_DATA_Z_AXIS_2		562  /**/
#define GYRO_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       6 
#define GYRO_Raw_Data_REQUIRED_BITS_FOR_ENCODING        48

flag GYRO_Raw_Data_Encode(const GYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GYRO_RAW_DATA		570  /**/
#define ERR_UPER_DECODE_GYRO_RAW_DATA_X_AXIS_2		535  /**/
#define ERR_UPER_DECODE_GYRO_RAW_DATA_Y_AXIS_2		549  /**/
#define ERR_UPER_DECODE_GYRO_RAW_DATA_Z_AXIS_2		563  /**/
flag GYRO_Raw_Data_Decode(GYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_GYRO_RAW_DATA		571  /**/
#define ERR_ACN_ENCODE_GYRO_RAW_DATA_X_AXIS_2		536  /**/
#define ERR_ACN_ENCODE_GYRO_RAW_DATA_Y_AXIS_2		550  /**/
#define ERR_ACN_ENCODE_GYRO_RAW_DATA_Z_AXIS_2		564  /**/
#define GYRO_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       6 
#define GYRO_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        48

flag GYRO_Raw_Data_ACN_Encode(const GYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_GYRO_RAW_DATA		572  /**/
#define ERR_ACN_DECODE_GYRO_RAW_DATA_X_AXIS_2		537  /**/
#define ERR_ACN_DECODE_GYRO_RAW_DATA_Y_AXIS_2		551  /**/
#define ERR_ACN_DECODE_GYRO_RAW_DATA_Z_AXIS_2		565  /**/
flag GYRO_Raw_Data_ACN_Decode(GYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt16;


flag T_UInt16_Equal(const T_UInt16* pVal1, const T_UInt16* pVal2);

void T_UInt16_Initialize(T_UInt16* pVal);

#define ERR_T_UINT16		8  /**/
flag T_UInt16_IsConstraintValid(const T_UInt16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT16		9  /**/
#define T_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define T_UInt16_REQUIRED_BITS_FOR_ENCODING        16

flag T_UInt16_Encode(const T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT16		10  /**/
flag T_UInt16_Decode(T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT16		11  /**/
#define T_UInt16_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define T_UInt16_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag T_UInt16_ACN_Encode(const T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT16		12  /**/
flag T_UInt16_ACN_Decode(T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt64;


flag T_UInt64_Equal(const T_UInt64* pVal1, const T_UInt64* pVal2);

void T_UInt64_Initialize(T_UInt64* pVal);

#define ERR_T_UINT64		15  /**/
flag T_UInt64_IsConstraintValid(const T_UInt64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT64		16  /**/
#define T_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define T_UInt64_REQUIRED_BITS_FOR_ENCODING        64

flag T_UInt64_Encode(const T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT64		17  /**/
flag T_UInt64_Decode(T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT64		18  /**/
#define T_UInt64_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define T_UInt64_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag T_UInt64_ACN_Encode(const T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT64		19  /**/
flag T_UInt64_ACN_Decode(T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real T_Float;


flag T_Float_Equal(const T_Float* pVal1, const T_Float* pVal2);

void T_Float_Initialize(T_Float* pVal);

#define ERR_T_FLOAT		22  /**/
flag T_Float_IsConstraintValid(const T_Float* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_FLOAT		23  /**/
#define T_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define T_Float_REQUIRED_BITS_FOR_ENCODING        104

flag T_Float_Encode(const T_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FLOAT		24  /**/
flag T_Float_Decode(T_Float* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_FLOAT		25  /**/
#define T_Float_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define T_Float_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag T_Float_ACN_Encode(const T_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_FLOAT		26  /**/
flag T_Float_ACN_Decode(T_Float* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- MGT_MilliGauss_Data --------------------------------------------*/
typedef struct {
    T_Float x_axis;
    T_Float y_axis;
    T_Float z_axis;

} MGT_MilliGauss_Data;

flag MGT_MilliGauss_Data_Equal(const MGT_MilliGauss_Data* pVal1, const MGT_MilliGauss_Data* pVal2);

void MGT_MilliGauss_Data_Initialize(MGT_MilliGauss_Data* pVal);

#define ERR_MGT_MILLIGAUSS_DATA		421  /**/
#define ERR_MGT_MILLIGAUSS_DATA_X_AXIS_2		386  /**/
#define ERR_MGT_MILLIGAUSS_DATA_Y_AXIS_2		400  /**/
#define ERR_MGT_MILLIGAUSS_DATA_Z_AXIS_2		414  /**/
flag MGT_MilliGauss_Data_IsConstraintValid(const MGT_MilliGauss_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA		422  /**/
#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		387  /**/
#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		401  /**/
#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		415  /**/
#define MGT_MilliGauss_Data_REQUIRED_BYTES_FOR_ENCODING       39 
#define MGT_MilliGauss_Data_REQUIRED_BITS_FOR_ENCODING        312

flag MGT_MilliGauss_Data_Encode(const MGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA		423  /**/
#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		388  /**/
#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		402  /**/
#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		416  /**/
flag MGT_MilliGauss_Data_Decode(MGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA		424  /**/
#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		389  /**/
#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		403  /**/
#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		417  /**/
#define MGT_MilliGauss_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define MGT_MilliGauss_Data_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag MGT_MilliGauss_Data_ACN_Encode(const MGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA		425  /**/
#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		390  /**/
#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		404  /**/
#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		418  /**/
flag MGT_MilliGauss_Data_ACN_Decode(MGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- ACC_MilliG_Data --------------------------------------------*/
typedef struct {
    T_Float x_axis;
    T_Float y_axis;
    T_Float z_axis;

} ACC_MilliG_Data;

flag ACC_MilliG_Data_Equal(const ACC_MilliG_Data* pVal1, const ACC_MilliG_Data* pVal2);

void ACC_MilliG_Data_Initialize(ACC_MilliG_Data* pVal);

#define ERR_ACC_MILLIG_DATA		519  /**/
#define ERR_ACC_MILLIG_DATA_X_AXIS_2		484  /**/
#define ERR_ACC_MILLIG_DATA_Y_AXIS_2		498  /**/
#define ERR_ACC_MILLIG_DATA_Z_AXIS_2		512  /**/
flag ACC_MilliG_Data_IsConstraintValid(const ACC_MilliG_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ACC_MILLIG_DATA		520  /**/
#define ERR_UPER_ENCODE_ACC_MILLIG_DATA_X_AXIS_2		485  /**/
#define ERR_UPER_ENCODE_ACC_MILLIG_DATA_Y_AXIS_2		499  /**/
#define ERR_UPER_ENCODE_ACC_MILLIG_DATA_Z_AXIS_2		513  /**/
#define ACC_MilliG_Data_REQUIRED_BYTES_FOR_ENCODING       39 
#define ACC_MilliG_Data_REQUIRED_BITS_FOR_ENCODING        312

flag ACC_MilliG_Data_Encode(const ACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACC_MILLIG_DATA		521  /**/
#define ERR_UPER_DECODE_ACC_MILLIG_DATA_X_AXIS_2		486  /**/
#define ERR_UPER_DECODE_ACC_MILLIG_DATA_Y_AXIS_2		500  /**/
#define ERR_UPER_DECODE_ACC_MILLIG_DATA_Z_AXIS_2		514  /**/
flag ACC_MilliG_Data_Decode(ACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACC_MILLIG_DATA		522  /**/
#define ERR_ACN_ENCODE_ACC_MILLIG_DATA_X_AXIS_2		487  /**/
#define ERR_ACN_ENCODE_ACC_MILLIG_DATA_Y_AXIS_2		501  /**/
#define ERR_ACN_ENCODE_ACC_MILLIG_DATA_Z_AXIS_2		515  /**/
#define ACC_MilliG_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define ACC_MilliG_Data_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag ACC_MilliG_Data_ACN_Encode(const ACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACC_MILLIG_DATA		523  /**/
#define ERR_ACN_DECODE_ACC_MILLIG_DATA_X_AXIS_2		488  /**/
#define ERR_ACN_DECODE_ACC_MILLIG_DATA_Y_AXIS_2		502  /**/
#define ERR_ACN_DECODE_ACC_MILLIG_DATA_Z_AXIS_2		516  /**/
flag ACC_MilliG_Data_ACN_Decode(ACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- GYRO_MilliDPS_Data --------------------------------------------*/
typedef struct {
    T_Float x_axis;
    T_Float y_axis;
    T_Float z_axis;

} GYRO_MilliDPS_Data;

flag GYRO_MilliDPS_Data_Equal(const GYRO_MilliDPS_Data* pVal1, const GYRO_MilliDPS_Data* pVal2);

void GYRO_MilliDPS_Data_Initialize(GYRO_MilliDPS_Data* pVal);

#define ERR_GYRO_MILLIDPS_DATA		617  /**/
#define ERR_GYRO_MILLIDPS_DATA_X_AXIS_2		582  /**/
#define ERR_GYRO_MILLIDPS_DATA_Y_AXIS_2		596  /**/
#define ERR_GYRO_MILLIDPS_DATA_Z_AXIS_2		610  /**/
flag GYRO_MilliDPS_Data_IsConstraintValid(const GYRO_MilliDPS_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA		618  /**/
#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA_X_AXIS_2		583  /**/
#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		597  /**/
#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		611  /**/
#define GYRO_MilliDPS_Data_REQUIRED_BYTES_FOR_ENCODING       39 
#define GYRO_MilliDPS_Data_REQUIRED_BITS_FOR_ENCODING        312

flag GYRO_MilliDPS_Data_Encode(const GYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA		619  /**/
#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA_X_AXIS_2		584  /**/
#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		598  /**/
#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		612  /**/
flag GYRO_MilliDPS_Data_Decode(GYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA		620  /**/
#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA_X_AXIS_2		585  /**/
#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		599  /**/
#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		613  /**/
#define GYRO_MilliDPS_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define GYRO_MilliDPS_Data_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag GYRO_MilliDPS_Data_ACN_Encode(const GYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA		621  /**/
#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA_X_AXIS_2		586  /**/
#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		600  /**/
#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		614  /**/
flag GYRO_MilliDPS_Data_ACN_Decode(GYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode);

/*-- PT1000s_Raw_Data_elem --------------------------------------------*/
typedef struct {
    T_Float vcc_volts;
    T_Float pt1000;

} PT1000s_Raw_Data_elem;

typedef struct {
    
    PT1000s_Raw_Data_elem arr[7];
} PT1000s_Raw_Data;

flag PT1000s_Raw_Data_elem_Equal(const PT1000s_Raw_Data_elem* pVal1, const PT1000s_Raw_Data_elem* pVal2);

flag PT1000s_Raw_Data_Equal(const PT1000s_Raw_Data* pVal1, const PT1000s_Raw_Data* pVal2);

void PT1000s_Raw_Data_elem_Initialize(PT1000s_Raw_Data_elem* pVal);
void PT1000s_Raw_Data_Initialize(PT1000s_Raw_Data* pVal);

#define ERR_PT1000S_RAW_DATA		1170  /**/
#define ERR_PT1000S_RAW_DATA_ELM		1163  /**/
#define ERR_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1142  /**/
#define ERR_PT1000S_RAW_DATA_ELM_PT1000_2		1156  /**/
flag PT1000s_Raw_Data_IsConstraintValid(const PT1000s_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_RAW_DATA		1171  /**/
#define ERR_UPER_ENCODE_PT1000S_RAW_DATA_ELM		1164  /**/
#define ERR_UPER_ENCODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1143  /**/
#define ERR_UPER_ENCODE_PT1000S_RAW_DATA_ELM_PT1000_2		1157  /**/
#define PT1000s_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       182 
#define PT1000s_Raw_Data_REQUIRED_BITS_FOR_ENCODING        1456

flag PT1000s_Raw_Data_Encode(const PT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_RAW_DATA		1172  /**/
#define ERR_UPER_DECODE_PT1000S_RAW_DATA_ELM		1165  /**/
#define ERR_UPER_DECODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1144  /**/
#define ERR_UPER_DECODE_PT1000S_RAW_DATA_ELM_PT1000_2		1158  /**/
flag PT1000s_Raw_Data_Decode(PT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_RAW_DATA		1173  /**/
#define ERR_ACN_ENCODE_PT1000S_RAW_DATA_ELM		1166  /**/
#define ERR_ACN_ENCODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1145  /**/
#define ERR_ACN_ENCODE_PT1000S_RAW_DATA_ELM_PT1000_2		1159  /**/
#define PT1000s_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       182 
#define PT1000s_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        1456

flag PT1000s_Raw_Data_ACN_Encode(const PT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_RAW_DATA		1174  /**/
#define ERR_ACN_DECODE_PT1000S_RAW_DATA_ELM		1167  /**/
#define ERR_ACN_DECODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1146  /**/
#define ERR_ACN_DECODE_PT1000S_RAW_DATA_ELM_PT1000_2		1160  /**/
flag PT1000s_Raw_Data_ACN_Decode(PT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    T_Float arr[7];
} PT1000s_Celsius_Data;

flag PT1000s_Celsius_Data_Equal(const PT1000s_Celsius_Data* pVal1, const PT1000s_Celsius_Data* pVal2);

void PT1000s_Celsius_Data_Initialize(PT1000s_Celsius_Data* pVal);

#define ERR_PT1000S_CELSIUS_DATA		1191  /**/
#define ERR_PT1000S_CELSIUS_DATA_ELM_2		1184  /**/
flag PT1000s_Celsius_Data_IsConstraintValid(const PT1000s_Celsius_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_CELSIUS_DATA		1192  /**/
#define ERR_UPER_ENCODE_PT1000S_CELSIUS_DATA_ELM_2		1185  /**/
#define PT1000s_Celsius_Data_REQUIRED_BYTES_FOR_ENCODING       91 
#define PT1000s_Celsius_Data_REQUIRED_BITS_FOR_ENCODING        728

flag PT1000s_Celsius_Data_Encode(const PT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_CELSIUS_DATA		1193  /**/
#define ERR_UPER_DECODE_PT1000S_CELSIUS_DATA_ELM_2		1186  /**/
flag PT1000s_Celsius_Data_Decode(PT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_CELSIUS_DATA		1194  /**/
#define ERR_ACN_ENCODE_PT1000S_CELSIUS_DATA_ELM_2		1187  /**/
#define PT1000s_Celsius_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       91 
#define PT1000s_Celsius_Data_REQUIRED_BITS_FOR_ACN_ENCODING        728

flag PT1000s_Celsius_Data_ACN_Encode(const PT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_CELSIUS_DATA		1195  /**/
#define ERR_ACN_DECODE_PT1000S_CELSIUS_DATA_ELM_2		1188  /**/
flag PT1000s_Celsius_Data_ACN_Decode(PT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PS_Calibration_Data --------------------------------------------*/
typedef struct {
    T_UInt16 c1;
    T_UInt16 c2;
    T_UInt16 c3;
    T_UInt16 c4;
    T_UInt16 c5;
    T_UInt16 c6;
    T_Float sens_t1;
    T_Float off_t1;
    T_Float tcs;
    T_Float tco;
    T_Float tref;
    T_Float temp_sens;

} PS_Calibration_Data;

flag PS_Calibration_Data_Equal(const PS_Calibration_Data* pVal1, const PS_Calibration_Data* pVal2);

void PS_Calibration_Data_Initialize(PS_Calibration_Data* pVal);

#define ERR_PS_CALIBRATION_DATA		1471  /**/
#define ERR_PS_CALIBRATION_DATA_C1_2		1310  /**/
#define ERR_PS_CALIBRATION_DATA_C2_2		1324  /**/
#define ERR_PS_CALIBRATION_DATA_C3_2		1338  /**/
#define ERR_PS_CALIBRATION_DATA_C4_2		1352  /**/
#define ERR_PS_CALIBRATION_DATA_C5_2		1366  /**/
#define ERR_PS_CALIBRATION_DATA_C6_2		1380  /**/
#define ERR_PS_CALIBRATION_DATA_SENS_T1_2		1394  /**/
#define ERR_PS_CALIBRATION_DATA_OFF_T1_2		1408  /**/
#define ERR_PS_CALIBRATION_DATA_TCS_2		1422  /**/
#define ERR_PS_CALIBRATION_DATA_TCO_2		1436  /**/
#define ERR_PS_CALIBRATION_DATA_TREF_2		1450  /**/
#define ERR_PS_CALIBRATION_DATA_TEMP_SENS_2		1464  /**/
flag PS_Calibration_Data_IsConstraintValid(const PS_Calibration_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA		1472  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C1_2		1311  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C2_2		1325  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C3_2		1339  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C4_2		1353  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C5_2		1367  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C6_2		1381  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_SENS_T1_2		1395  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_OFF_T1_2		1409  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TCS_2		1423  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TCO_2		1437  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TREF_2		1451  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1465  /**/
#define PS_Calibration_Data_REQUIRED_BYTES_FOR_ENCODING       90 
#define PS_Calibration_Data_REQUIRED_BITS_FOR_ENCODING        720

flag PS_Calibration_Data_Encode(const PS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_CALIBRATION_DATA		1473  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C1_2		1312  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C2_2		1326  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C3_2		1340  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C4_2		1354  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C5_2		1368  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C6_2		1382  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_SENS_T1_2		1396  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_OFF_T1_2		1410  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TCS_2		1424  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TCO_2		1438  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TREF_2		1452  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1466  /**/
flag PS_Calibration_Data_Decode(PS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA		1474  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C1_2		1313  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C2_2		1327  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C3_2		1341  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C4_2		1355  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C5_2		1369  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C6_2		1383  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_SENS_T1_2		1397  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_OFF_T1_2		1411  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TCS_2		1425  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TCO_2		1439  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TREF_2		1453  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1467  /**/
#define PS_Calibration_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       90 
#define PS_Calibration_Data_REQUIRED_BITS_FOR_ACN_ENCODING        720

flag PS_Calibration_Data_ACN_Encode(const PS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_CALIBRATION_DATA		1475  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C1_2		1314  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C2_2		1328  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C3_2		1342  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C4_2		1356  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C5_2		1370  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C6_2		1384  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_SENS_T1_2		1398  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_OFF_T1_2		1412  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TCS_2		1426  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TCO_2		1440  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TREF_2		1454  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1468  /**/
flag PS_Calibration_Data_ACN_Decode(PS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- TC_Heater --------------------------------------------*/
typedef enum {
    heater_HTL = 0,
    heater_anemo = 1
} TC_Heater_heater;

// please use the following macros to avoid breaking code.
#define TC_Heater_heater_heater_HTL heater_HTL
#define TC_Heater_heater_heater_anemo heater_anemo
/*-- TC_Heater_command --------------------------------------------*/
typedef enum {
    max = 0,
    min = 1
} TC_Heater_command_max_min;

// please use the following macros to avoid breaking code.
#define TC_Heater_command_max_min_max max
#define TC_Heater_command_max_min_min min

typedef enum {
    TC_Heater_command_NONE,
    power_manual_PRESENT,
    max_min_PRESENT 
} TC_Heater_command_selection;


typedef struct {
    TC_Heater_command_selection kind;
    
    union {
        T_Float power_manual;
        TC_Heater_command_max_min max_min;
    } u; 
} TC_Heater_command;
typedef struct {
    TC_Heater_heater heater;
    TC_Heater_command command;

} TC_Heater;

flag TC_Heater_heater_Equal(const TC_Heater_heater* pVal1, const TC_Heater_heater* pVal2);

flag TC_Heater_command_max_min_Equal(const TC_Heater_command_max_min* pVal1, const TC_Heater_command_max_min* pVal2);

flag TC_Heater_command_Equal(const TC_Heater_command* pVal1, const TC_Heater_command* pVal2);

flag TC_Heater_Equal(const TC_Heater* pVal1, const TC_Heater* pVal2);

void TC_Heater_heater_Initialize(TC_Heater_heater* pVal);
void TC_Heater_command_max_min_Initialize(TC_Heater_command_max_min* pVal);
void TC_Heater_command_Initialize(TC_Heater_command* pVal);
void TC_Heater_Initialize(TC_Heater* pVal);

#define ERR_TC_HEATER		6539  /**/
#define ERR_TC_HEATER_HEATER		6504  /**/
#define ERR_TC_HEATER_COMMAND		6532  /**/
#define ERR_TC_HEATER_COMMAND_POWER_MANUAL_2		6518  /**/
#define ERR_TC_HEATER_COMMAND_MAX_MIN		6525  /**/
flag TC_Heater_IsConstraintValid(const TC_Heater* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC_HEATER		6540  /**/
#define ERR_UPER_ENCODE_TC_HEATER_HEATER		6505  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMAND		6533  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMAND_POWER_MANUAL_2		6519  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMAND_MAX_MIN		6526  /**/
#define TC_Heater_REQUIRED_BYTES_FOR_ENCODING       14 
#define TC_Heater_REQUIRED_BITS_FOR_ENCODING        106

flag TC_Heater_Encode(const TC_Heater* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC_HEATER		6541  /**/
#define ERR_UPER_DECODE_TC_HEATER_HEATER		6506  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMAND		6534  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMAND_POWER_MANUAL_2		6520  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMAND_MAX_MIN		6527  /**/
flag TC_Heater_Decode(TC_Heater* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TC_HEATER		6542  /**/
#define ERR_ACN_ENCODE_TC_HEATER_HEATER		6507  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMAND		6535  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMAND_POWER_MANUAL_2		6521  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMAND_MAX_MIN		6528  /**/
#define TC_Heater_REQUIRED_BYTES_FOR_ACN_ENCODING       14 
#define TC_Heater_REQUIRED_BITS_FOR_ACN_ENCODING        106

flag TC_Heater_ACN_Encode(const TC_Heater* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TC_HEATER		6543  /**/
#define ERR_ACN_DECODE_TC_HEATER_HEATER		6508  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMAND		6536  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMAND_POWER_MANUAL_2		6522  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMAND_MAX_MIN		6529  /**/
flag TC_Heater_ACN_Decode(TC_Heater* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- TC --------------------------------------------*/


typedef struct {
    
    T_Float arr[5];
} TC_tc74s_temp_celsius;


typedef struct {
    
    T_Float arr[7];
} TC_pt1000s_temp_celsius;
typedef struct {
    TC_Heater heater_of_HTL;
    TC_tc74s_temp_celsius tc74s_temp_celsius;
    TC_pt1000s_temp_celsius pt1000s_temp_celsius;
    T_Float pressure1_mbar;
    T_Float pressure2_mbar;

} TC;

flag TC_tc74s_temp_celsius_Equal(const TC_tc74s_temp_celsius* pVal1, const TC_tc74s_temp_celsius* pVal2);

flag TC_pt1000s_temp_celsius_Equal(const TC_pt1000s_temp_celsius* pVal1, const TC_pt1000s_temp_celsius* pVal2);

flag TC_Equal(const TC* pVal1, const TC* pVal2);

void TC_tc74s_temp_celsius_Initialize(TC_tc74s_temp_celsius* pVal);
void TC_pt1000s_temp_celsius_Initialize(TC_pt1000s_temp_celsius* pVal);
void TC_Initialize(TC* pVal);

#define ERR_TC		6665  /**/
#define ERR_TC_HEATER_OF_HTL_2		6588  /**/
#define ERR_TC_TC74S_TEMP_CELSIUS		6609  /**/
#define ERR_TC_TC74S_TEMP_CELSIUS_ELM_2		6602  /**/
#define ERR_TC_PT1000S_TEMP_CELSIUS		6630  /**/
#define ERR_TC_PT1000S_TEMP_CELSIUS_ELM_2		6623  /**/
#define ERR_TC_PRESSURE1_MBAR_2		6644  /**/
#define ERR_TC_PRESSURE2_MBAR_2		6658  /**/
flag TC_IsConstraintValid(const TC* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC		6666  /**/
#define ERR_UPER_ENCODE_TC_HEATER_OF_HTL_2		6589  /**/
#define ERR_UPER_ENCODE_TC_TC74S_TEMP_CELSIUS		6610  /**/
#define ERR_UPER_ENCODE_TC_TC74S_TEMP_CELSIUS_ELM_2		6603  /**/
#define ERR_UPER_ENCODE_TC_PT1000S_TEMP_CELSIUS		6631  /**/
#define ERR_UPER_ENCODE_TC_PT1000S_TEMP_CELSIUS_ELM_2		6624  /**/
#define ERR_UPER_ENCODE_TC_PRESSURE1_MBAR_2		6645  /**/
#define ERR_UPER_ENCODE_TC_PRESSURE2_MBAR_2		6659  /**/
#define TC_REQUIRED_BYTES_FOR_ENCODING       196 
#define TC_REQUIRED_BITS_FOR_ENCODING        1562

flag TC_Encode(const TC* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC		6667  /**/
#define ERR_UPER_DECODE_TC_HEATER_OF_HTL_2		6590  /**/
#define ERR_UPER_DECODE_TC_TC74S_TEMP_CELSIUS		6611  /**/
#define ERR_UPER_DECODE_TC_TC74S_TEMP_CELSIUS_ELM_2		6604  /**/
#define ERR_UPER_DECODE_TC_PT1000S_TEMP_CELSIUS		6632  /**/
#define ERR_UPER_DECODE_TC_PT1000S_TEMP_CELSIUS_ELM_2		6625  /**/
#define ERR_UPER_DECODE_TC_PRESSURE1_MBAR_2		6646  /**/
#define ERR_UPER_DECODE_TC_PRESSURE2_MBAR_2		6660  /**/
flag TC_Decode(TC* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TC		6668  /**/
#define ERR_ACN_ENCODE_TC_HEATER_OF_HTL_2		6591  /**/
#define ERR_ACN_ENCODE_TC_TC74S_TEMP_CELSIUS		6612  /**/
#define ERR_ACN_ENCODE_TC_TC74S_TEMP_CELSIUS_ELM_2		6605  /**/
#define ERR_ACN_ENCODE_TC_PT1000S_TEMP_CELSIUS		6633  /**/
#define ERR_ACN_ENCODE_TC_PT1000S_TEMP_CELSIUS_ELM_2		6626  /**/
#define ERR_ACN_ENCODE_TC_PRESSURE1_MBAR_2		6647  /**/
#define ERR_ACN_ENCODE_TC_PRESSURE2_MBAR_2		6661  /**/
#define TC_REQUIRED_BYTES_FOR_ACN_ENCODING       196 
#define TC_REQUIRED_BITS_FOR_ACN_ENCODING        1562

flag TC_ACN_Encode(const TC* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TC		6669  /**/
#define ERR_ACN_DECODE_TC_HEATER_OF_HTL_2		6592  /**/
#define ERR_ACN_DECODE_TC_TC74S_TEMP_CELSIUS		6613  /**/
#define ERR_ACN_DECODE_TC_TC74S_TEMP_CELSIUS_ELM_2		6606  /**/
#define ERR_ACN_DECODE_TC_PT1000S_TEMP_CELSIUS		6634  /**/
#define ERR_ACN_DECODE_TC_PT1000S_TEMP_CELSIUS_ELM_2		6627  /**/
#define ERR_ACN_DECODE_TC_PRESSURE1_MBAR_2		6648  /**/
#define ERR_ACN_DECODE_TC_PRESSURE2_MBAR_2		6662  /**/
flag TC_ACN_Decode(TC* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real T_Double;


flag T_Double_Equal(const T_Double* pVal1, const T_Double* pVal2);

void T_Double_Initialize(T_Double* pVal);

#define ERR_T_DOUBLE		29  /**/
flag T_Double_IsConstraintValid(const T_Double* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_DOUBLE		30  /**/
#define T_Double_REQUIRED_BYTES_FOR_ENCODING       13 
#define T_Double_REQUIRED_BITS_FOR_ENCODING        104

flag T_Double_Encode(const T_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_DOUBLE		31  /**/
flag T_Double_Decode(T_Double* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_DOUBLE		32  /**/
#define T_Double_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define T_Double_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag T_Double_ACN_Encode(const T_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_DOUBLE		33  /**/
flag T_Double_ACN_Decode(T_Double* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- GPS_PVT --------------------------------------------*/
typedef enum {
    not_seen = 0,
    no_fix = 1,
    two_dims = 2,
    three_dims = 3
} GPS_PVT_mode;

// please use the following macros to avoid breaking code.
#define GPS_PVT_mode_not_seen not_seen
#define GPS_PVT_mode_no_fix no_fix
#define GPS_PVT_mode_two_dims two_dims
#define GPS_PVT_mode_three_dims three_dims
typedef struct {
    GPS_PVT_mode mode;
    T_Double date_and_time;
    T_Double ept;
    T_Double latitude;
    T_Double epy;
    T_Double longitude;
    T_Double epx;
    T_Double altitude;
    T_Double epv;
    T_Double course;
    T_Double epd;
    T_Double speed;
    T_Double eps;
    T_Double climb;
    T_Double epc;

} GPS_PVT;

flag GPS_PVT_mode_Equal(const GPS_PVT_mode* pVal1, const GPS_PVT_mode* pVal2);

flag GPS_PVT_Equal(const GPS_PVT* pVal1, const GPS_PVT* pVal2);

void GPS_PVT_mode_Initialize(GPS_PVT_mode* pVal);
void GPS_PVT_Initialize(GPS_PVT* pVal);

#define ERR_GPS_PVT		323  /**/
#define ERR_GPS_PVT_MODE		120  /**/
#define ERR_GPS_PVT_DATE_AND_TIME_2		134  /**/
#define ERR_GPS_PVT_EPT_2		148  /**/
#define ERR_GPS_PVT_LATITUDE_2		162  /**/
#define ERR_GPS_PVT_EPY_2		176  /**/
#define ERR_GPS_PVT_LONGITUDE_2		190  /**/
#define ERR_GPS_PVT_EPX_2		204  /**/
#define ERR_GPS_PVT_ALTITUDE_2		218  /**/
#define ERR_GPS_PVT_EPV_2		232  /**/
#define ERR_GPS_PVT_COURSE_2		246  /**/
#define ERR_GPS_PVT_EPD_2		260  /**/
#define ERR_GPS_PVT_SPEED_2		274  /**/
#define ERR_GPS_PVT_EPS_2		288  /**/
#define ERR_GPS_PVT_CLIMB_2		302  /**/
#define ERR_GPS_PVT_EPC_2		316  /**/
flag GPS_PVT_IsConstraintValid(const GPS_PVT* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GPS_PVT		324  /**/
#define ERR_UPER_ENCODE_GPS_PVT_MODE		121  /**/
#define ERR_UPER_ENCODE_GPS_PVT_DATE_AND_TIME_2		135  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPT_2		149  /**/
#define ERR_UPER_ENCODE_GPS_PVT_LATITUDE_2		163  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPY_2		177  /**/
#define ERR_UPER_ENCODE_GPS_PVT_LONGITUDE_2		191  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPX_2		205  /**/
#define ERR_UPER_ENCODE_GPS_PVT_ALTITUDE_2		219  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPV_2		233  /**/
#define ERR_UPER_ENCODE_GPS_PVT_COURSE_2		247  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPD_2		261  /**/
#define ERR_UPER_ENCODE_GPS_PVT_SPEED_2		275  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPS_2		289  /**/
#define ERR_UPER_ENCODE_GPS_PVT_CLIMB_2		303  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPC_2		317  /**/
#define GPS_PVT_REQUIRED_BYTES_FOR_ENCODING       183 
#define GPS_PVT_REQUIRED_BITS_FOR_ENCODING        1458

flag GPS_PVT_Encode(const GPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GPS_PVT		325  /**/
#define ERR_UPER_DECODE_GPS_PVT_MODE		122  /**/
#define ERR_UPER_DECODE_GPS_PVT_DATE_AND_TIME_2		136  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPT_2		150  /**/
#define ERR_UPER_DECODE_GPS_PVT_LATITUDE_2		164  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPY_2		178  /**/
#define ERR_UPER_DECODE_GPS_PVT_LONGITUDE_2		192  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPX_2		206  /**/
#define ERR_UPER_DECODE_GPS_PVT_ALTITUDE_2		220  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPV_2		234  /**/
#define ERR_UPER_DECODE_GPS_PVT_COURSE_2		248  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPD_2		262  /**/
#define ERR_UPER_DECODE_GPS_PVT_SPEED_2		276  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPS_2		290  /**/
#define ERR_UPER_DECODE_GPS_PVT_CLIMB_2		304  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPC_2		318  /**/
flag GPS_PVT_Decode(GPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_GPS_PVT		326  /**/
#define ERR_ACN_ENCODE_GPS_PVT_MODE		123  /**/
#define ERR_ACN_ENCODE_GPS_PVT_DATE_AND_TIME_2		137  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPT_2		151  /**/
#define ERR_ACN_ENCODE_GPS_PVT_LATITUDE_2		165  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPY_2		179  /**/
#define ERR_ACN_ENCODE_GPS_PVT_LONGITUDE_2		193  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPX_2		207  /**/
#define ERR_ACN_ENCODE_GPS_PVT_ALTITUDE_2		221  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPV_2		235  /**/
#define ERR_ACN_ENCODE_GPS_PVT_COURSE_2		249  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPD_2		263  /**/
#define ERR_ACN_ENCODE_GPS_PVT_SPEED_2		277  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPS_2		291  /**/
#define ERR_ACN_ENCODE_GPS_PVT_CLIMB_2		305  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPC_2		319  /**/
#define GPS_PVT_REQUIRED_BYTES_FOR_ACN_ENCODING       183 
#define GPS_PVT_REQUIRED_BITS_FOR_ACN_ENCODING        1458

flag GPS_PVT_ACN_Encode(const GPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_GPS_PVT		327  /**/
#define ERR_ACN_DECODE_GPS_PVT_MODE		124  /**/
#define ERR_ACN_DECODE_GPS_PVT_DATE_AND_TIME_2		138  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPT_2		152  /**/
#define ERR_ACN_DECODE_GPS_PVT_LATITUDE_2		166  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPY_2		180  /**/
#define ERR_ACN_DECODE_GPS_PVT_LONGITUDE_2		194  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPX_2		208  /**/
#define ERR_ACN_DECODE_GPS_PVT_ALTITUDE_2		222  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPV_2		236  /**/
#define ERR_ACN_DECODE_GPS_PVT_COURSE_2		250  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPD_2		264  /**/
#define ERR_ACN_DECODE_GPS_PVT_SPEED_2		278  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPS_2		292  /**/
#define ERR_ACN_DECODE_GPS_PVT_CLIMB_2		306  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPC_2		320  /**/
flag GPS_PVT_ACN_Decode(GPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    
    byte arr[81];
} File_Name;


flag File_Name_Equal(const File_Name* pVal1, const File_Name* pVal2);

void File_Name_Initialize(File_Name* pVal);

#define ERR_FILE_NAME		36  /**/
flag File_Name_IsConstraintValid(const File_Name* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_FILE_NAME		37  /**/
#define File_Name_REQUIRED_BYTES_FOR_ENCODING       81 
#define File_Name_REQUIRED_BITS_FOR_ENCODING        648

flag File_Name_Encode(const File_Name* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILE_NAME		38  /**/
flag File_Name_Decode(File_Name* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILE_NAME		39  /**/
#define File_Name_REQUIRED_BYTES_FOR_ACN_ENCODING       81 
#define File_Name_REQUIRED_BITS_FOR_ACN_ENCODING        648

flag File_Name_ACN_Encode(const File_Name* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILE_NAME		40  /**/
flag File_Name_ACN_Decode(File_Name* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    valid = 0,
    invalid = 1
} Content_Validity;

// please use the following macros to avoid breaking code.
#define Content_Validity_valid valid
#define Content_Validity_invalid invalid

flag Content_Validity_Equal(const Content_Validity* pVal1, const Content_Validity* pVal2);

void Content_Validity_Initialize(Content_Validity* pVal);

#define ERR_CONTENT_VALIDITY		43  /**/
flag Content_Validity_IsConstraintValid(const Content_Validity* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_CONTENT_VALIDITY		44  /**/
#define Content_Validity_REQUIRED_BYTES_FOR_ENCODING       1 
#define Content_Validity_REQUIRED_BITS_FOR_ENCODING        1

flag Content_Validity_Encode(const Content_Validity* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CONTENT_VALIDITY		45  /**/
flag Content_Validity_Decode(Content_Validity* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_CONTENT_VALIDITY		46  /**/
#define Content_Validity_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define Content_Validity_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag Content_Validity_ACN_Encode(const Content_Validity* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_CONTENT_VALIDITY		47  /**/
flag Content_Validity_ACN_Decode(Content_Validity* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- IMU_All_Data --------------------------------------------*/
typedef struct {
    MGT_Raw_Data mgt_raw;
    MGT_MilliGauss_Data mgt_mgauss;
    ACC_Raw_Data accel_raw;
    ACC_MilliG_Data accel_mg;
    GYRO_Raw_Data gyro_raw;
    GYRO_MilliDPS_Data gyro_mdps;
    T_Int16 temp_raw;
    T_Float temp_celsius;
    Content_Validity mgt_valid;
    Content_Validity acc_valid;
    Content_Validity gyro_valid;
    Content_Validity temp_valid;

} IMU_All_Data;

flag IMU_All_Data_Equal(const IMU_All_Data* pVal1, const IMU_All_Data* pVal2);

void IMU_All_Data_Initialize(IMU_All_Data* pVal);

#define ERR_IMU_ALL_DATA		1044  /**/
#define ERR_IMU_ALL_DATA_MGT_RAW_2		673  /**/
#define ERR_IMU_ALL_DATA_MGT_MGAUSS_2		729  /**/
#define ERR_IMU_ALL_DATA_ACCEL_RAW_2		785  /**/
#define ERR_IMU_ALL_DATA_ACCEL_MG_2		841  /**/
#define ERR_IMU_ALL_DATA_GYRO_RAW_2		897  /**/
#define ERR_IMU_ALL_DATA_GYRO_MDPS_2		953  /**/
#define ERR_IMU_ALL_DATA_TEMP_RAW_2		967  /**/
#define ERR_IMU_ALL_DATA_TEMP_CELSIUS_2		981  /**/
#define ERR_IMU_ALL_DATA_MGT_VALID_2		995  /**/
#define ERR_IMU_ALL_DATA_ACC_VALID_2		1009  /**/
#define ERR_IMU_ALL_DATA_GYRO_VALID_2		1023  /**/
#define ERR_IMU_ALL_DATA_TEMP_VALID_2		1037  /**/
flag IMU_All_Data_IsConstraintValid(const IMU_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_IMU_ALL_DATA		1045  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_MGT_RAW_2		674  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_MGT_MGAUSS_2		730  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_ACCEL_RAW_2		786  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_ACCEL_MG_2		842  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_GYRO_RAW_2		898  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_GYRO_MDPS_2		954  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_TEMP_RAW_2		968  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_TEMP_CELSIUS_2		982  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_MGT_VALID_2		996  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_ACC_VALID_2		1010  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_GYRO_VALID_2		1024  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_TEMP_VALID_2		1038  /**/
#define IMU_All_Data_REQUIRED_BYTES_FOR_ENCODING       151 
#define IMU_All_Data_REQUIRED_BITS_FOR_ENCODING        1204

flag IMU_All_Data_Encode(const IMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_IMU_ALL_DATA		1046  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_MGT_RAW_2		675  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_MGT_MGAUSS_2		731  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_ACCEL_RAW_2		787  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_ACCEL_MG_2		843  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_GYRO_RAW_2		899  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_GYRO_MDPS_2		955  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_TEMP_RAW_2		969  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_TEMP_CELSIUS_2		983  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_MGT_VALID_2		997  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_ACC_VALID_2		1011  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_GYRO_VALID_2		1025  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_TEMP_VALID_2		1039  /**/
flag IMU_All_Data_Decode(IMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_IMU_ALL_DATA		1047  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_MGT_RAW_2		676  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_MGT_MGAUSS_2		732  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_ACCEL_RAW_2		788  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_ACCEL_MG_2		844  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_GYRO_RAW_2		900  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_GYRO_MDPS_2		956  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_TEMP_RAW_2		970  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_TEMP_CELSIUS_2		984  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_MGT_VALID_2		998  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_ACC_VALID_2		1012  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_GYRO_VALID_2		1026  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_TEMP_VALID_2		1040  /**/
#define IMU_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       151 
#define IMU_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        1204

flag IMU_All_Data_ACN_Encode(const IMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_IMU_ALL_DATA		1048  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_MGT_RAW_2		677  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_MGT_MGAUSS_2		733  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_ACCEL_RAW_2		789  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_ACCEL_MG_2		845  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_GYRO_RAW_2		901  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_GYRO_MDPS_2		957  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_TEMP_RAW_2		971  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_TEMP_CELSIUS_2		985  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_MGT_VALID_2		999  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_ACC_VALID_2		1013  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_GYRO_VALID_2		1027  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_TEMP_VALID_2		1041  /**/
flag IMU_All_Data_ACN_Decode(IMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

/*-- TC74s_All_Data_elem --------------------------------------------*/
typedef struct {
    T_Float temperature;
    Content_Validity validity;

} TC74s_All_Data_elem;

typedef struct {
    
    TC74s_All_Data_elem arr[5];
} TC74s_All_Data;

flag TC74s_All_Data_elem_Equal(const TC74s_All_Data_elem* pVal1, const TC74s_All_Data_elem* pVal2);

flag TC74s_All_Data_Equal(const TC74s_All_Data* pVal1, const TC74s_All_Data* pVal2);

void TC74s_All_Data_elem_Initialize(TC74s_All_Data_elem* pVal);
void TC74s_All_Data_Initialize(TC74s_All_Data* pVal);

#define ERR_TC74S_ALL_DATA		1107  /**/
#define ERR_TC74S_ALL_DATA_ELM		1100  /**/
#define ERR_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1079  /**/
#define ERR_TC74S_ALL_DATA_ELM_VALIDITY_2		1093  /**/
flag TC74s_All_Data_IsConstraintValid(const TC74s_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC74S_ALL_DATA		1108  /**/
#define ERR_UPER_ENCODE_TC74S_ALL_DATA_ELM		1101  /**/
#define ERR_UPER_ENCODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1080  /**/
#define ERR_UPER_ENCODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1094  /**/
#define TC74s_All_Data_REQUIRED_BYTES_FOR_ENCODING       66 
#define TC74s_All_Data_REQUIRED_BITS_FOR_ENCODING        525

flag TC74s_All_Data_Encode(const TC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC74S_ALL_DATA		1109  /**/
#define ERR_UPER_DECODE_TC74S_ALL_DATA_ELM		1102  /**/
#define ERR_UPER_DECODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1081  /**/
#define ERR_UPER_DECODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1095  /**/
flag TC74s_All_Data_Decode(TC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TC74S_ALL_DATA		1110  /**/
#define ERR_ACN_ENCODE_TC74S_ALL_DATA_ELM		1103  /**/
#define ERR_ACN_ENCODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1082  /**/
#define ERR_ACN_ENCODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1096  /**/
#define TC74s_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       66 
#define TC74s_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        525

flag TC74s_All_Data_ACN_Encode(const TC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TC74S_ALL_DATA		1111  /**/
#define ERR_ACN_DECODE_TC74S_ALL_DATA_ELM		1104  /**/
#define ERR_ACN_DECODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1083  /**/
#define ERR_ACN_DECODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1097  /**/
flag TC74s_All_Data_ACN_Decode(TC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PT1000s_All_Data --------------------------------------------*/


typedef struct {
    
    Content_Validity arr[7];
} PT1000s_All_Data_validity;
typedef struct {
    PT1000s_Raw_Data raw;
    PT1000s_Celsius_Data celsius;
    PT1000s_All_Data_validity validity;

} PT1000s_All_Data;

flag PT1000s_All_Data_validity_Equal(const PT1000s_All_Data_validity* pVal1, const PT1000s_All_Data_validity* pVal2);

flag PT1000s_All_Data_Equal(const PT1000s_All_Data* pVal1, const PT1000s_All_Data* pVal2);

void PT1000s_All_Data_validity_Initialize(PT1000s_All_Data_validity* pVal);
void PT1000s_All_Data_Initialize(PT1000s_All_Data* pVal);

#define ERR_PT1000S_ALL_DATA		1296  /**/
#define ERR_PT1000S_ALL_DATA_RAW_2		1240  /**/
#define ERR_PT1000S_ALL_DATA_CELSIUS_2		1268  /**/
#define ERR_PT1000S_ALL_DATA_VALIDITY		1289  /**/
#define ERR_PT1000S_ALL_DATA_VALIDITY_ELM_2		1282  /**/
flag PT1000s_All_Data_IsConstraintValid(const PT1000s_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_ALL_DATA		1297  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_RAW_2		1241  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_CELSIUS_2		1269  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_VALIDITY		1290  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1283  /**/
#define PT1000s_All_Data_REQUIRED_BYTES_FOR_ENCODING       274 
#define PT1000s_All_Data_REQUIRED_BITS_FOR_ENCODING        2191

flag PT1000s_All_Data_Encode(const PT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_ALL_DATA		1298  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_RAW_2		1242  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_CELSIUS_2		1270  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_VALIDITY		1291  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1284  /**/
flag PT1000s_All_Data_Decode(PT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_ALL_DATA		1299  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_RAW_2		1243  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_CELSIUS_2		1271  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_VALIDITY		1292  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1285  /**/
#define PT1000s_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       274 
#define PT1000s_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        2191

flag PT1000s_All_Data_ACN_Encode(const PT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_ALL_DATA		1300  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_RAW_2		1244  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_CELSIUS_2		1272  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_VALIDITY		1293  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1286  /**/
flag PT1000s_All_Data_ACN_Decode(PT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Heater_Data --------------------------------------------*/
typedef struct {
    T_Float power_watts;
    Content_Validity validity;

} Heater_Data;

flag Heater_Data_Equal(const Heater_Data* pVal1, const Heater_Data* pVal2);

void Heater_Data_Initialize(Heater_Data* pVal);

#define ERR_HEATER_DATA		1863  /**/
#define ERR_HEATER_DATA_POWER_WATTS_2		1842  /**/
#define ERR_HEATER_DATA_VALIDITY_2		1856  /**/
flag Heater_Data_IsConstraintValid(const Heater_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HEATER_DATA		1864  /**/
#define ERR_UPER_ENCODE_HEATER_DATA_POWER_WATTS_2		1843  /**/
#define ERR_UPER_ENCODE_HEATER_DATA_VALIDITY_2		1857  /**/
#define Heater_Data_REQUIRED_BYTES_FOR_ENCODING       14 
#define Heater_Data_REQUIRED_BITS_FOR_ENCODING        105

flag Heater_Data_Encode(const Heater_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HEATER_DATA		1865  /**/
#define ERR_UPER_DECODE_HEATER_DATA_POWER_WATTS_2		1844  /**/
#define ERR_UPER_DECODE_HEATER_DATA_VALIDITY_2		1858  /**/
flag Heater_Data_Decode(Heater_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HEATER_DATA		1866  /**/
#define ERR_ACN_ENCODE_HEATER_DATA_POWER_WATTS_2		1845  /**/
#define ERR_ACN_ENCODE_HEATER_DATA_VALIDITY_2		1859  /**/
#define Heater_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       14 
#define Heater_Data_REQUIRED_BITS_FOR_ACN_ENCODING        105

flag Heater_Data_ACN_Encode(const Heater_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HEATER_DATA		1867  /**/
#define ERR_ACN_DECODE_HEATER_DATA_POWER_WATTS_2		1846  /**/
#define ERR_ACN_DECODE_HEATER_DATA_VALIDITY_2		1860  /**/
flag Heater_Data_ACN_Decode(Heater_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PS_GUI --------------------------------------------*/
typedef struct {
    T_Double pressure_mbar;
    T_Double temperature_celsius;
    Content_Validity validity;

} PS_GUI;

flag PS_GUI_Equal(const PS_GUI* pVal1, const PS_GUI* pVal2);

void PS_GUI_Initialize(PS_GUI* pVal);

#define ERR_PS_GUI		7659  /**/
#define ERR_PS_GUI_PRESSURE_MBAR_2		7624  /**/
#define ERR_PS_GUI_TEMPERATURE_CELSIUS_2		7638  /**/
#define ERR_PS_GUI_VALIDITY_2		7652  /**/
flag PS_GUI_IsConstraintValid(const PS_GUI* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_GUI		7660  /**/
#define ERR_UPER_ENCODE_PS_GUI_PRESSURE_MBAR_2		7625  /**/
#define ERR_UPER_ENCODE_PS_GUI_TEMPERATURE_CELSIUS_2		7639  /**/
#define ERR_UPER_ENCODE_PS_GUI_VALIDITY_2		7653  /**/
#define PS_GUI_REQUIRED_BYTES_FOR_ENCODING       27 
#define PS_GUI_REQUIRED_BITS_FOR_ENCODING        209

flag PS_GUI_Encode(const PS_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_GUI		7661  /**/
#define ERR_UPER_DECODE_PS_GUI_PRESSURE_MBAR_2		7626  /**/
#define ERR_UPER_DECODE_PS_GUI_TEMPERATURE_CELSIUS_2		7640  /**/
#define ERR_UPER_DECODE_PS_GUI_VALIDITY_2		7654  /**/
flag PS_GUI_Decode(PS_GUI* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_GUI		7662  /**/
#define ERR_ACN_ENCODE_PS_GUI_PRESSURE_MBAR_2		7627  /**/
#define ERR_ACN_ENCODE_PS_GUI_TEMPERATURE_CELSIUS_2		7641  /**/
#define ERR_ACN_ENCODE_PS_GUI_VALIDITY_2		7655  /**/
#define PS_GUI_REQUIRED_BYTES_FOR_ACN_ENCODING       27 
#define PS_GUI_REQUIRED_BITS_FOR_ACN_ENCODING        209

flag PS_GUI_ACN_Encode(const PS_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_GUI		7663  /**/
#define ERR_ACN_DECODE_PS_GUI_PRESSURE_MBAR_2		7628  /**/
#define ERR_ACN_DECODE_PS_GUI_TEMPERATURE_CELSIUS_2		7642  /**/
#define ERR_ACN_DECODE_PS_GUI_VALIDITY_2		7656  /**/
flag PS_GUI_ACN_Decode(PS_GUI* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- ENV_GUI --------------------------------------------*/
/*-- ENV_GUI_anemometer --------------------------------------------*/
typedef struct {
    T_UInt64 global_counter;
    T_Float temperature_celsius;
    Content_Validity temperature_validity;

} ENV_GUI_anemometer;
typedef struct {
    PS_GUI pressure_sensor_1;
    PS_GUI pressure_sensor_2;
    ENV_GUI_anemometer anemometer;
    Heater_Data heater;

} ENV_GUI;

flag ENV_GUI_anemometer_Equal(const ENV_GUI_anemometer* pVal1, const ENV_GUI_anemometer* pVal2);

flag ENV_GUI_Equal(const ENV_GUI* pVal1, const ENV_GUI* pVal2);

void ENV_GUI_anemometer_Initialize(ENV_GUI_anemometer* pVal);
void ENV_GUI_Initialize(ENV_GUI* pVal);

#define ERR_ENV_GUI		7869  /**/
#define ERR_ENV_GUI_PRESSURE_SENSOR_1_2		7715  /**/
#define ERR_ENV_GUI_PRESSURE_SENSOR_2_2		7771  /**/
#define ERR_ENV_GUI_ANEMOMETER		7820  /**/
#define ERR_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		7785  /**/
#define ERR_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		7799  /**/
#define ERR_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		7813  /**/
#define ERR_ENV_GUI_HEATER_2		7862  /**/
flag ENV_GUI_IsConstraintValid(const ENV_GUI* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ENV_GUI		7870  /**/
#define ERR_UPER_ENCODE_ENV_GUI_PRESSURE_SENSOR_1_2		7716  /**/
#define ERR_UPER_ENCODE_ENV_GUI_PRESSURE_SENSOR_2_2		7772  /**/
#define ERR_UPER_ENCODE_ENV_GUI_ANEMOMETER		7821  /**/
#define ERR_UPER_ENCODE_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		7786  /**/
#define ERR_UPER_ENCODE_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		7800  /**/
#define ERR_UPER_ENCODE_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		7814  /**/
#define ERR_UPER_ENCODE_ENV_GUI_HEATER_2		7863  /**/
#define ENV_GUI_REQUIRED_BYTES_FOR_ENCODING       87 
#define ENV_GUI_REQUIRED_BITS_FOR_ENCODING        692

flag ENV_GUI_Encode(const ENV_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ENV_GUI		7871  /**/
#define ERR_UPER_DECODE_ENV_GUI_PRESSURE_SENSOR_1_2		7717  /**/
#define ERR_UPER_DECODE_ENV_GUI_PRESSURE_SENSOR_2_2		7773  /**/
#define ERR_UPER_DECODE_ENV_GUI_ANEMOMETER		7822  /**/
#define ERR_UPER_DECODE_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		7787  /**/
#define ERR_UPER_DECODE_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		7801  /**/
#define ERR_UPER_DECODE_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		7815  /**/
#define ERR_UPER_DECODE_ENV_GUI_HEATER_2		7864  /**/
flag ENV_GUI_Decode(ENV_GUI* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ENV_GUI		7872  /**/
#define ERR_ACN_ENCODE_ENV_GUI_PRESSURE_SENSOR_1_2		7718  /**/
#define ERR_ACN_ENCODE_ENV_GUI_PRESSURE_SENSOR_2_2		7774  /**/
#define ERR_ACN_ENCODE_ENV_GUI_ANEMOMETER		7823  /**/
#define ERR_ACN_ENCODE_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		7788  /**/
#define ERR_ACN_ENCODE_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		7802  /**/
#define ERR_ACN_ENCODE_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		7816  /**/
#define ERR_ACN_ENCODE_ENV_GUI_HEATER_2		7865  /**/
#define ENV_GUI_REQUIRED_BYTES_FOR_ACN_ENCODING       87 
#define ENV_GUI_REQUIRED_BITS_FOR_ACN_ENCODING        692

flag ENV_GUI_ACN_Encode(const ENV_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ENV_GUI		7873  /**/
#define ERR_ACN_DECODE_ENV_GUI_PRESSURE_SENSOR_1_2		7719  /**/
#define ERR_ACN_DECODE_ENV_GUI_PRESSURE_SENSOR_2_2		7775  /**/
#define ERR_ACN_DECODE_ENV_GUI_ANEMOMETER		7824  /**/
#define ERR_ACN_DECODE_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		7789  /**/
#define ERR_ACN_DECODE_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		7803  /**/
#define ERR_ACN_DECODE_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		7817  /**/
#define ERR_ACN_DECODE_ENV_GUI_HEATER_2		7866  /**/
flag ENV_GUI_ACN_Decode(ENV_GUI* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    on = 0,
    off = 1
} Heater_On_Off;

// please use the following macros to avoid breaking code.
#define Heater_On_Off_on on
#define Heater_On_Off_off off

flag Heater_On_Off_Equal(const Heater_On_Off* pVal1, const Heater_On_Off* pVal2);

void Heater_On_Off_Initialize(Heater_On_Off* pVal);

#define ERR_HEATER_ON_OFF		1870  /**/
flag Heater_On_Off_IsConstraintValid(const Heater_On_Off* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HEATER_ON_OFF		1871  /**/
#define Heater_On_Off_REQUIRED_BYTES_FOR_ENCODING       1 
#define Heater_On_Off_REQUIRED_BITS_FOR_ENCODING        1

flag Heater_On_Off_Encode(const Heater_On_Off* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HEATER_ON_OFF		1872  /**/
flag Heater_On_Off_Decode(Heater_On_Off* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HEATER_ON_OFF		1873  /**/
#define Heater_On_Off_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define Heater_On_Off_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag Heater_On_Off_ACN_Encode(const Heater_On_Off* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HEATER_ON_OFF		1874  /**/
flag Heater_On_Off_ACN_Decode(Heater_On_Off* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    a1 = 0,
    a2 = 1,
    f1 = 2,
    f2 = 3,
    f3 = 4,
    error = 5
} HTL_State;

// please use the following macros to avoid breaking code.
#define HTL_State_a1 a1
#define HTL_State_a2 a2
#define HTL_State_f1 f1
#define HTL_State_f2 f2
#define HTL_State_f3 f3
#define HTL_State_error error

flag HTL_State_Equal(const HTL_State* pVal1, const HTL_State* pVal2);

void HTL_State_Initialize(HTL_State* pVal);

#define ERR_HTL_STATE		1877  /**/
flag HTL_State_IsConstraintValid(const HTL_State* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HTL_STATE		1878  /**/
#define HTL_State_REQUIRED_BYTES_FOR_ENCODING       1 
#define HTL_State_REQUIRED_BITS_FOR_ENCODING        3

flag HTL_State_Encode(const HTL_State* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HTL_STATE		1879  /**/
flag HTL_State_Decode(HTL_State* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HTL_STATE		1880  /**/
#define HTL_State_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define HTL_State_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag HTL_State_ACN_Encode(const HTL_State* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HTL_STATE		1881  /**/
flag HTL_State_ACN_Decode(HTL_State* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- HTL_GUI --------------------------------------------*/
/*-- HTL_GUI_pt1000s --------------------------------------------*/


typedef struct {
    
    Content_Validity arr[6];
} HTL_GUI_pt1000s_validity;
typedef struct {
    T_Float aire_abajo;
    T_Float aire_arriba;
    T_Float placa_abajo;
    T_Float placa_arriba;
    T_Float infinito;
    T_Float exterior;
    HTL_GUI_pt1000s_validity validity;

} HTL_GUI_pt1000s;
/*-- HTL_GUI_tc74s --------------------------------------------*/


typedef struct {
    
    Content_Validity arr[5];
} HTL_GUI_tc74s_validity;
typedef struct {
    T_Float x_positive;
    T_Float x_negative;
    T_Float y_positive;
    T_Float y_negative;
    T_Float z_techo;
    HTL_GUI_tc74s_validity validity;

} HTL_GUI_tc74s;
typedef struct {
    HTL_State state;
    Heater_Data heater;
    T_Float delta_T;
    HTL_GUI_pt1000s pt1000s;
    HTL_GUI_tc74s tc74s;

} HTL_GUI;

flag HTL_GUI_pt1000s_validity_Equal(const HTL_GUI_pt1000s_validity* pVal1, const HTL_GUI_pt1000s_validity* pVal2);

flag HTL_GUI_pt1000s_Equal(const HTL_GUI_pt1000s* pVal1, const HTL_GUI_pt1000s* pVal2);

flag HTL_GUI_tc74s_validity_Equal(const HTL_GUI_tc74s_validity* pVal1, const HTL_GUI_tc74s_validity* pVal2);

flag HTL_GUI_tc74s_Equal(const HTL_GUI_tc74s* pVal1, const HTL_GUI_tc74s* pVal2);

flag HTL_GUI_Equal(const HTL_GUI* pVal1, const HTL_GUI* pVal2);

void HTL_GUI_pt1000s_validity_Initialize(HTL_GUI_pt1000s_validity* pVal);
void HTL_GUI_pt1000s_Initialize(HTL_GUI_pt1000s* pVal);
void HTL_GUI_tc74s_validity_Initialize(HTL_GUI_tc74s_validity* pVal);
void HTL_GUI_tc74s_Initialize(HTL_GUI_tc74s* pVal);
void HTL_GUI_Initialize(HTL_GUI* pVal);

#define ERR_HTL_GUI		6952  /**/
#define ERR_HTL_GUI_STATE_2		6679  /**/
#define ERR_HTL_GUI_HEATER_2		6721  /**/
#define ERR_HTL_GUI_DELTA_T_2		6735  /**/
#define ERR_HTL_GUI_PT1000S		6847  /**/
#define ERR_HTL_GUI_PT1000S_AIRE_ABAJO_2		6749  /**/
#define ERR_HTL_GUI_PT1000S_AIRE_ARRIBA_2		6763  /**/
#define ERR_HTL_GUI_PT1000S_PLACA_ABAJO_2		6777  /**/
#define ERR_HTL_GUI_PT1000S_PLACA_ARRIBA_2		6791  /**/
#define ERR_HTL_GUI_PT1000S_INFINITO_2		6805  /**/
#define ERR_HTL_GUI_PT1000S_EXTERIOR_2		6819  /**/
#define ERR_HTL_GUI_PT1000S_VALIDITY		6840  /**/
#define ERR_HTL_GUI_PT1000S_VALIDITY_ELM_2		6833  /**/
#define ERR_HTL_GUI_TC74S		6945  /**/
#define ERR_HTL_GUI_TC74S_X_POSITIVE_2		6861  /**/
#define ERR_HTL_GUI_TC74S_X_NEGATIVE_2		6875  /**/
#define ERR_HTL_GUI_TC74S_Y_POSITIVE_2		6889  /**/
#define ERR_HTL_GUI_TC74S_Y_NEGATIVE_2		6903  /**/
#define ERR_HTL_GUI_TC74S_Z_TECHO_2		6917  /**/
#define ERR_HTL_GUI_TC74S_VALIDITY		6938  /**/
#define ERR_HTL_GUI_TC74S_VALIDITY_ELM_2		6931  /**/
flag HTL_GUI_IsConstraintValid(const HTL_GUI* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HTL_GUI		6953  /**/
#define ERR_UPER_ENCODE_HTL_GUI_STATE_2		6680  /**/
#define ERR_UPER_ENCODE_HTL_GUI_HEATER_2		6722  /**/
#define ERR_UPER_ENCODE_HTL_GUI_DELTA_T_2		6736  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S		6848  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_AIRE_ABAJO_2		6750  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_AIRE_ARRIBA_2		6764  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_PLACA_ABAJO_2		6778  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_PLACA_ARRIBA_2		6792  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_INFINITO_2		6806  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_EXTERIOR_2		6820  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_VALIDITY		6841  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_VALIDITY_ELM_2		6834  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S		6946  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_X_POSITIVE_2		6862  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_X_NEGATIVE_2		6876  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_Y_POSITIVE_2		6890  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_Y_NEGATIVE_2		6904  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_Z_TECHO_2		6918  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_VALIDITY		6939  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_VALIDITY_ELM_2		6932  /**/
#define HTL_GUI_REQUIRED_BYTES_FOR_ENCODING       171 
#define HTL_GUI_REQUIRED_BITS_FOR_ENCODING        1367

flag HTL_GUI_Encode(const HTL_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HTL_GUI		6954  /**/
#define ERR_UPER_DECODE_HTL_GUI_STATE_2		6681  /**/
#define ERR_UPER_DECODE_HTL_GUI_HEATER_2		6723  /**/
#define ERR_UPER_DECODE_HTL_GUI_DELTA_T_2		6737  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S		6849  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_AIRE_ABAJO_2		6751  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_AIRE_ARRIBA_2		6765  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_PLACA_ABAJO_2		6779  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_PLACA_ARRIBA_2		6793  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_INFINITO_2		6807  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_EXTERIOR_2		6821  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_VALIDITY		6842  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_VALIDITY_ELM_2		6835  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S		6947  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_X_POSITIVE_2		6863  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_X_NEGATIVE_2		6877  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_Y_POSITIVE_2		6891  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_Y_NEGATIVE_2		6905  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_Z_TECHO_2		6919  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_VALIDITY		6940  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_VALIDITY_ELM_2		6933  /**/
flag HTL_GUI_Decode(HTL_GUI* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HTL_GUI		6955  /**/
#define ERR_ACN_ENCODE_HTL_GUI_STATE_2		6682  /**/
#define ERR_ACN_ENCODE_HTL_GUI_HEATER_2		6724  /**/
#define ERR_ACN_ENCODE_HTL_GUI_DELTA_T_2		6738  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S		6850  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_AIRE_ABAJO_2		6752  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_AIRE_ARRIBA_2		6766  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_PLACA_ABAJO_2		6780  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_PLACA_ARRIBA_2		6794  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_INFINITO_2		6808  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_EXTERIOR_2		6822  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_VALIDITY		6843  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_VALIDITY_ELM_2		6836  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S		6948  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_X_POSITIVE_2		6864  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_X_NEGATIVE_2		6878  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_Y_POSITIVE_2		6892  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_Y_NEGATIVE_2		6906  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_Z_TECHO_2		6920  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_VALIDITY		6941  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_VALIDITY_ELM_2		6934  /**/
#define HTL_GUI_REQUIRED_BYTES_FOR_ACN_ENCODING       171 
#define HTL_GUI_REQUIRED_BITS_FOR_ACN_ENCODING        1367

flag HTL_GUI_ACN_Encode(const HTL_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HTL_GUI		6956  /**/
#define ERR_ACN_DECODE_HTL_GUI_STATE_2		6683  /**/
#define ERR_ACN_DECODE_HTL_GUI_HEATER_2		6725  /**/
#define ERR_ACN_DECODE_HTL_GUI_DELTA_T_2		6739  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S		6851  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_AIRE_ABAJO_2		6753  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_AIRE_ARRIBA_2		6767  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_PLACA_ABAJO_2		6781  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_PLACA_ARRIBA_2		6795  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_INFINITO_2		6809  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_EXTERIOR_2		6823  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_VALIDITY		6844  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_VALIDITY_ELM_2		6837  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S		6949  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_X_POSITIVE_2		6865  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_X_NEGATIVE_2		6879  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_Y_POSITIVE_2		6893  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_Y_NEGATIVE_2		6907  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_Z_TECHO_2		6921  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_VALIDITY		6942  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_VALIDITY_ELM_2		6935  /**/
flag HTL_GUI_ACN_Decode(HTL_GUI* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    gps = 0,
    imu = 1,
    tc74s = 2,
    pt1000s = 3,
    ps1 = 4,
    ps2 = 5,
    heater1 = 6,
    heater2 = 7,
    anemometer = 8
} OBSW_DP_Filter;

// please use the following macros to avoid breaking code.
#define OBSW_DP_Filter_gps gps
#define OBSW_DP_Filter_imu imu
#define OBSW_DP_Filter_tc74s tc74s
#define OBSW_DP_Filter_pt1000s pt1000s
#define OBSW_DP_Filter_ps1 ps1
#define OBSW_DP_Filter_ps2 ps2
#define OBSW_DP_Filter_heater1 heater1
#define OBSW_DP_Filter_heater2 heater2
#define OBSW_DP_Filter_anemometer anemometer

flag OBSW_DP_Filter_Equal(const OBSW_DP_Filter* pVal1, const OBSW_DP_Filter* pVal2);

void OBSW_DP_Filter_Initialize(OBSW_DP_Filter* pVal);

#define ERR_OBSW_DP_FILTER		3823  /**/
flag OBSW_DP_Filter_IsConstraintValid(const OBSW_DP_Filter* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_OBSW_DP_FILTER		3824  /**/
#define OBSW_DP_Filter_REQUIRED_BYTES_FOR_ENCODING       1 
#define OBSW_DP_Filter_REQUIRED_BITS_FOR_ENCODING        4

flag OBSW_DP_Filter_Encode(const OBSW_DP_Filter* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_OBSW_DP_FILTER		3825  /**/
flag OBSW_DP_Filter_Decode(OBSW_DP_Filter* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_OBSW_DP_FILTER		3826  /**/
#define OBSW_DP_Filter_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define OBSW_DP_Filter_REQUIRED_BITS_FOR_ACN_ENCODING        4

flag OBSW_DP_Filter_ACN_Encode(const OBSW_DP_Filter* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_OBSW_DP_FILTER		3827  /**/
flag OBSW_DP_Filter_ACN_Decode(OBSW_DP_Filter* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int32;


flag T_Int32_Equal(const T_Int32* pVal1, const T_Int32* pVal2);

void T_Int32_Initialize(T_Int32* pVal);

#define ERR_T_INT32		7876  /**/
flag T_Int32_IsConstraintValid(const T_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT32		7877  /**/
#define T_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag T_Int32_Encode(const T_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		7878  /**/
flag T_Int32_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		7879  /**/
#define T_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag T_Int32_ACN_Encode(const T_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		7880  /**/
flag T_Int32_ACN_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    T_Int32 arr[5];
} TC74s_I2CBuses;

flag TC74s_I2CBuses_Equal(const TC74s_I2CBuses* pVal1, const TC74s_I2CBuses* pVal2);

void TC74s_I2CBuses_Initialize(TC74s_I2CBuses* pVal);

#define ERR_TC74S_I2CBUSES		1065  /**/
#define ERR_TC74S_I2CBUSES_ELM_2		1058  /**/
flag TC74s_I2CBuses_IsConstraintValid(const TC74s_I2CBuses* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC74S_I2CBUSES		1066  /**/
#define ERR_UPER_ENCODE_TC74S_I2CBUSES_ELM_2		1059  /**/
#define TC74s_I2CBuses_REQUIRED_BYTES_FOR_ENCODING       20 
#define TC74s_I2CBuses_REQUIRED_BITS_FOR_ENCODING        160

flag TC74s_I2CBuses_Encode(const TC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC74S_I2CBUSES		1067  /**/
#define ERR_UPER_DECODE_TC74S_I2CBUSES_ELM_2		1060  /**/
flag TC74s_I2CBuses_Decode(TC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TC74S_I2CBUSES		1068  /**/
#define ERR_ACN_ENCODE_TC74S_I2CBUSES_ELM_2		1061  /**/
#define TC74s_I2CBuses_REQUIRED_BYTES_FOR_ACN_ENCODING       20 
#define TC74s_I2CBuses_REQUIRED_BITS_FOR_ACN_ENCODING        160

flag TC74s_I2CBuses_ACN_Encode(const TC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TC74S_I2CBUSES		1069  /**/
#define ERR_ACN_DECODE_TC74S_I2CBUSES_ELM_2		1062  /**/
flag TC74s_I2CBuses_ACN_Decode(TC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    T_Int32 arr[7];
} PT1000s_Channels;

flag PT1000s_Channels_Equal(const PT1000s_Channels* pVal1, const PT1000s_Channels* pVal2);

void PT1000s_Channels_Initialize(PT1000s_Channels* pVal);

#define ERR_PT1000S_CHANNELS		1128  /**/
#define ERR_PT1000S_CHANNELS_ELM_2		1121  /**/
flag PT1000s_Channels_IsConstraintValid(const PT1000s_Channels* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_CHANNELS		1129  /**/
#define ERR_UPER_ENCODE_PT1000S_CHANNELS_ELM_2		1122  /**/
#define PT1000s_Channels_REQUIRED_BYTES_FOR_ENCODING       28 
#define PT1000s_Channels_REQUIRED_BITS_FOR_ENCODING        224

flag PT1000s_Channels_Encode(const PT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_CHANNELS		1130  /**/
#define ERR_UPER_DECODE_PT1000S_CHANNELS_ELM_2		1123  /**/
flag PT1000s_Channels_Decode(PT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_CHANNELS		1131  /**/
#define ERR_ACN_ENCODE_PT1000S_CHANNELS_ELM_2		1124  /**/
#define PT1000s_Channels_REQUIRED_BYTES_FOR_ACN_ENCODING       28 
#define PT1000s_Channels_REQUIRED_BITS_FOR_ACN_ENCODING        224

flag PT1000s_Channels_ACN_Encode(const PT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_CHANNELS		1132  /**/
#define ERR_ACN_DECODE_PT1000S_CHANNELS_ELM_2		1125  /**/
flag PT1000s_Channels_ACN_Decode(PT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PS_Processed_Data --------------------------------------------*/
typedef struct {
    T_Int32 pressure;
    T_Int32 temp;

} PS_Processed_Data;

flag PS_Processed_Data_Equal(const PS_Processed_Data* pVal1, const PS_Processed_Data* pVal2);

void PS_Processed_Data_Initialize(PS_Processed_Data* pVal);

#define ERR_PS_PROCESSED_DATA		1541  /**/
#define ERR_PS_PROCESSED_DATA_PRESSURE_2		1520  /**/
#define ERR_PS_PROCESSED_DATA_TEMP_2		1534  /**/
flag PS_Processed_Data_IsConstraintValid(const PS_Processed_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_PROCESSED_DATA		1542  /**/
#define ERR_UPER_ENCODE_PS_PROCESSED_DATA_PRESSURE_2		1521  /**/
#define ERR_UPER_ENCODE_PS_PROCESSED_DATA_TEMP_2		1535  /**/
#define PS_Processed_Data_REQUIRED_BYTES_FOR_ENCODING       8 
#define PS_Processed_Data_REQUIRED_BITS_FOR_ENCODING        64

flag PS_Processed_Data_Encode(const PS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_PROCESSED_DATA		1543  /**/
#define ERR_UPER_DECODE_PS_PROCESSED_DATA_PRESSURE_2		1522  /**/
#define ERR_UPER_DECODE_PS_PROCESSED_DATA_TEMP_2		1536  /**/
flag PS_Processed_Data_Decode(PS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_PROCESSED_DATA		1544  /**/
#define ERR_ACN_ENCODE_PS_PROCESSED_DATA_PRESSURE_2		1523  /**/
#define ERR_ACN_ENCODE_PS_PROCESSED_DATA_TEMP_2		1537  /**/
#define PS_Processed_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define PS_Processed_Data_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag PS_Processed_Data_ACN_Encode(const PS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_PROCESSED_DATA		1545  /**/
#define ERR_ACN_DECODE_PS_PROCESSED_DATA_PRESSURE_2		1524  /**/
#define ERR_ACN_DECODE_PS_PROCESSED_DATA_TEMP_2		1538  /**/
flag PS_Processed_Data_ACN_Decode(PS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- TM --------------------------------------------*/
/*-- TM_imu --------------------------------------------*/
typedef struct {
    MGT_MilliGauss_Data mgt_mgauss;
    ACC_MilliG_Data accel_mg;
    GYRO_MilliDPS_Data gyro_mdps;
    T_Float temp_celsius;
    Content_Validity mgt_valid;
    Content_Validity acc_valid;
    Content_Validity gyro_valid;
    Content_Validity temp_valid;

} TM_imu;
typedef struct {
    HTL_State state_htl;
    Heater_Data heater1;
    Heater_Data heater2;
    TC74s_All_Data tc74s;
    PT1000s_All_Data pt1000s;
    GPS_PVT gps;
    TM_imu imu;
    PS_Processed_Data ps1;
    PS_Processed_Data ps2;
    Content_Validity ps1_validity;
    Content_Validity ps2_validity;
    T_UInt64 anemometer;

} TM;

flag TM_imu_Equal(const TM_imu* pVal1, const TM_imu* pVal2);

flag TM_Equal(const TM* pVal1, const TM* pVal2);

void TM_imu_Initialize(TM_imu* pVal);
void TM_Initialize(TM* pVal);

#define ERR_TM		6497  /**/
#define ERR_TM_STATE_HTL_2		5657  /**/
#define ERR_TM_HEATER1_2		5699  /**/
#define ERR_TM_HEATER2_2		5741  /**/
#define ERR_TM_TC74S_2		5790  /**/
#define ERR_TM_PT1000S_2		5902  /**/
#define ERR_TM_GPS_2		6119  /**/
#define ERR_TM_IMU		6364  /**/
#define ERR_TM_IMU_MGT_MGAUSS_2		6175  /**/
#define ERR_TM_IMU_ACCEL_MG_2		6231  /**/
#define ERR_TM_IMU_GYRO_MDPS_2		6287  /**/
#define ERR_TM_IMU_TEMP_CELSIUS_2		6301  /**/
#define ERR_TM_IMU_MGT_VALID_2		6315  /**/
#define ERR_TM_IMU_ACC_VALID_2		6329  /**/
#define ERR_TM_IMU_GYRO_VALID_2		6343  /**/
#define ERR_TM_IMU_TEMP_VALID_2		6357  /**/
#define ERR_TM_PS1_2		6406  /**/
#define ERR_TM_PS2_2		6448  /**/
#define ERR_TM_PS1_VALIDITY_2		6462  /**/
#define ERR_TM_PS2_VALIDITY_2		6476  /**/
#define ERR_TM_ANEMOMETER_2		6490  /**/
flag TM_IsConstraintValid(const TM* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM		6498  /**/
#define ERR_UPER_ENCODE_TM_STATE_HTL_2		5658  /**/
#define ERR_UPER_ENCODE_TM_HEATER1_2		5700  /**/
#define ERR_UPER_ENCODE_TM_HEATER2_2		5742  /**/
#define ERR_UPER_ENCODE_TM_TC74S_2		5791  /**/
#define ERR_UPER_ENCODE_TM_PT1000S_2		5903  /**/
#define ERR_UPER_ENCODE_TM_GPS_2		6120  /**/
#define ERR_UPER_ENCODE_TM_IMU		6365  /**/
#define ERR_UPER_ENCODE_TM_IMU_MGT_MGAUSS_2		6176  /**/
#define ERR_UPER_ENCODE_TM_IMU_ACCEL_MG_2		6232  /**/
#define ERR_UPER_ENCODE_TM_IMU_GYRO_MDPS_2		6288  /**/
#define ERR_UPER_ENCODE_TM_IMU_TEMP_CELSIUS_2		6302  /**/
#define ERR_UPER_ENCODE_TM_IMU_MGT_VALID_2		6316  /**/
#define ERR_UPER_ENCODE_TM_IMU_ACC_VALID_2		6330  /**/
#define ERR_UPER_ENCODE_TM_IMU_GYRO_VALID_2		6344  /**/
#define ERR_UPER_ENCODE_TM_IMU_TEMP_VALID_2		6358  /**/
#define ERR_UPER_ENCODE_TM_PS1_2		6407  /**/
#define ERR_UPER_ENCODE_TM_PS2_2		6449  /**/
#define ERR_UPER_ENCODE_TM_PS1_VALIDITY_2		6463  /**/
#define ERR_UPER_ENCODE_TM_PS2_VALIDITY_2		6477  /**/
#define ERR_UPER_ENCODE_TM_ANEMOMETER_2		6491  /**/
#define TM_REQUIRED_BYTES_FOR_ENCODING       704 
#define TM_REQUIRED_BITS_FOR_ENCODING        5625

flag TM_Encode(const TM* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM		6499  /**/
#define ERR_UPER_DECODE_TM_STATE_HTL_2		5659  /**/
#define ERR_UPER_DECODE_TM_HEATER1_2		5701  /**/
#define ERR_UPER_DECODE_TM_HEATER2_2		5743  /**/
#define ERR_UPER_DECODE_TM_TC74S_2		5792  /**/
#define ERR_UPER_DECODE_TM_PT1000S_2		5904  /**/
#define ERR_UPER_DECODE_TM_GPS_2		6121  /**/
#define ERR_UPER_DECODE_TM_IMU		6366  /**/
#define ERR_UPER_DECODE_TM_IMU_MGT_MGAUSS_2		6177  /**/
#define ERR_UPER_DECODE_TM_IMU_ACCEL_MG_2		6233  /**/
#define ERR_UPER_DECODE_TM_IMU_GYRO_MDPS_2		6289  /**/
#define ERR_UPER_DECODE_TM_IMU_TEMP_CELSIUS_2		6303  /**/
#define ERR_UPER_DECODE_TM_IMU_MGT_VALID_2		6317  /**/
#define ERR_UPER_DECODE_TM_IMU_ACC_VALID_2		6331  /**/
#define ERR_UPER_DECODE_TM_IMU_GYRO_VALID_2		6345  /**/
#define ERR_UPER_DECODE_TM_IMU_TEMP_VALID_2		6359  /**/
#define ERR_UPER_DECODE_TM_PS1_2		6408  /**/
#define ERR_UPER_DECODE_TM_PS2_2		6450  /**/
#define ERR_UPER_DECODE_TM_PS1_VALIDITY_2		6464  /**/
#define ERR_UPER_DECODE_TM_PS2_VALIDITY_2		6478  /**/
#define ERR_UPER_DECODE_TM_ANEMOMETER_2		6492  /**/
flag TM_Decode(TM* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TM		6500  /**/
#define ERR_ACN_ENCODE_TM_STATE_HTL_2		5660  /**/
#define ERR_ACN_ENCODE_TM_HEATER1_2		5702  /**/
#define ERR_ACN_ENCODE_TM_HEATER2_2		5744  /**/
#define ERR_ACN_ENCODE_TM_TC74S_2		5793  /**/
#define ERR_ACN_ENCODE_TM_PT1000S_2		5905  /**/
#define ERR_ACN_ENCODE_TM_GPS_2		6122  /**/
#define ERR_ACN_ENCODE_TM_IMU		6367  /**/
#define ERR_ACN_ENCODE_TM_IMU_MGT_MGAUSS_2		6178  /**/
#define ERR_ACN_ENCODE_TM_IMU_ACCEL_MG_2		6234  /**/
#define ERR_ACN_ENCODE_TM_IMU_GYRO_MDPS_2		6290  /**/
#define ERR_ACN_ENCODE_TM_IMU_TEMP_CELSIUS_2		6304  /**/
#define ERR_ACN_ENCODE_TM_IMU_MGT_VALID_2		6318  /**/
#define ERR_ACN_ENCODE_TM_IMU_ACC_VALID_2		6332  /**/
#define ERR_ACN_ENCODE_TM_IMU_GYRO_VALID_2		6346  /**/
#define ERR_ACN_ENCODE_TM_IMU_TEMP_VALID_2		6360  /**/
#define ERR_ACN_ENCODE_TM_PS1_2		6409  /**/
#define ERR_ACN_ENCODE_TM_PS2_2		6451  /**/
#define ERR_ACN_ENCODE_TM_PS1_VALIDITY_2		6465  /**/
#define ERR_ACN_ENCODE_TM_PS2_VALIDITY_2		6479  /**/
#define ERR_ACN_ENCODE_TM_ANEMOMETER_2		6493  /**/
#define TM_REQUIRED_BYTES_FOR_ACN_ENCODING       704 
#define TM_REQUIRED_BITS_FOR_ACN_ENCODING        5625

flag TM_ACN_Encode(const TM* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TM		6501  /**/
#define ERR_ACN_DECODE_TM_STATE_HTL_2		5661  /**/
#define ERR_ACN_DECODE_TM_HEATER1_2		5703  /**/
#define ERR_ACN_DECODE_TM_HEATER2_2		5745  /**/
#define ERR_ACN_DECODE_TM_TC74S_2		5794  /**/
#define ERR_ACN_DECODE_TM_PT1000S_2		5906  /**/
#define ERR_ACN_DECODE_TM_GPS_2		6123  /**/
#define ERR_ACN_DECODE_TM_IMU		6368  /**/
#define ERR_ACN_DECODE_TM_IMU_MGT_MGAUSS_2		6179  /**/
#define ERR_ACN_DECODE_TM_IMU_ACCEL_MG_2		6235  /**/
#define ERR_ACN_DECODE_TM_IMU_GYRO_MDPS_2		6291  /**/
#define ERR_ACN_DECODE_TM_IMU_TEMP_CELSIUS_2		6305  /**/
#define ERR_ACN_DECODE_TM_IMU_MGT_VALID_2		6319  /**/
#define ERR_ACN_DECODE_TM_IMU_ACC_VALID_2		6333  /**/
#define ERR_ACN_DECODE_TM_IMU_GYRO_VALID_2		6347  /**/
#define ERR_ACN_DECODE_TM_IMU_TEMP_VALID_2		6361  /**/
#define ERR_ACN_DECODE_TM_PS1_2		6410  /**/
#define ERR_ACN_DECODE_TM_PS2_2		6452  /**/
#define ERR_ACN_DECODE_TM_PS1_VALIDITY_2		6466  /**/
#define ERR_ACN_DECODE_TM_PS2_VALIDITY_2		6480  /**/
#define ERR_ACN_DECODE_TM_ANEMOMETER_2		6494  /**/
flag TM_ACN_Decode(TM* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Date_Time --------------------------------------------*/
typedef struct {
    T_Int32 day;
    T_Int32 month;
    T_Int32 year;
    T_Int32 hour;
    T_Int32 minute;
    T_Int32 second;

} Date_Time;

flag Date_Time_Equal(const Date_Time* pVal1, const Date_Time* pVal2);

void Date_Time_Initialize(Date_Time* pVal);

#define ERR_DATE_TIME		7043  /**/
#define ERR_DATE_TIME_DAY_2		6966  /**/
#define ERR_DATE_TIME_MONTH_2		6980  /**/
#define ERR_DATE_TIME_YEAR_2		6994  /**/
#define ERR_DATE_TIME_HOUR_2		7008  /**/
#define ERR_DATE_TIME_MINUTE_2		7022  /**/
#define ERR_DATE_TIME_SECOND_2		7036  /**/
flag Date_Time_IsConstraintValid(const Date_Time* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DATE_TIME		7044  /**/
#define ERR_UPER_ENCODE_DATE_TIME_DAY_2		6967  /**/
#define ERR_UPER_ENCODE_DATE_TIME_MONTH_2		6981  /**/
#define ERR_UPER_ENCODE_DATE_TIME_YEAR_2		6995  /**/
#define ERR_UPER_ENCODE_DATE_TIME_HOUR_2		7009  /**/
#define ERR_UPER_ENCODE_DATE_TIME_MINUTE_2		7023  /**/
#define ERR_UPER_ENCODE_DATE_TIME_SECOND_2		7037  /**/
#define Date_Time_REQUIRED_BYTES_FOR_ENCODING       24 
#define Date_Time_REQUIRED_BITS_FOR_ENCODING        192

flag Date_Time_Encode(const Date_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DATE_TIME		7045  /**/
#define ERR_UPER_DECODE_DATE_TIME_DAY_2		6968  /**/
#define ERR_UPER_DECODE_DATE_TIME_MONTH_2		6982  /**/
#define ERR_UPER_DECODE_DATE_TIME_YEAR_2		6996  /**/
#define ERR_UPER_DECODE_DATE_TIME_HOUR_2		7010  /**/
#define ERR_UPER_DECODE_DATE_TIME_MINUTE_2		7024  /**/
#define ERR_UPER_DECODE_DATE_TIME_SECOND_2		7038  /**/
flag Date_Time_Decode(Date_Time* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DATE_TIME		7046  /**/
#define ERR_ACN_ENCODE_DATE_TIME_DAY_2		6969  /**/
#define ERR_ACN_ENCODE_DATE_TIME_MONTH_2		6983  /**/
#define ERR_ACN_ENCODE_DATE_TIME_YEAR_2		6997  /**/
#define ERR_ACN_ENCODE_DATE_TIME_HOUR_2		7011  /**/
#define ERR_ACN_ENCODE_DATE_TIME_MINUTE_2		7025  /**/
#define ERR_ACN_ENCODE_DATE_TIME_SECOND_2		7039  /**/
#define Date_Time_REQUIRED_BYTES_FOR_ACN_ENCODING       24 
#define Date_Time_REQUIRED_BITS_FOR_ACN_ENCODING        192

flag Date_Time_ACN_Encode(const Date_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DATE_TIME		7047  /**/
#define ERR_ACN_DECODE_DATE_TIME_DAY_2		6970  /**/
#define ERR_ACN_DECODE_DATE_TIME_MONTH_2		6984  /**/
#define ERR_ACN_DECODE_DATE_TIME_YEAR_2		6998  /**/
#define ERR_ACN_DECODE_DATE_TIME_HOUR_2		7012  /**/
#define ERR_ACN_DECODE_DATE_TIME_MINUTE_2		7026  /**/
#define ERR_ACN_DECODE_DATE_TIME_SECOND_2		7040  /**/
flag Date_Time_ACN_Decode(Date_Time* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- ATT_GUI --------------------------------------------*/
/*-- ATT_GUI_imu --------------------------------------------*/
typedef struct {
    MGT_MilliGauss_Data mgt_mgauss;
    ACC_MilliG_Data accel_mg;
    GYRO_MilliDPS_Data gyro_mdps;
    T_Float temp_celsius;
    Content_Validity mgt_valid;
    Content_Validity acc_valid;
    Content_Validity gyro_valid;
    Content_Validity temp_valid;

} ATT_GUI_imu;
typedef struct {
    GPS_PVT gps;
    Date_Time gps_date_time;
    ATT_GUI_imu imu;

} ATT_GUI;

flag ATT_GUI_imu_Equal(const ATT_GUI_imu* pVal1, const ATT_GUI_imu* pVal2);

flag ATT_GUI_Equal(const ATT_GUI* pVal1, const ATT_GUI* pVal2);

void ATT_GUI_imu_Initialize(ATT_GUI_imu* pVal);
void ATT_GUI_Initialize(ATT_GUI* pVal);

#define ERR_ATT_GUI		7610  /**/
#define ERR_ATT_GUI_GPS_2		7260  /**/
#define ERR_ATT_GUI_GPS_DATE_TIME_2		7358  /**/
#define ERR_ATT_GUI_IMU		7603  /**/
#define ERR_ATT_GUI_IMU_MGT_MGAUSS_2		7414  /**/
#define ERR_ATT_GUI_IMU_ACCEL_MG_2		7470  /**/
#define ERR_ATT_GUI_IMU_GYRO_MDPS_2		7526  /**/
#define ERR_ATT_GUI_IMU_TEMP_CELSIUS_2		7540  /**/
#define ERR_ATT_GUI_IMU_MGT_VALID_2		7554  /**/
#define ERR_ATT_GUI_IMU_ACC_VALID_2		7568  /**/
#define ERR_ATT_GUI_IMU_GYRO_VALID_2		7582  /**/
#define ERR_ATT_GUI_IMU_TEMP_VALID_2		7596  /**/
flag ATT_GUI_IsConstraintValid(const ATT_GUI* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ATT_GUI		7611  /**/
#define ERR_UPER_ENCODE_ATT_GUI_GPS_2		7261  /**/
#define ERR_UPER_ENCODE_ATT_GUI_GPS_DATE_TIME_2		7359  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU		7604  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_MGT_MGAUSS_2		7415  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_ACCEL_MG_2		7471  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_GYRO_MDPS_2		7527  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_TEMP_CELSIUS_2		7541  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_MGT_VALID_2		7555  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_ACC_VALID_2		7569  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_GYRO_VALID_2		7583  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_TEMP_VALID_2		7597  /**/
#define ATT_GUI_REQUIRED_BYTES_FOR_ENCODING       337 
#define ATT_GUI_REQUIRED_BITS_FOR_ENCODING        2694

flag ATT_GUI_Encode(const ATT_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ATT_GUI		7612  /**/
#define ERR_UPER_DECODE_ATT_GUI_GPS_2		7262  /**/
#define ERR_UPER_DECODE_ATT_GUI_GPS_DATE_TIME_2		7360  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU		7605  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_MGT_MGAUSS_2		7416  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_ACCEL_MG_2		7472  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_GYRO_MDPS_2		7528  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_TEMP_CELSIUS_2		7542  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_MGT_VALID_2		7556  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_ACC_VALID_2		7570  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_GYRO_VALID_2		7584  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_TEMP_VALID_2		7598  /**/
flag ATT_GUI_Decode(ATT_GUI* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ATT_GUI		7613  /**/
#define ERR_ACN_ENCODE_ATT_GUI_GPS_2		7263  /**/
#define ERR_ACN_ENCODE_ATT_GUI_GPS_DATE_TIME_2		7361  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU		7606  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_MGT_MGAUSS_2		7417  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_ACCEL_MG_2		7473  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_GYRO_MDPS_2		7529  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_TEMP_CELSIUS_2		7543  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_MGT_VALID_2		7557  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_ACC_VALID_2		7571  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_GYRO_VALID_2		7585  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_TEMP_VALID_2		7599  /**/
#define ATT_GUI_REQUIRED_BYTES_FOR_ACN_ENCODING       337 
#define ATT_GUI_REQUIRED_BITS_FOR_ACN_ENCODING        2694

flag ATT_GUI_ACN_Encode(const ATT_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ATT_GUI		7614  /**/
#define ERR_ACN_DECODE_ATT_GUI_GPS_2		7264  /**/
#define ERR_ACN_DECODE_ATT_GUI_GPS_DATE_TIME_2		7362  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU		7607  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_MGT_MGAUSS_2		7418  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_ACCEL_MG_2		7474  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_GYRO_MDPS_2		7530  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_TEMP_CELSIUS_2		7544  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_MGT_VALID_2		7558  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_ACC_VALID_2		7572  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_GYRO_VALID_2		7586  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_TEMP_VALID_2		7600  /**/
flag ATT_GUI_ACN_Decode(ATT_GUI* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt32;


flag T_UInt32_Equal(const T_UInt32* pVal1, const T_UInt32* pVal2);

void T_UInt32_Initialize(T_UInt32* pVal);

#define ERR_T_UINT32		7883  /**/
flag T_UInt32_IsConstraintValid(const T_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT32		7884  /**/
#define T_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag T_UInt32_Encode(const T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		7885  /**/
flag T_UInt32_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		7886  /**/
#define T_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag T_UInt32_ACN_Encode(const T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		7887  /**/
flag T_UInt32_ACN_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PS_Raw_Data --------------------------------------------*/
typedef struct {
    T_UInt32 d1;
    T_UInt32 d2;

} PS_Raw_Data;

flag PS_Raw_Data_Equal(const PS_Raw_Data* pVal1, const PS_Raw_Data* pVal2);

void PS_Raw_Data_Initialize(PS_Raw_Data* pVal);

#define ERR_PS_RAW_DATA		1506  /**/
#define ERR_PS_RAW_DATA_D1_2		1485  /**/
#define ERR_PS_RAW_DATA_D2_2		1499  /**/
flag PS_Raw_Data_IsConstraintValid(const PS_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_RAW_DATA		1507  /**/
#define ERR_UPER_ENCODE_PS_RAW_DATA_D1_2		1486  /**/
#define ERR_UPER_ENCODE_PS_RAW_DATA_D2_2		1500  /**/
#define PS_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       8 
#define PS_Raw_Data_REQUIRED_BITS_FOR_ENCODING        64

flag PS_Raw_Data_Encode(const PS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_RAW_DATA		1508  /**/
#define ERR_UPER_DECODE_PS_RAW_DATA_D1_2		1487  /**/
#define ERR_UPER_DECODE_PS_RAW_DATA_D2_2		1501  /**/
flag PS_Raw_Data_Decode(PS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_RAW_DATA		1509  /**/
#define ERR_ACN_ENCODE_PS_RAW_DATA_D1_2		1488  /**/
#define ERR_ACN_ENCODE_PS_RAW_DATA_D2_2		1502  /**/
#define PS_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define PS_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag PS_Raw_Data_ACN_Encode(const PS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_RAW_DATA		1510  /**/
#define ERR_ACN_DECODE_PS_RAW_DATA_D1_2		1489  /**/
#define ERR_ACN_DECODE_PS_RAW_DATA_D2_2		1503  /**/
flag PS_Raw_Data_ACN_Decode(PS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PS_All_Data --------------------------------------------*/
typedef struct {
    PS_Calibration_Data calib;
    PS_Raw_Data raw;
    PS_Processed_Data processed;
    Content_Validity validity;

    struct {
        unsigned int calib:1;
    } exist;

} PS_All_Data;

flag PS_All_Data_Equal(const PS_All_Data* pVal1, const PS_All_Data* pVal2);

void PS_All_Data_Initialize(PS_All_Data* pVal);

#define ERR_PS_ALL_DATA		1828  /**/
#define ERR_PS_ALL_DATA_CALIB_2		1723  /**/
#define ERR_PS_ALL_DATA_RAW_2		1765  /**/
#define ERR_PS_ALL_DATA_PROCESSED_2		1807  /**/
#define ERR_PS_ALL_DATA_VALIDITY_2		1821  /**/
flag PS_All_Data_IsConstraintValid(const PS_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_ALL_DATA		1829  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_CALIB_2		1724  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_RAW_2		1766  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_PROCESSED_2		1808  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_VALIDITY_2		1822  /**/
#define PS_All_Data_REQUIRED_BYTES_FOR_ENCODING       107 
#define PS_All_Data_REQUIRED_BITS_FOR_ENCODING        850

flag PS_All_Data_Encode(const PS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_ALL_DATA		1830  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_CALIB_2		1725  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_RAW_2		1767  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_PROCESSED_2		1809  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_VALIDITY_2		1823  /**/
flag PS_All_Data_Decode(PS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_ALL_DATA		1831  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_CALIB_2		1726  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_RAW_2		1768  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_PROCESSED_2		1810  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_VALIDITY_2		1824  /**/
#define PS_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       107 
#define PS_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        850

flag PS_All_Data_ACN_Encode(const PS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_ALL_DATA		1832  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_CALIB_2		1727  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_RAW_2		1769  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_PROCESSED_2		1811  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_VALIDITY_2		1825  /**/
flag PS_All_Data_ACN_Decode(PS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- OBSW_DP_Data --------------------------------------------*/
/*-- OBSW_DP_Data_gps --------------------------------------------*/
typedef struct {
    GPS_PVT data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_gps;
/*-- OBSW_DP_Data_imu --------------------------------------------*/
typedef struct {
    IMU_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_imu;
/*-- OBSW_DP_Data_tc74s --------------------------------------------*/
typedef struct {
    TC74s_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_tc74s;
/*-- OBSW_DP_Data_pt1000s --------------------------------------------*/
typedef struct {
    PT1000s_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_pt1000s;
/*-- OBSW_DP_Data_ps1 --------------------------------------------*/
typedef struct {
    PS_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_ps1;
/*-- OBSW_DP_Data_ps2 --------------------------------------------*/
typedef struct {
    PS_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_ps2;
/*-- OBSW_DP_Data_heater1 --------------------------------------------*/
typedef struct {
    Heater_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_heater1;
/*-- OBSW_DP_Data_heater2 --------------------------------------------*/
typedef struct {
    Heater_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_heater2;
/*-- OBSW_DP_Data_anemometer --------------------------------------------*/
typedef struct {
    T_UInt64 data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_anemometer;
typedef struct {
    OBSW_DP_Data_gps gps;
    OBSW_DP_Data_imu imu;
    OBSW_DP_Data_tc74s tc74s;
    OBSW_DP_Data_pt1000s pt1000s;
    OBSW_DP_Data_ps1 ps1;
    OBSW_DP_Data_ps2 ps2;
    OBSW_DP_Data_heater1 heater1;
    OBSW_DP_Data_heater2 heater2;
    OBSW_DP_Data_anemometer anemometer;

    struct {
        unsigned int gps:1;
        unsigned int imu:1;
        unsigned int tc74s:1;
        unsigned int pt1000s:1;
        unsigned int ps1:1;
        unsigned int ps2:1;
        unsigned int heater1:1;
        unsigned int heater2:1;
        unsigned int anemometer:1;
    } exist;

} OBSW_DP_Data;

flag OBSW_DP_Data_gps_Equal(const OBSW_DP_Data_gps* pVal1, const OBSW_DP_Data_gps* pVal2);

flag OBSW_DP_Data_imu_Equal(const OBSW_DP_Data_imu* pVal1, const OBSW_DP_Data_imu* pVal2);

flag OBSW_DP_Data_tc74s_Equal(const OBSW_DP_Data_tc74s* pVal1, const OBSW_DP_Data_tc74s* pVal2);

flag OBSW_DP_Data_pt1000s_Equal(const OBSW_DP_Data_pt1000s* pVal1, const OBSW_DP_Data_pt1000s* pVal2);

flag OBSW_DP_Data_ps1_Equal(const OBSW_DP_Data_ps1* pVal1, const OBSW_DP_Data_ps1* pVal2);

flag OBSW_DP_Data_ps2_Equal(const OBSW_DP_Data_ps2* pVal1, const OBSW_DP_Data_ps2* pVal2);

flag OBSW_DP_Data_heater1_Equal(const OBSW_DP_Data_heater1* pVal1, const OBSW_DP_Data_heater1* pVal2);

flag OBSW_DP_Data_heater2_Equal(const OBSW_DP_Data_heater2* pVal1, const OBSW_DP_Data_heater2* pVal2);

flag OBSW_DP_Data_anemometer_Equal(const OBSW_DP_Data_anemometer* pVal1, const OBSW_DP_Data_anemometer* pVal2);

flag OBSW_DP_Data_Equal(const OBSW_DP_Data* pVal1, const OBSW_DP_Data* pVal2);

void OBSW_DP_Data_gps_Initialize(OBSW_DP_Data_gps* pVal);
void OBSW_DP_Data_imu_Initialize(OBSW_DP_Data_imu* pVal);
void OBSW_DP_Data_tc74s_Initialize(OBSW_DP_Data_tc74s* pVal);
void OBSW_DP_Data_pt1000s_Initialize(OBSW_DP_Data_pt1000s* pVal);
void OBSW_DP_Data_ps1_Initialize(OBSW_DP_Data_ps1* pVal);
void OBSW_DP_Data_ps2_Initialize(OBSW_DP_Data_ps2* pVal);
void OBSW_DP_Data_heater1_Initialize(OBSW_DP_Data_heater1* pVal);
void OBSW_DP_Data_heater2_Initialize(OBSW_DP_Data_heater2* pVal);
void OBSW_DP_Data_anemometer_Initialize(OBSW_DP_Data_anemometer* pVal);
void OBSW_DP_Data_Initialize(OBSW_DP_Data* pVal);

#define ERR_OBSW_DP_DATA		3816  /**/
#define ERR_OBSW_DP_DATA_GPS		2248  /**/
#define ERR_OBSW_DP_DATA_GPS_DATA_2		2213  /**/
#define ERR_OBSW_DP_DATA_GPS_GPS_TIME_2		2227  /**/
#define ERR_OBSW_DP_DATA_GPS_MISSION_TIME_2		2241  /**/
#define ERR_OBSW_DP_DATA_IMU		2717  /**/
#define ERR_OBSW_DP_DATA_IMU_DATA_2		2682  /**/
#define ERR_OBSW_DP_DATA_IMU_GPS_TIME_2		2696  /**/
#define ERR_OBSW_DP_DATA_IMU_MISSION_TIME_2		2710  /**/
#define ERR_OBSW_DP_DATA_TC74S		2801  /**/
#define ERR_OBSW_DP_DATA_TC74S_DATA_2		2766  /**/
#define ERR_OBSW_DP_DATA_TC74S_GPS_TIME_2		2780  /**/
#define ERR_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2794  /**/
#define ERR_OBSW_DP_DATA_PT1000S		2948  /**/
#define ERR_OBSW_DP_DATA_PT1000S_DATA_2		2913  /**/
#define ERR_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2927  /**/
#define ERR_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2941  /**/
#define ERR_OBSW_DP_DATA_PS1		3277  /**/
#define ERR_OBSW_DP_DATA_PS1_DATA_2		3242  /**/
#define ERR_OBSW_DP_DATA_PS1_GPS_TIME_2		3256  /**/
#define ERR_OBSW_DP_DATA_PS1_MISSION_TIME_2		3270  /**/
#define ERR_OBSW_DP_DATA_PS2		3606  /**/
#define ERR_OBSW_DP_DATA_PS2_DATA_2		3571  /**/
#define ERR_OBSW_DP_DATA_PS2_GPS_TIME_2		3585  /**/
#define ERR_OBSW_DP_DATA_PS2_MISSION_TIME_2		3599  /**/
#define ERR_OBSW_DP_DATA_HEATER1		3683  /**/
#define ERR_OBSW_DP_DATA_HEATER1_DATA_2		3648  /**/
#define ERR_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3662  /**/
#define ERR_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3676  /**/
#define ERR_OBSW_DP_DATA_HEATER2		3760  /**/
#define ERR_OBSW_DP_DATA_HEATER2_DATA_2		3725  /**/
#define ERR_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3739  /**/
#define ERR_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3753  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER		3809  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER_DATA_2		3774  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3788  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3802  /**/
flag OBSW_DP_Data_IsConstraintValid(const OBSW_DP_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_OBSW_DP_DATA		3817  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS		2249  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS_DATA_2		2214  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS_GPS_TIME_2		2228  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS_MISSION_TIME_2		2242  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU		2718  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU_DATA_2		2683  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU_GPS_TIME_2		2697  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU_MISSION_TIME_2		2711  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S		2802  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S_DATA_2		2767  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S_GPS_TIME_2		2781  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2795  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S		2949  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S_DATA_2		2914  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2928  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2942  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1		3278  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1_DATA_2		3243  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1_GPS_TIME_2		3257  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1_MISSION_TIME_2		3271  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2		3607  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2_DATA_2		3572  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2_GPS_TIME_2		3586  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2_MISSION_TIME_2		3600  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1		3684  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1_DATA_2		3649  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3663  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3677  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2		3761  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2_DATA_2		3726  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3740  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3754  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER		3810  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3775  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3789  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3803  /**/
#define OBSW_DP_Data_REQUIRED_BYTES_FOR_ENCODING       1155 
#define OBSW_DP_Data_REQUIRED_BITS_FOR_ENCODING        9233

flag OBSW_DP_Data_Encode(const OBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_OBSW_DP_DATA		3818  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS		2250  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS_DATA_2		2215  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS_GPS_TIME_2		2229  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS_MISSION_TIME_2		2243  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU		2719  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU_DATA_2		2684  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU_GPS_TIME_2		2698  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU_MISSION_TIME_2		2712  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S		2803  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S_DATA_2		2768  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S_GPS_TIME_2		2782  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2796  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S		2950  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S_DATA_2		2915  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2929  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2943  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1		3279  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1_DATA_2		3244  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1_GPS_TIME_2		3258  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1_MISSION_TIME_2		3272  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2		3608  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2_DATA_2		3573  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2_GPS_TIME_2		3587  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2_MISSION_TIME_2		3601  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1		3685  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1_DATA_2		3650  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3664  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3678  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2		3762  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2_DATA_2		3727  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3741  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3755  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER		3811  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3776  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3790  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3804  /**/
flag OBSW_DP_Data_Decode(OBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_OBSW_DP_DATA		3819  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS		2251  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS_DATA_2		2216  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS_GPS_TIME_2		2230  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS_MISSION_TIME_2		2244  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU		2720  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU_DATA_2		2685  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU_GPS_TIME_2		2699  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU_MISSION_TIME_2		2713  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S		2804  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S_DATA_2		2769  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S_GPS_TIME_2		2783  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2797  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S		2951  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S_DATA_2		2916  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2930  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2944  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1		3280  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1_DATA_2		3245  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1_GPS_TIME_2		3259  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1_MISSION_TIME_2		3273  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2		3609  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2_DATA_2		3574  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2_GPS_TIME_2		3588  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2_MISSION_TIME_2		3602  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1		3686  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1_DATA_2		3651  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3665  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3679  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2		3763  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2_DATA_2		3728  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3742  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3756  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER		3812  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3777  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3791  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3805  /**/
#define OBSW_DP_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       1155 
#define OBSW_DP_Data_REQUIRED_BITS_FOR_ACN_ENCODING        9233

flag OBSW_DP_Data_ACN_Encode(const OBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_OBSW_DP_DATA		3820  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS		2252  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS_DATA_2		2217  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS_GPS_TIME_2		2231  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS_MISSION_TIME_2		2245  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU		2721  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU_DATA_2		2686  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU_GPS_TIME_2		2700  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU_MISSION_TIME_2		2714  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S		2805  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S_DATA_2		2770  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S_GPS_TIME_2		2784  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2798  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S		2952  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S_DATA_2		2917  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2931  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2945  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1		3281  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1_DATA_2		3246  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1_GPS_TIME_2		3260  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1_MISSION_TIME_2		3274  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2		3610  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2_DATA_2		3575  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2_GPS_TIME_2		3589  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2_MISSION_TIME_2		3603  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1		3687  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1_DATA_2		3652  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3666  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3680  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2		3764  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2_DATA_2		3729  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3743  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3757  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER		3813  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3778  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3792  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3806  /**/
flag OBSW_DP_Data_ACN_Decode(OBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- OBSW_DP_SingleData --------------------------------------------*/
/*-- OBSW_DP_SingleData_gps --------------------------------------------*/
typedef struct {
    GPS_PVT data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_gps;
/*-- OBSW_DP_SingleData_imu --------------------------------------------*/
typedef struct {
    IMU_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_imu;
/*-- OBSW_DP_SingleData_tc74s --------------------------------------------*/
typedef struct {
    TC74s_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_tc74s;
/*-- OBSW_DP_SingleData_pt1000s --------------------------------------------*/
typedef struct {
    PT1000s_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_pt1000s;
/*-- OBSW_DP_SingleData_ps1 --------------------------------------------*/
typedef struct {
    PS_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_ps1;
/*-- OBSW_DP_SingleData_ps2 --------------------------------------------*/
typedef struct {
    PS_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_ps2;
/*-- OBSW_DP_SingleData_heater1 --------------------------------------------*/
typedef struct {
    Heater_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_heater1;
/*-- OBSW_DP_SingleData_heater2 --------------------------------------------*/
typedef struct {
    Heater_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_heater2;
/*-- OBSW_DP_SingleData_anemometer --------------------------------------------*/
typedef struct {
    T_UInt64 data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_anemometer;

typedef enum {
    OBSW_DP_SingleData_NONE,
    gps_PRESENT,
    imu_PRESENT,
    tc74s_PRESENT,
    pt1000s_PRESENT,
    ps1_PRESENT,
    ps2_PRESENT,
    heater1_PRESENT,
    heater2_PRESENT,
    anemometer_PRESENT 
} OBSW_DP_SingleData_selection;


typedef struct {
    OBSW_DP_SingleData_selection kind;
    
    union {
        OBSW_DP_SingleData_gps gps;
        OBSW_DP_SingleData_imu imu;
        OBSW_DP_SingleData_tc74s tc74s;
        OBSW_DP_SingleData_pt1000s pt1000s;
        OBSW_DP_SingleData_ps1 ps1;
        OBSW_DP_SingleData_ps2 ps2;
        OBSW_DP_SingleData_heater1 heater1;
        OBSW_DP_SingleData_heater2 heater2;
        OBSW_DP_SingleData_anemometer anemometer;
    } u; 
} OBSW_DP_SingleData;

flag OBSW_DP_SingleData_gps_Equal(const OBSW_DP_SingleData_gps* pVal1, const OBSW_DP_SingleData_gps* pVal2);

flag OBSW_DP_SingleData_imu_Equal(const OBSW_DP_SingleData_imu* pVal1, const OBSW_DP_SingleData_imu* pVal2);

flag OBSW_DP_SingleData_tc74s_Equal(const OBSW_DP_SingleData_tc74s* pVal1, const OBSW_DP_SingleData_tc74s* pVal2);

flag OBSW_DP_SingleData_pt1000s_Equal(const OBSW_DP_SingleData_pt1000s* pVal1, const OBSW_DP_SingleData_pt1000s* pVal2);

flag OBSW_DP_SingleData_ps1_Equal(const OBSW_DP_SingleData_ps1* pVal1, const OBSW_DP_SingleData_ps1* pVal2);

flag OBSW_DP_SingleData_ps2_Equal(const OBSW_DP_SingleData_ps2* pVal1, const OBSW_DP_SingleData_ps2* pVal2);

flag OBSW_DP_SingleData_heater1_Equal(const OBSW_DP_SingleData_heater1* pVal1, const OBSW_DP_SingleData_heater1* pVal2);

flag OBSW_DP_SingleData_heater2_Equal(const OBSW_DP_SingleData_heater2* pVal1, const OBSW_DP_SingleData_heater2* pVal2);

flag OBSW_DP_SingleData_anemometer_Equal(const OBSW_DP_SingleData_anemometer* pVal1, const OBSW_DP_SingleData_anemometer* pVal2);

flag OBSW_DP_SingleData_Equal(const OBSW_DP_SingleData* pVal1, const OBSW_DP_SingleData* pVal2);

void OBSW_DP_SingleData_gps_Initialize(OBSW_DP_SingleData_gps* pVal);
void OBSW_DP_SingleData_imu_Initialize(OBSW_DP_SingleData_imu* pVal);
void OBSW_DP_SingleData_tc74s_Initialize(OBSW_DP_SingleData_tc74s* pVal);
void OBSW_DP_SingleData_pt1000s_Initialize(OBSW_DP_SingleData_pt1000s* pVal);
void OBSW_DP_SingleData_ps1_Initialize(OBSW_DP_SingleData_ps1* pVal);
void OBSW_DP_SingleData_ps2_Initialize(OBSW_DP_SingleData_ps2* pVal);
void OBSW_DP_SingleData_heater1_Initialize(OBSW_DP_SingleData_heater1* pVal);
void OBSW_DP_SingleData_heater2_Initialize(OBSW_DP_SingleData_heater2* pVal);
void OBSW_DP_SingleData_anemometer_Initialize(OBSW_DP_SingleData_anemometer* pVal);
void OBSW_DP_SingleData_Initialize(OBSW_DP_SingleData* pVal);

#define ERR_OBSW_DP_SINGLEDATA		5643  /**/
#define ERR_OBSW_DP_SINGLEDATA_GPS		4075  /**/
#define ERR_OBSW_DP_SINGLEDATA_GPS_DATA_2		4040  /**/
#define ERR_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4054  /**/
#define ERR_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4068  /**/
#define ERR_OBSW_DP_SINGLEDATA_IMU		4544  /**/
#define ERR_OBSW_DP_SINGLEDATA_IMU_DATA_2		4509  /**/
#define ERR_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4523  /**/
#define ERR_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4537  /**/
#define ERR_OBSW_DP_SINGLEDATA_TC74S		4628  /**/
#define ERR_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4593  /**/
#define ERR_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4607  /**/
#define ERR_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4621  /**/
#define ERR_OBSW_DP_SINGLEDATA_PT1000S		4775  /**/
#define ERR_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4740  /**/
#define ERR_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4754  /**/
#define ERR_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4768  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS1		5104  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS1_DATA_2		5069  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5083  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5097  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS2		5433  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS2_DATA_2		5398  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5412  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5426  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER1		5510  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5475  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5489  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5503  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER2		5587  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5552  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5566  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5580  /**/
#define ERR_OBSW_DP_SINGLEDATA_ANEMOMETER		5636  /**/
#define ERR_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5601  /**/
#define ERR_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5615  /**/
#define ERR_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5629  /**/
flag OBSW_DP_SingleData_IsConstraintValid(const OBSW_DP_SingleData* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA		5644  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_GPS		4076  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_GPS_DATA_2		4041  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4055  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4069  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_IMU		4545  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_IMU_DATA_2		4510  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4524  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4538  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_TC74S		4629  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4594  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4608  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4622  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PT1000S		4776  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4741  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4755  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4769  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS1		5105  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS1_DATA_2		5070  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5084  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5098  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS2		5434  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS2_DATA_2		5399  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5413  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5427  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER1		5511  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5476  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5490  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5504  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER2		5588  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5553  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5567  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5581  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER		5637  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5602  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5616  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5630  /**/
#define OBSW_DP_SingleData_REQUIRED_BYTES_FOR_ENCODING       301 
#define OBSW_DP_SingleData_REQUIRED_BITS_FOR_ENCODING        2403

flag OBSW_DP_SingleData_Encode(const OBSW_DP_SingleData* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA		5645  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_GPS		4077  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_GPS_DATA_2		4042  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4056  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4070  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_IMU		4546  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_IMU_DATA_2		4511  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4525  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4539  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_TC74S		4630  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4595  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4609  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4623  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PT1000S		4777  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4742  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4756  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4770  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS1		5106  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS1_DATA_2		5071  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5085  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5099  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS2		5435  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS2_DATA_2		5400  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5414  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5428  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER1		5512  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5477  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5491  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5505  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER2		5589  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5554  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5568  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5582  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER		5638  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5603  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5617  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5631  /**/
flag OBSW_DP_SingleData_Decode(OBSW_DP_SingleData* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA		5646  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_GPS		4078  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_GPS_DATA_2		4043  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4057  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4071  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_IMU		4547  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_IMU_DATA_2		4512  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4526  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4540  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_TC74S		4631  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4596  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4610  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4624  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PT1000S		4778  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4743  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4757  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4771  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS1		5107  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS1_DATA_2		5072  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5086  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5100  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS2		5436  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS2_DATA_2		5401  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5415  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5429  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER1		5513  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5478  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5492  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5506  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER2		5590  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5555  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5569  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5583  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER		5639  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5604  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5618  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5632  /**/
#define OBSW_DP_SingleData_REQUIRED_BYTES_FOR_ACN_ENCODING       301 
#define OBSW_DP_SingleData_REQUIRED_BITS_FOR_ACN_ENCODING        2403

flag OBSW_DP_SingleData_ACN_Encode(const OBSW_DP_SingleData* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA		5647  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_GPS		4079  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_GPS_DATA_2		4044  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4058  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4072  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_IMU		4548  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_IMU_DATA_2		4513  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4527  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4541  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_TC74S		4632  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4597  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4611  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4625  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PT1000S		4779  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4744  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4758  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4772  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS1		5108  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS1_DATA_2		5073  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5087  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5101  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS2		5437  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS2_DATA_2		5402  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5416  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5430  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER1		5514  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5479  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5493  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5507  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER2		5591  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5556  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5570  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5584  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER		5640  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5605  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5619  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5633  /**/
flag OBSW_DP_SingleData_ACN_Decode(OBSW_DP_SingleData* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- HTL_Config --------------------------------------------*/
typedef struct {
    T_Float press_5km;
    T_Float press_10km;
    T_Float press_18km;
    T_Double a1_duration_emergency_secs;
    T_Double a1_duration_max_secs;
    T_Double a2_duration_max_secs;
    T_UInt32 f1_duration_secs;
    T_UInt32 f2_duration_secs;

    struct {
        unsigned int press_5km:1;
        unsigned int press_10km:1;
        unsigned int press_18km:1;
        unsigned int a1_duration_emergency_secs:1;
        unsigned int a1_duration_max_secs:1;
        unsigned int a2_duration_max_secs:1;
        unsigned int f1_duration_secs:1;
        unsigned int f2_duration_secs:1;
    } exist;

} HTL_Config;

flag HTL_Config_Equal(const HTL_Config* pVal1, const HTL_Config* pVal2);

void HTL_Config_Initialize(HTL_Config* pVal);

#define ERR_HTL_CONFIG		1996  /**/
#define ERR_HTL_CONFIG_PRESS_5KM_2		1891  /**/
#define ERR_HTL_CONFIG_PRESS_10KM_2		1905  /**/
#define ERR_HTL_CONFIG_PRESS_18KM_2		1919  /**/
#define ERR_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1933  /**/
#define ERR_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1947  /**/
#define ERR_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1961  /**/
#define ERR_HTL_CONFIG_F1_DURATION_SECS_2		1975  /**/
#define ERR_HTL_CONFIG_F2_DURATION_SECS_2		1989  /**/
flag HTL_Config_IsConstraintValid(const HTL_Config* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HTL_CONFIG		1997  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_PRESS_5KM_2		1892  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_PRESS_10KM_2		1906  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_PRESS_18KM_2		1920  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1934  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1948  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1962  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_F1_DURATION_SECS_2		1976  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_F2_DURATION_SECS_2		1990  /**/
#define HTL_Config_REQUIRED_BYTES_FOR_ENCODING       87 
#define HTL_Config_REQUIRED_BITS_FOR_ENCODING        696

flag HTL_Config_Encode(const HTL_Config* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HTL_CONFIG		1998  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_PRESS_5KM_2		1893  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_PRESS_10KM_2		1907  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_PRESS_18KM_2		1921  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1935  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1949  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1963  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_F1_DURATION_SECS_2		1977  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_F2_DURATION_SECS_2		1991  /**/
flag HTL_Config_Decode(HTL_Config* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HTL_CONFIG		1999  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_PRESS_5KM_2		1894  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_PRESS_10KM_2		1908  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_PRESS_18KM_2		1922  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1936  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1950  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1964  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_F1_DURATION_SECS_2		1978  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_F2_DURATION_SECS_2		1992  /**/
#define HTL_Config_REQUIRED_BYTES_FOR_ACN_ENCODING       87 
#define HTL_Config_REQUIRED_BITS_FOR_ACN_ENCODING        696

flag HTL_Config_ACN_Encode(const HTL_Config* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HTL_CONFIG		2000  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_PRESS_5KM_2		1895  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_PRESS_10KM_2		1909  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_PRESS_18KM_2		1923  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1937  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1951  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1965  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_F1_DURATION_SECS_2		1979  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_F2_DURATION_SECS_2		1993  /**/
flag HTL_Config_ACN_Decode(HTL_Config* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int8;


flag T_Int8_Equal(const T_Int8* pVal1, const T_Int8* pVal2);

void T_Int8_Initialize(T_Int8* pVal);

#define ERR_T_INT8		7890  /**/
flag T_Int8_IsConstraintValid(const T_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT8		7891  /**/
#define T_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag T_Int8_Encode(const T_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		7892  /**/
flag T_Int8_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		7893  /**/
#define T_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_Int8_ACN_Encode(const T_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		7894  /**/
flag T_Int8_ACN_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt8;


flag T_UInt8_Equal(const T_UInt8* pVal1, const T_UInt8* pVal2);

void T_UInt8_Initialize(T_UInt8* pVal);

#define ERR_T_UINT8		7897  /**/
flag T_UInt8_IsConstraintValid(const T_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT8		7898  /**/
#define T_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag T_UInt8_Encode(const T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		7899  /**/
flag T_UInt8_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		7900  /**/
#define T_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_UInt8_ACN_Encode(const T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		7901  /**/
flag T_UInt8_ACN_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- SPI_ID --------------------------------------------*/
typedef struct {
    T_UInt8 bus;
    T_UInt8 cs;

} SPI_ID;

flag SPI_ID_Equal(const SPI_ID* pVal1, const SPI_ID* pVal2);

void SPI_ID_Initialize(SPI_ID* pVal);

#define ERR_SPI_ID		78  /**/
#define ERR_SPI_ID_BUS_2		57  /**/
#define ERR_SPI_ID_CS_2		71  /**/
flag SPI_ID_IsConstraintValid(const SPI_ID* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SPI_ID		79  /**/
#define ERR_UPER_ENCODE_SPI_ID_BUS_2		58  /**/
#define ERR_UPER_ENCODE_SPI_ID_CS_2		72  /**/
#define SPI_ID_REQUIRED_BYTES_FOR_ENCODING       2 
#define SPI_ID_REQUIRED_BITS_FOR_ENCODING        16

flag SPI_ID_Encode(const SPI_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SPI_ID		80  /**/
#define ERR_UPER_DECODE_SPI_ID_BUS_2		59  /**/
#define ERR_UPER_DECODE_SPI_ID_CS_2		73  /**/
flag SPI_ID_Decode(SPI_ID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SPI_ID		81  /**/
#define ERR_ACN_ENCODE_SPI_ID_BUS_2		60  /**/
#define ERR_ACN_ENCODE_SPI_ID_CS_2		74  /**/
#define SPI_ID_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define SPI_ID_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag SPI_ID_ACN_Encode(const SPI_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SPI_ID		82  /**/
#define ERR_ACN_DECODE_SPI_ID_BUS_2		61  /**/
#define ERR_ACN_DECODE_SPI_ID_CS_2		75  /**/
flag SPI_ID_ACN_Decode(SPI_ID* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- I2C_ID --------------------------------------------*/
typedef struct {
    T_UInt8 bus;
    T_UInt8 address;

} I2C_ID;

flag I2C_ID_Equal(const I2C_ID* pVal1, const I2C_ID* pVal2);

void I2C_ID_Initialize(I2C_ID* pVal);

#define ERR_I2C_ID		113  /**/
#define ERR_I2C_ID_BUS_2		92  /**/
#define ERR_I2C_ID_ADDRESS_2		106  /**/
flag I2C_ID_IsConstraintValid(const I2C_ID* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_I2C_ID		114  /**/
#define ERR_UPER_ENCODE_I2C_ID_BUS_2		93  /**/
#define ERR_UPER_ENCODE_I2C_ID_ADDRESS_2		107  /**/
#define I2C_ID_REQUIRED_BYTES_FOR_ENCODING       2 
#define I2C_ID_REQUIRED_BITS_FOR_ENCODING        16

flag I2C_ID_Encode(const I2C_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_I2C_ID		115  /**/
#define ERR_UPER_DECODE_I2C_ID_BUS_2		94  /**/
#define ERR_UPER_DECODE_I2C_ID_ADDRESS_2		108  /**/
flag I2C_ID_Decode(I2C_ID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_I2C_ID		116  /**/
#define ERR_ACN_ENCODE_I2C_ID_BUS_2		95  /**/
#define ERR_ACN_ENCODE_I2C_ID_ADDRESS_2		109  /**/
#define I2C_ID_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define I2C_ID_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag I2C_ID_ACN_Encode(const I2C_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_I2C_ID		117  /**/
#define ERR_ACN_DECODE_I2C_ID_BUS_2		96  /**/
#define ERR_ACN_DECODE_I2C_ID_ADDRESS_2		110  /**/
flag I2C_ID_ACN_Decode(I2C_ID* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag T_Boolean;


flag T_Boolean_Equal(const T_Boolean* pVal1, const T_Boolean* pVal2);

void T_Boolean_Initialize(T_Boolean* pVal);

#define ERR_T_BOOLEAN		7904  /**/
flag T_Boolean_IsConstraintValid(const T_Boolean* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_BOOLEAN		7905  /**/
#define T_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag T_Boolean_Encode(const T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		7906  /**/
flag T_Boolean_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		7907  /**/
#define T_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_Boolean_ACN_Encode(const T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		7908  /**/
flag T_Boolean_ACN_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- T_Null_Record --------------------------------------------*/
typedef struct {

} T_Null_Record;

flag T_Null_Record_Equal(const T_Null_Record* pVal1, const T_Null_Record* pVal2);

void T_Null_Record_Initialize(T_Null_Record* pVal);

#define ERR_T_NULL_RECORD		7911  /**/
flag T_Null_Record_IsConstraintValid(const T_Null_Record* pVal, int* pErrCode);

#define T_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define T_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag T_Null_Record_Encode(const T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag T_Null_Record_Decode(T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define T_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define T_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag T_Null_Record_ACN_Encode(const T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag T_Null_Record_ACN_Decode(T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

extern const asn1SccSint n_of_TC74s;
extern const asn1SccSint n_of_pt1000; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
