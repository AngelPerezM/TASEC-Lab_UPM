#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccSint T_Int16;


flag T_Int16_Equal(const T_Int16* pVal1, const T_Int16* pVal2);

void T_Int16_Initialize(T_Int16* pVal);

#define ERR_T_INT16		1  /**/
flag T_Int16_IsConstraintValid(const T_Int16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT16		2  /**/
#define T_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define T_Int16_REQUIRED_BITS_FOR_ENCODING        16

flag T_Int16_Encode(const T_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT16		3  /**/
flag T_Int16_Decode(T_Int16* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT16		4  /**/
#define T_Int16_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define T_Int16_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag T_Int16_ACN_Encode(const T_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT16		5  /**/
flag T_Int16_ACN_Decode(T_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- MGT_Raw_Data --------------------------------------------*/
typedef struct {
    T_Int16 x_axis;
    T_Int16 y_axis;
    T_Int16 z_axis;

} MGT_Raw_Data;

flag MGT_Raw_Data_Equal(const MGT_Raw_Data* pVal1, const MGT_Raw_Data* pVal2);

void MGT_Raw_Data_Initialize(MGT_Raw_Data* pVal);

#define ERR_MGT_RAW_DATA		379  /**/
#define ERR_MGT_RAW_DATA_X_AXIS_2		344  /**/
#define ERR_MGT_RAW_DATA_Y_AXIS_2		358  /**/
#define ERR_MGT_RAW_DATA_Z_AXIS_2		372  /**/
flag MGT_Raw_Data_IsConstraintValid(const MGT_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_MGT_RAW_DATA		380  /**/
#define ERR_UPER_ENCODE_MGT_RAW_DATA_X_AXIS_2		345  /**/
#define ERR_UPER_ENCODE_MGT_RAW_DATA_Y_AXIS_2		359  /**/
#define ERR_UPER_ENCODE_MGT_RAW_DATA_Z_AXIS_2		373  /**/
#define MGT_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       6 
#define MGT_Raw_Data_REQUIRED_BITS_FOR_ENCODING        48

flag MGT_Raw_Data_Encode(const MGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MGT_RAW_DATA		381  /**/
#define ERR_UPER_DECODE_MGT_RAW_DATA_X_AXIS_2		346  /**/
#define ERR_UPER_DECODE_MGT_RAW_DATA_Y_AXIS_2		360  /**/
#define ERR_UPER_DECODE_MGT_RAW_DATA_Z_AXIS_2		374  /**/
flag MGT_Raw_Data_Decode(MGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MGT_RAW_DATA		382  /**/
#define ERR_ACN_ENCODE_MGT_RAW_DATA_X_AXIS_2		347  /**/
#define ERR_ACN_ENCODE_MGT_RAW_DATA_Y_AXIS_2		361  /**/
#define ERR_ACN_ENCODE_MGT_RAW_DATA_Z_AXIS_2		375  /**/
#define MGT_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       6 
#define MGT_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        48

flag MGT_Raw_Data_ACN_Encode(const MGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MGT_RAW_DATA		383  /**/
#define ERR_ACN_DECODE_MGT_RAW_DATA_X_AXIS_2		348  /**/
#define ERR_ACN_DECODE_MGT_RAW_DATA_Y_AXIS_2		362  /**/
#define ERR_ACN_DECODE_MGT_RAW_DATA_Z_AXIS_2		376  /**/
flag MGT_Raw_Data_ACN_Decode(MGT_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- ACC_Raw_Data --------------------------------------------*/
typedef struct {
    T_Int16 x_axis;
    T_Int16 y_axis;
    T_Int16 z_axis;

} ACC_Raw_Data;

flag ACC_Raw_Data_Equal(const ACC_Raw_Data* pVal1, const ACC_Raw_Data* pVal2);

void ACC_Raw_Data_Initialize(ACC_Raw_Data* pVal);

#define ERR_ACC_RAW_DATA		477  /**/
#define ERR_ACC_RAW_DATA_X_AXIS_2		442  /**/
#define ERR_ACC_RAW_DATA_Y_AXIS_2		456  /**/
#define ERR_ACC_RAW_DATA_Z_AXIS_2		470  /**/
flag ACC_Raw_Data_IsConstraintValid(const ACC_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ACC_RAW_DATA		478  /**/
#define ERR_UPER_ENCODE_ACC_RAW_DATA_X_AXIS_2		443  /**/
#define ERR_UPER_ENCODE_ACC_RAW_DATA_Y_AXIS_2		457  /**/
#define ERR_UPER_ENCODE_ACC_RAW_DATA_Z_AXIS_2		471  /**/
#define ACC_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       6 
#define ACC_Raw_Data_REQUIRED_BITS_FOR_ENCODING        48

flag ACC_Raw_Data_Encode(const ACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACC_RAW_DATA		479  /**/
#define ERR_UPER_DECODE_ACC_RAW_DATA_X_AXIS_2		444  /**/
#define ERR_UPER_DECODE_ACC_RAW_DATA_Y_AXIS_2		458  /**/
#define ERR_UPER_DECODE_ACC_RAW_DATA_Z_AXIS_2		472  /**/
flag ACC_Raw_Data_Decode(ACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACC_RAW_DATA		480  /**/
#define ERR_ACN_ENCODE_ACC_RAW_DATA_X_AXIS_2		445  /**/
#define ERR_ACN_ENCODE_ACC_RAW_DATA_Y_AXIS_2		459  /**/
#define ERR_ACN_ENCODE_ACC_RAW_DATA_Z_AXIS_2		473  /**/
#define ACC_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       6 
#define ACC_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        48

flag ACC_Raw_Data_ACN_Encode(const ACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACC_RAW_DATA		481  /**/
#define ERR_ACN_DECODE_ACC_RAW_DATA_X_AXIS_2		446  /**/
#define ERR_ACN_DECODE_ACC_RAW_DATA_Y_AXIS_2		460  /**/
#define ERR_ACN_DECODE_ACC_RAW_DATA_Z_AXIS_2		474  /**/
flag ACC_Raw_Data_ACN_Decode(ACC_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- GYRO_Raw_Data --------------------------------------------*/
typedef struct {
    T_Int16 x_axis;
    T_Int16 y_axis;
    T_Int16 z_axis;

} GYRO_Raw_Data;

flag GYRO_Raw_Data_Equal(const GYRO_Raw_Data* pVal1, const GYRO_Raw_Data* pVal2);

void GYRO_Raw_Data_Initialize(GYRO_Raw_Data* pVal);

#define ERR_GYRO_RAW_DATA		575  /**/
#define ERR_GYRO_RAW_DATA_X_AXIS_2		540  /**/
#define ERR_GYRO_RAW_DATA_Y_AXIS_2		554  /**/
#define ERR_GYRO_RAW_DATA_Z_AXIS_2		568  /**/
flag GYRO_Raw_Data_IsConstraintValid(const GYRO_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GYRO_RAW_DATA		576  /**/
#define ERR_UPER_ENCODE_GYRO_RAW_DATA_X_AXIS_2		541  /**/
#define ERR_UPER_ENCODE_GYRO_RAW_DATA_Y_AXIS_2		555  /**/
#define ERR_UPER_ENCODE_GYRO_RAW_DATA_Z_AXIS_2		569  /**/
#define GYRO_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       6 
#define GYRO_Raw_Data_REQUIRED_BITS_FOR_ENCODING        48

flag GYRO_Raw_Data_Encode(const GYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GYRO_RAW_DATA		577  /**/
#define ERR_UPER_DECODE_GYRO_RAW_DATA_X_AXIS_2		542  /**/
#define ERR_UPER_DECODE_GYRO_RAW_DATA_Y_AXIS_2		556  /**/
#define ERR_UPER_DECODE_GYRO_RAW_DATA_Z_AXIS_2		570  /**/
flag GYRO_Raw_Data_Decode(GYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_GYRO_RAW_DATA		578  /**/
#define ERR_ACN_ENCODE_GYRO_RAW_DATA_X_AXIS_2		543  /**/
#define ERR_ACN_ENCODE_GYRO_RAW_DATA_Y_AXIS_2		557  /**/
#define ERR_ACN_ENCODE_GYRO_RAW_DATA_Z_AXIS_2		571  /**/
#define GYRO_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       6 
#define GYRO_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        48

flag GYRO_Raw_Data_ACN_Encode(const GYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_GYRO_RAW_DATA		579  /**/
#define ERR_ACN_DECODE_GYRO_RAW_DATA_X_AXIS_2		544  /**/
#define ERR_ACN_DECODE_GYRO_RAW_DATA_Y_AXIS_2		558  /**/
#define ERR_ACN_DECODE_GYRO_RAW_DATA_Z_AXIS_2		572  /**/
flag GYRO_Raw_Data_ACN_Decode(GYRO_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt16;


flag T_UInt16_Equal(const T_UInt16* pVal1, const T_UInt16* pVal2);

void T_UInt16_Initialize(T_UInt16* pVal);

#define ERR_T_UINT16		8  /**/
flag T_UInt16_IsConstraintValid(const T_UInt16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT16		9  /**/
#define T_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define T_UInt16_REQUIRED_BITS_FOR_ENCODING        16

flag T_UInt16_Encode(const T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT16		10  /**/
flag T_UInt16_Decode(T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT16		11  /**/
#define T_UInt16_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define T_UInt16_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag T_UInt16_ACN_Encode(const T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT16		12  /**/
flag T_UInt16_ACN_Decode(T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt64;


flag T_UInt64_Equal(const T_UInt64* pVal1, const T_UInt64* pVal2);

void T_UInt64_Initialize(T_UInt64* pVal);

#define ERR_T_UINT64		15  /**/
flag T_UInt64_IsConstraintValid(const T_UInt64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT64		16  /**/
#define T_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define T_UInt64_REQUIRED_BITS_FOR_ENCODING        64

flag T_UInt64_Encode(const T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT64		17  /**/
flag T_UInt64_Decode(T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT64		18  /**/
#define T_UInt64_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define T_UInt64_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag T_UInt64_ACN_Encode(const T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT64		19  /**/
flag T_UInt64_ACN_Decode(T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real T_Float;


flag T_Float_Equal(const T_Float* pVal1, const T_Float* pVal2);

void T_Float_Initialize(T_Float* pVal);

#define ERR_T_FLOAT		22  /**/
flag T_Float_IsConstraintValid(const T_Float* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_FLOAT		23  /**/
#define T_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define T_Float_REQUIRED_BITS_FOR_ENCODING        104

flag T_Float_Encode(const T_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FLOAT		24  /**/
flag T_Float_Decode(T_Float* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_FLOAT		25  /**/
#define T_Float_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define T_Float_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag T_Float_ACN_Encode(const T_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_FLOAT		26  /**/
flag T_Float_ACN_Decode(T_Float* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- MGT_MilliGauss_Data --------------------------------------------*/
typedef struct {
    T_Float x_axis;
    T_Float y_axis;
    T_Float z_axis;

} MGT_MilliGauss_Data;

flag MGT_MilliGauss_Data_Equal(const MGT_MilliGauss_Data* pVal1, const MGT_MilliGauss_Data* pVal2);

void MGT_MilliGauss_Data_Initialize(MGT_MilliGauss_Data* pVal);

#define ERR_MGT_MILLIGAUSS_DATA		428  /**/
#define ERR_MGT_MILLIGAUSS_DATA_X_AXIS_2		393  /**/
#define ERR_MGT_MILLIGAUSS_DATA_Y_AXIS_2		407  /**/
#define ERR_MGT_MILLIGAUSS_DATA_Z_AXIS_2		421  /**/
flag MGT_MilliGauss_Data_IsConstraintValid(const MGT_MilliGauss_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA		429  /**/
#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		394  /**/
#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		408  /**/
#define ERR_UPER_ENCODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		422  /**/
#define MGT_MilliGauss_Data_REQUIRED_BYTES_FOR_ENCODING       39 
#define MGT_MilliGauss_Data_REQUIRED_BITS_FOR_ENCODING        312

flag MGT_MilliGauss_Data_Encode(const MGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA		430  /**/
#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		395  /**/
#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		409  /**/
#define ERR_UPER_DECODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		423  /**/
flag MGT_MilliGauss_Data_Decode(MGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA		431  /**/
#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		396  /**/
#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		410  /**/
#define ERR_ACN_ENCODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		424  /**/
#define MGT_MilliGauss_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define MGT_MilliGauss_Data_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag MGT_MilliGauss_Data_ACN_Encode(const MGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA		432  /**/
#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA_X_AXIS_2		397  /**/
#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA_Y_AXIS_2		411  /**/
#define ERR_ACN_DECODE_MGT_MILLIGAUSS_DATA_Z_AXIS_2		425  /**/
flag MGT_MilliGauss_Data_ACN_Decode(MGT_MilliGauss_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- ACC_MilliG_Data --------------------------------------------*/
typedef struct {
    T_Float x_axis;
    T_Float y_axis;
    T_Float z_axis;

} ACC_MilliG_Data;

flag ACC_MilliG_Data_Equal(const ACC_MilliG_Data* pVal1, const ACC_MilliG_Data* pVal2);

void ACC_MilliG_Data_Initialize(ACC_MilliG_Data* pVal);

#define ERR_ACC_MILLIG_DATA		526  /**/
#define ERR_ACC_MILLIG_DATA_X_AXIS_2		491  /**/
#define ERR_ACC_MILLIG_DATA_Y_AXIS_2		505  /**/
#define ERR_ACC_MILLIG_DATA_Z_AXIS_2		519  /**/
flag ACC_MilliG_Data_IsConstraintValid(const ACC_MilliG_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ACC_MILLIG_DATA		527  /**/
#define ERR_UPER_ENCODE_ACC_MILLIG_DATA_X_AXIS_2		492  /**/
#define ERR_UPER_ENCODE_ACC_MILLIG_DATA_Y_AXIS_2		506  /**/
#define ERR_UPER_ENCODE_ACC_MILLIG_DATA_Z_AXIS_2		520  /**/
#define ACC_MilliG_Data_REQUIRED_BYTES_FOR_ENCODING       39 
#define ACC_MilliG_Data_REQUIRED_BITS_FOR_ENCODING        312

flag ACC_MilliG_Data_Encode(const ACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACC_MILLIG_DATA		528  /**/
#define ERR_UPER_DECODE_ACC_MILLIG_DATA_X_AXIS_2		493  /**/
#define ERR_UPER_DECODE_ACC_MILLIG_DATA_Y_AXIS_2		507  /**/
#define ERR_UPER_DECODE_ACC_MILLIG_DATA_Z_AXIS_2		521  /**/
flag ACC_MilliG_Data_Decode(ACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACC_MILLIG_DATA		529  /**/
#define ERR_ACN_ENCODE_ACC_MILLIG_DATA_X_AXIS_2		494  /**/
#define ERR_ACN_ENCODE_ACC_MILLIG_DATA_Y_AXIS_2		508  /**/
#define ERR_ACN_ENCODE_ACC_MILLIG_DATA_Z_AXIS_2		522  /**/
#define ACC_MilliG_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define ACC_MilliG_Data_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag ACC_MilliG_Data_ACN_Encode(const ACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACC_MILLIG_DATA		530  /**/
#define ERR_ACN_DECODE_ACC_MILLIG_DATA_X_AXIS_2		495  /**/
#define ERR_ACN_DECODE_ACC_MILLIG_DATA_Y_AXIS_2		509  /**/
#define ERR_ACN_DECODE_ACC_MILLIG_DATA_Z_AXIS_2		523  /**/
flag ACC_MilliG_Data_ACN_Decode(ACC_MilliG_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- GYRO_MilliDPS_Data --------------------------------------------*/
typedef struct {
    T_Float x_axis;
    T_Float y_axis;
    T_Float z_axis;

} GYRO_MilliDPS_Data;

flag GYRO_MilliDPS_Data_Equal(const GYRO_MilliDPS_Data* pVal1, const GYRO_MilliDPS_Data* pVal2);

void GYRO_MilliDPS_Data_Initialize(GYRO_MilliDPS_Data* pVal);

#define ERR_GYRO_MILLIDPS_DATA		624  /**/
#define ERR_GYRO_MILLIDPS_DATA_X_AXIS_2		589  /**/
#define ERR_GYRO_MILLIDPS_DATA_Y_AXIS_2		603  /**/
#define ERR_GYRO_MILLIDPS_DATA_Z_AXIS_2		617  /**/
flag GYRO_MilliDPS_Data_IsConstraintValid(const GYRO_MilliDPS_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA		625  /**/
#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA_X_AXIS_2		590  /**/
#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		604  /**/
#define ERR_UPER_ENCODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		618  /**/
#define GYRO_MilliDPS_Data_REQUIRED_BYTES_FOR_ENCODING       39 
#define GYRO_MilliDPS_Data_REQUIRED_BITS_FOR_ENCODING        312

flag GYRO_MilliDPS_Data_Encode(const GYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA		626  /**/
#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA_X_AXIS_2		591  /**/
#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		605  /**/
#define ERR_UPER_DECODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		619  /**/
flag GYRO_MilliDPS_Data_Decode(GYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA		627  /**/
#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA_X_AXIS_2		592  /**/
#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		606  /**/
#define ERR_ACN_ENCODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		620  /**/
#define GYRO_MilliDPS_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define GYRO_MilliDPS_Data_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag GYRO_MilliDPS_Data_ACN_Encode(const GYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA		628  /**/
#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA_X_AXIS_2		593  /**/
#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA_Y_AXIS_2		607  /**/
#define ERR_ACN_DECODE_GYRO_MILLIDPS_DATA_Z_AXIS_2		621  /**/
flag GYRO_MilliDPS_Data_ACN_Decode(GYRO_MilliDPS_Data* pVal, BitStream* pBitStrm, int* pErrCode);

/*-- PT1000s_Raw_Data_elem --------------------------------------------*/
typedef struct {
    T_Float vcc_volts;
    T_Float pt1000;

} PT1000s_Raw_Data_elem;

typedef struct {
    
    PT1000s_Raw_Data_elem arr[7];
} PT1000s_Raw_Data;

flag PT1000s_Raw_Data_elem_Equal(const PT1000s_Raw_Data_elem* pVal1, const PT1000s_Raw_Data_elem* pVal2);

flag PT1000s_Raw_Data_Equal(const PT1000s_Raw_Data* pVal1, const PT1000s_Raw_Data* pVal2);

void PT1000s_Raw_Data_elem_Initialize(PT1000s_Raw_Data_elem* pVal);
void PT1000s_Raw_Data_Initialize(PT1000s_Raw_Data* pVal);

#define ERR_PT1000S_RAW_DATA		1177  /**/
#define ERR_PT1000S_RAW_DATA_ELM		1170  /**/
#define ERR_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1149  /**/
#define ERR_PT1000S_RAW_DATA_ELM_PT1000_2		1163  /**/
flag PT1000s_Raw_Data_IsConstraintValid(const PT1000s_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_RAW_DATA		1178  /**/
#define ERR_UPER_ENCODE_PT1000S_RAW_DATA_ELM		1171  /**/
#define ERR_UPER_ENCODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1150  /**/
#define ERR_UPER_ENCODE_PT1000S_RAW_DATA_ELM_PT1000_2		1164  /**/
#define PT1000s_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       182 
#define PT1000s_Raw_Data_REQUIRED_BITS_FOR_ENCODING        1456

flag PT1000s_Raw_Data_Encode(const PT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_RAW_DATA		1179  /**/
#define ERR_UPER_DECODE_PT1000S_RAW_DATA_ELM		1172  /**/
#define ERR_UPER_DECODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1151  /**/
#define ERR_UPER_DECODE_PT1000S_RAW_DATA_ELM_PT1000_2		1165  /**/
flag PT1000s_Raw_Data_Decode(PT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_RAW_DATA		1180  /**/
#define ERR_ACN_ENCODE_PT1000S_RAW_DATA_ELM		1173  /**/
#define ERR_ACN_ENCODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1152  /**/
#define ERR_ACN_ENCODE_PT1000S_RAW_DATA_ELM_PT1000_2		1166  /**/
#define PT1000s_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       182 
#define PT1000s_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        1456

flag PT1000s_Raw_Data_ACN_Encode(const PT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_RAW_DATA		1181  /**/
#define ERR_ACN_DECODE_PT1000S_RAW_DATA_ELM		1174  /**/
#define ERR_ACN_DECODE_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2		1153  /**/
#define ERR_ACN_DECODE_PT1000S_RAW_DATA_ELM_PT1000_2		1167  /**/
flag PT1000s_Raw_Data_ACN_Decode(PT1000s_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    T_Float arr[7];
} PT1000s_Celsius_Data;

flag PT1000s_Celsius_Data_Equal(const PT1000s_Celsius_Data* pVal1, const PT1000s_Celsius_Data* pVal2);

void PT1000s_Celsius_Data_Initialize(PT1000s_Celsius_Data* pVal);

#define ERR_PT1000S_CELSIUS_DATA		1198  /**/
#define ERR_PT1000S_CELSIUS_DATA_ELM_2		1191  /**/
flag PT1000s_Celsius_Data_IsConstraintValid(const PT1000s_Celsius_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_CELSIUS_DATA		1199  /**/
#define ERR_UPER_ENCODE_PT1000S_CELSIUS_DATA_ELM_2		1192  /**/
#define PT1000s_Celsius_Data_REQUIRED_BYTES_FOR_ENCODING       91 
#define PT1000s_Celsius_Data_REQUIRED_BITS_FOR_ENCODING        728

flag PT1000s_Celsius_Data_Encode(const PT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_CELSIUS_DATA		1200  /**/
#define ERR_UPER_DECODE_PT1000S_CELSIUS_DATA_ELM_2		1193  /**/
flag PT1000s_Celsius_Data_Decode(PT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_CELSIUS_DATA		1201  /**/
#define ERR_ACN_ENCODE_PT1000S_CELSIUS_DATA_ELM_2		1194  /**/
#define PT1000s_Celsius_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       91 
#define PT1000s_Celsius_Data_REQUIRED_BITS_FOR_ACN_ENCODING        728

flag PT1000s_Celsius_Data_ACN_Encode(const PT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_CELSIUS_DATA		1202  /**/
#define ERR_ACN_DECODE_PT1000S_CELSIUS_DATA_ELM_2		1195  /**/
flag PT1000s_Celsius_Data_ACN_Decode(PT1000s_Celsius_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PS_Calibration_Data --------------------------------------------*/
typedef struct {
    T_UInt16 c1;
    T_UInt16 c2;
    T_UInt16 c3;
    T_UInt16 c4;
    T_UInt16 c5;
    T_UInt16 c6;
    T_Float sens_t1;
    T_Float off_t1;
    T_Float tcs;
    T_Float tco;
    T_Float tref;
    T_Float temp_sens;

} PS_Calibration_Data;

flag PS_Calibration_Data_Equal(const PS_Calibration_Data* pVal1, const PS_Calibration_Data* pVal2);

void PS_Calibration_Data_Initialize(PS_Calibration_Data* pVal);

#define ERR_PS_CALIBRATION_DATA		1478  /**/
#define ERR_PS_CALIBRATION_DATA_C1_2		1317  /**/
#define ERR_PS_CALIBRATION_DATA_C2_2		1331  /**/
#define ERR_PS_CALIBRATION_DATA_C3_2		1345  /**/
#define ERR_PS_CALIBRATION_DATA_C4_2		1359  /**/
#define ERR_PS_CALIBRATION_DATA_C5_2		1373  /**/
#define ERR_PS_CALIBRATION_DATA_C6_2		1387  /**/
#define ERR_PS_CALIBRATION_DATA_SENS_T1_2		1401  /**/
#define ERR_PS_CALIBRATION_DATA_OFF_T1_2		1415  /**/
#define ERR_PS_CALIBRATION_DATA_TCS_2		1429  /**/
#define ERR_PS_CALIBRATION_DATA_TCO_2		1443  /**/
#define ERR_PS_CALIBRATION_DATA_TREF_2		1457  /**/
#define ERR_PS_CALIBRATION_DATA_TEMP_SENS_2		1471  /**/
flag PS_Calibration_Data_IsConstraintValid(const PS_Calibration_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA		1479  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C1_2		1318  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C2_2		1332  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C3_2		1346  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C4_2		1360  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C5_2		1374  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_C6_2		1388  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_SENS_T1_2		1402  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_OFF_T1_2		1416  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TCS_2		1430  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TCO_2		1444  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TREF_2		1458  /**/
#define ERR_UPER_ENCODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1472  /**/
#define PS_Calibration_Data_REQUIRED_BYTES_FOR_ENCODING       90 
#define PS_Calibration_Data_REQUIRED_BITS_FOR_ENCODING        720

flag PS_Calibration_Data_Encode(const PS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_CALIBRATION_DATA		1480  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C1_2		1319  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C2_2		1333  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C3_2		1347  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C4_2		1361  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C5_2		1375  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_C6_2		1389  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_SENS_T1_2		1403  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_OFF_T1_2		1417  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TCS_2		1431  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TCO_2		1445  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TREF_2		1459  /**/
#define ERR_UPER_DECODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1473  /**/
flag PS_Calibration_Data_Decode(PS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA		1481  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C1_2		1320  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C2_2		1334  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C3_2		1348  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C4_2		1362  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C5_2		1376  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_C6_2		1390  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_SENS_T1_2		1404  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_OFF_T1_2		1418  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TCS_2		1432  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TCO_2		1446  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TREF_2		1460  /**/
#define ERR_ACN_ENCODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1474  /**/
#define PS_Calibration_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       90 
#define PS_Calibration_Data_REQUIRED_BITS_FOR_ACN_ENCODING        720

flag PS_Calibration_Data_ACN_Encode(const PS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_CALIBRATION_DATA		1482  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C1_2		1321  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C2_2		1335  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C3_2		1349  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C4_2		1363  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C5_2		1377  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_C6_2		1391  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_SENS_T1_2		1405  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_OFF_T1_2		1419  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TCS_2		1433  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TCO_2		1447  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TREF_2		1461  /**/
#define ERR_ACN_DECODE_PS_CALIBRATION_DATA_TEMP_SENS_2		1475  /**/
flag PS_Calibration_Data_ACN_Decode(PS_Calibration_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- TC_Heater --------------------------------------------*/
typedef enum {
    heater_HTL = 0,
    heater_anemo = 1
} TC_Heater_heater;

// please use the following macros to avoid breaking code.
#define TC_Heater_heater_heater_HTL heater_HTL
#define TC_Heater_heater_heater_anemo heater_anemo
/*-- TC_Heater_command --------------------------------------------*/
typedef enum {
    max = 0,
    min = 1
} TC_Heater_command_max_min;

// please use the following macros to avoid breaking code.
#define TC_Heater_command_max_min_max max
#define TC_Heater_command_max_min_min min

typedef enum {
    TC_Heater_command_NONE,
    power_manual_PRESENT,
    max_min_PRESENT 
} TC_Heater_command_selection;


typedef struct {
    TC_Heater_command_selection kind;
    
    union {
        T_Float power_manual;
        TC_Heater_command_max_min max_min;
    } u; 
} TC_Heater_command;
typedef struct {
    TC_Heater_heater heater;
    TC_Heater_command command;

} TC_Heater;

flag TC_Heater_heater_Equal(const TC_Heater_heater* pVal1, const TC_Heater_heater* pVal2);

flag TC_Heater_command_max_min_Equal(const TC_Heater_command_max_min* pVal1, const TC_Heater_command_max_min* pVal2);

flag TC_Heater_command_Equal(const TC_Heater_command* pVal1, const TC_Heater_command* pVal2);

flag TC_Heater_Equal(const TC_Heater* pVal1, const TC_Heater* pVal2);

void TC_Heater_heater_Initialize(TC_Heater_heater* pVal);
void TC_Heater_command_max_min_Initialize(TC_Heater_command_max_min* pVal);
void TC_Heater_command_Initialize(TC_Heater_command* pVal);
void TC_Heater_Initialize(TC_Heater* pVal);

#define ERR_TC_HEATER		7022  /**/
#define ERR_TC_HEATER_HEATER		6987  /**/
#define ERR_TC_HEATER_COMMAND		7015  /**/
#define ERR_TC_HEATER_COMMAND_POWER_MANUAL_2		7001  /**/
#define ERR_TC_HEATER_COMMAND_MAX_MIN		7008  /**/
flag TC_Heater_IsConstraintValid(const TC_Heater* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC_HEATER		7023  /**/
#define ERR_UPER_ENCODE_TC_HEATER_HEATER		6988  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMAND		7016  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMAND_POWER_MANUAL_2		7002  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMAND_MAX_MIN		7009  /**/
#define TC_Heater_REQUIRED_BYTES_FOR_ENCODING       14 
#define TC_Heater_REQUIRED_BITS_FOR_ENCODING        106

flag TC_Heater_Encode(const TC_Heater* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC_HEATER		7024  /**/
#define ERR_UPER_DECODE_TC_HEATER_HEATER		6989  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMAND		7017  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMAND_POWER_MANUAL_2		7003  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMAND_MAX_MIN		7010  /**/
flag TC_Heater_Decode(TC_Heater* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TC_HEATER		7025  /**/
#define ERR_ACN_ENCODE_TC_HEATER_HEATER		6990  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMAND		7018  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMAND_POWER_MANUAL_2		7004  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMAND_MAX_MIN		7011  /**/
#define TC_Heater_REQUIRED_BYTES_FOR_ACN_ENCODING       14 
#define TC_Heater_REQUIRED_BITS_FOR_ACN_ENCODING        106

flag TC_Heater_ACN_Encode(const TC_Heater* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TC_HEATER		7026  /**/
#define ERR_ACN_DECODE_TC_HEATER_HEATER		6991  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMAND		7019  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMAND_POWER_MANUAL_2		7005  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMAND_MAX_MIN		7012  /**/
flag TC_Heater_ACN_Decode(TC_Heater* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real T_Double;


flag T_Double_Equal(const T_Double* pVal1, const T_Double* pVal2);

void T_Double_Initialize(T_Double* pVal);

#define ERR_T_DOUBLE		29  /**/
flag T_Double_IsConstraintValid(const T_Double* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_DOUBLE		30  /**/
#define T_Double_REQUIRED_BYTES_FOR_ENCODING       13 
#define T_Double_REQUIRED_BITS_FOR_ENCODING        104

flag T_Double_Encode(const T_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_DOUBLE		31  /**/
flag T_Double_Decode(T_Double* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_DOUBLE		32  /**/
#define T_Double_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define T_Double_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag T_Double_ACN_Encode(const T_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_DOUBLE		33  /**/
flag T_Double_ACN_Decode(T_Double* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- GPS_PVT --------------------------------------------*/
typedef enum {
    not_seen = 0,
    no_fix = 1,
    two_dims = 2,
    three_dims = 3
} GPS_PVT_mode;

// please use the following macros to avoid breaking code.
#define GPS_PVT_mode_not_seen not_seen
#define GPS_PVT_mode_no_fix no_fix
#define GPS_PVT_mode_two_dims two_dims
#define GPS_PVT_mode_three_dims three_dims
typedef struct {
    GPS_PVT_mode mode;
    T_Double date_and_time;
    T_Double ept;
    T_Double latitude;
    T_Double epy;
    T_Double longitude;
    T_Double epx;
    T_Double altitude;
    T_Double epv;
    T_Double course;
    T_Double epd;
    T_Double speed;
    T_Double eps;
    T_Double climb;
    T_Double epc;

} GPS_PVT;

flag GPS_PVT_mode_Equal(const GPS_PVT_mode* pVal1, const GPS_PVT_mode* pVal2);

flag GPS_PVT_Equal(const GPS_PVT* pVal1, const GPS_PVT* pVal2);

void GPS_PVT_mode_Initialize(GPS_PVT_mode* pVal);
void GPS_PVT_Initialize(GPS_PVT* pVal);

#define ERR_GPS_PVT		330  /**/
#define ERR_GPS_PVT_MODE		127  /**/
#define ERR_GPS_PVT_DATE_AND_TIME_2		141  /**/
#define ERR_GPS_PVT_EPT_2		155  /**/
#define ERR_GPS_PVT_LATITUDE_2		169  /**/
#define ERR_GPS_PVT_EPY_2		183  /**/
#define ERR_GPS_PVT_LONGITUDE_2		197  /**/
#define ERR_GPS_PVT_EPX_2		211  /**/
#define ERR_GPS_PVT_ALTITUDE_2		225  /**/
#define ERR_GPS_PVT_EPV_2		239  /**/
#define ERR_GPS_PVT_COURSE_2		253  /**/
#define ERR_GPS_PVT_EPD_2		267  /**/
#define ERR_GPS_PVT_SPEED_2		281  /**/
#define ERR_GPS_PVT_EPS_2		295  /**/
#define ERR_GPS_PVT_CLIMB_2		309  /**/
#define ERR_GPS_PVT_EPC_2		323  /**/
flag GPS_PVT_IsConstraintValid(const GPS_PVT* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GPS_PVT		331  /**/
#define ERR_UPER_ENCODE_GPS_PVT_MODE		128  /**/
#define ERR_UPER_ENCODE_GPS_PVT_DATE_AND_TIME_2		142  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPT_2		156  /**/
#define ERR_UPER_ENCODE_GPS_PVT_LATITUDE_2		170  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPY_2		184  /**/
#define ERR_UPER_ENCODE_GPS_PVT_LONGITUDE_2		198  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPX_2		212  /**/
#define ERR_UPER_ENCODE_GPS_PVT_ALTITUDE_2		226  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPV_2		240  /**/
#define ERR_UPER_ENCODE_GPS_PVT_COURSE_2		254  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPD_2		268  /**/
#define ERR_UPER_ENCODE_GPS_PVT_SPEED_2		282  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPS_2		296  /**/
#define ERR_UPER_ENCODE_GPS_PVT_CLIMB_2		310  /**/
#define ERR_UPER_ENCODE_GPS_PVT_EPC_2		324  /**/
#define GPS_PVT_REQUIRED_BYTES_FOR_ENCODING       183 
#define GPS_PVT_REQUIRED_BITS_FOR_ENCODING        1458

flag GPS_PVT_Encode(const GPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GPS_PVT		332  /**/
#define ERR_UPER_DECODE_GPS_PVT_MODE		129  /**/
#define ERR_UPER_DECODE_GPS_PVT_DATE_AND_TIME_2		143  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPT_2		157  /**/
#define ERR_UPER_DECODE_GPS_PVT_LATITUDE_2		171  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPY_2		185  /**/
#define ERR_UPER_DECODE_GPS_PVT_LONGITUDE_2		199  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPX_2		213  /**/
#define ERR_UPER_DECODE_GPS_PVT_ALTITUDE_2		227  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPV_2		241  /**/
#define ERR_UPER_DECODE_GPS_PVT_COURSE_2		255  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPD_2		269  /**/
#define ERR_UPER_DECODE_GPS_PVT_SPEED_2		283  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPS_2		297  /**/
#define ERR_UPER_DECODE_GPS_PVT_CLIMB_2		311  /**/
#define ERR_UPER_DECODE_GPS_PVT_EPC_2		325  /**/
flag GPS_PVT_Decode(GPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_GPS_PVT		333  /**/
#define ERR_ACN_ENCODE_GPS_PVT_MODE		130  /**/
#define ERR_ACN_ENCODE_GPS_PVT_DATE_AND_TIME_2		144  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPT_2		158  /**/
#define ERR_ACN_ENCODE_GPS_PVT_LATITUDE_2		172  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPY_2		186  /**/
#define ERR_ACN_ENCODE_GPS_PVT_LONGITUDE_2		200  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPX_2		214  /**/
#define ERR_ACN_ENCODE_GPS_PVT_ALTITUDE_2		228  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPV_2		242  /**/
#define ERR_ACN_ENCODE_GPS_PVT_COURSE_2		256  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPD_2		270  /**/
#define ERR_ACN_ENCODE_GPS_PVT_SPEED_2		284  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPS_2		298  /**/
#define ERR_ACN_ENCODE_GPS_PVT_CLIMB_2		312  /**/
#define ERR_ACN_ENCODE_GPS_PVT_EPC_2		326  /**/
#define GPS_PVT_REQUIRED_BYTES_FOR_ACN_ENCODING       183 
#define GPS_PVT_REQUIRED_BITS_FOR_ACN_ENCODING        1458

flag GPS_PVT_ACN_Encode(const GPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_GPS_PVT		334  /**/
#define ERR_ACN_DECODE_GPS_PVT_MODE		131  /**/
#define ERR_ACN_DECODE_GPS_PVT_DATE_AND_TIME_2		145  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPT_2		159  /**/
#define ERR_ACN_DECODE_GPS_PVT_LATITUDE_2		173  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPY_2		187  /**/
#define ERR_ACN_DECODE_GPS_PVT_LONGITUDE_2		201  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPX_2		215  /**/
#define ERR_ACN_DECODE_GPS_PVT_ALTITUDE_2		229  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPV_2		243  /**/
#define ERR_ACN_DECODE_GPS_PVT_COURSE_2		257  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPD_2		271  /**/
#define ERR_ACN_DECODE_GPS_PVT_SPEED_2		285  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPS_2		299  /**/
#define ERR_ACN_DECODE_GPS_PVT_CLIMB_2		313  /**/
#define ERR_ACN_DECODE_GPS_PVT_EPC_2		327  /**/
flag GPS_PVT_ACN_Decode(GPS_PVT* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    
    byte arr[81];
} File_Name;


flag File_Name_Equal(const File_Name* pVal1, const File_Name* pVal2);

void File_Name_Initialize(File_Name* pVal);

#define ERR_FILE_NAME		36  /**/
flag File_Name_IsConstraintValid(const File_Name* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_FILE_NAME		37  /**/
#define File_Name_REQUIRED_BYTES_FOR_ENCODING       81 
#define File_Name_REQUIRED_BITS_FOR_ENCODING        648

flag File_Name_Encode(const File_Name* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILE_NAME		38  /**/
flag File_Name_Decode(File_Name* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILE_NAME		39  /**/
#define File_Name_REQUIRED_BYTES_FOR_ACN_ENCODING       81 
#define File_Name_REQUIRED_BITS_FOR_ACN_ENCODING        648

flag File_Name_ACN_Encode(const File_Name* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILE_NAME		40  /**/
flag File_Name_ACN_Decode(File_Name* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    valid = 0,
    invalid = 1
} Content_Validity;

// please use the following macros to avoid breaking code.
#define Content_Validity_valid valid
#define Content_Validity_invalid invalid

flag Content_Validity_Equal(const Content_Validity* pVal1, const Content_Validity* pVal2);

void Content_Validity_Initialize(Content_Validity* pVal);

#define ERR_CONTENT_VALIDITY		43  /**/
flag Content_Validity_IsConstraintValid(const Content_Validity* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_CONTENT_VALIDITY		44  /**/
#define Content_Validity_REQUIRED_BYTES_FOR_ENCODING       1 
#define Content_Validity_REQUIRED_BITS_FOR_ENCODING        1

flag Content_Validity_Encode(const Content_Validity* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CONTENT_VALIDITY		45  /**/
flag Content_Validity_Decode(Content_Validity* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_CONTENT_VALIDITY		46  /**/
#define Content_Validity_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define Content_Validity_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag Content_Validity_ACN_Encode(const Content_Validity* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_CONTENT_VALIDITY		47  /**/
flag Content_Validity_ACN_Decode(Content_Validity* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- IMU_All_Data --------------------------------------------*/
typedef struct {
    MGT_Raw_Data mgt_raw;
    MGT_MilliGauss_Data mgt_mgauss;
    ACC_Raw_Data accel_raw;
    ACC_MilliG_Data accel_mg;
    GYRO_Raw_Data gyro_raw;
    GYRO_MilliDPS_Data gyro_mdps;
    T_Int16 temp_raw;
    T_Float temp_celsius;
    Content_Validity mgt_valid;
    Content_Validity acc_valid;
    Content_Validity gyro_valid;
    Content_Validity temp_valid;

} IMU_All_Data;

flag IMU_All_Data_Equal(const IMU_All_Data* pVal1, const IMU_All_Data* pVal2);

void IMU_All_Data_Initialize(IMU_All_Data* pVal);

#define ERR_IMU_ALL_DATA		1051  /**/
#define ERR_IMU_ALL_DATA_MGT_RAW_2		680  /**/
#define ERR_IMU_ALL_DATA_MGT_MGAUSS_2		736  /**/
#define ERR_IMU_ALL_DATA_ACCEL_RAW_2		792  /**/
#define ERR_IMU_ALL_DATA_ACCEL_MG_2		848  /**/
#define ERR_IMU_ALL_DATA_GYRO_RAW_2		904  /**/
#define ERR_IMU_ALL_DATA_GYRO_MDPS_2		960  /**/
#define ERR_IMU_ALL_DATA_TEMP_RAW_2		974  /**/
#define ERR_IMU_ALL_DATA_TEMP_CELSIUS_2		988  /**/
#define ERR_IMU_ALL_DATA_MGT_VALID_2		1002  /**/
#define ERR_IMU_ALL_DATA_ACC_VALID_2		1016  /**/
#define ERR_IMU_ALL_DATA_GYRO_VALID_2		1030  /**/
#define ERR_IMU_ALL_DATA_TEMP_VALID_2		1044  /**/
flag IMU_All_Data_IsConstraintValid(const IMU_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_IMU_ALL_DATA		1052  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_MGT_RAW_2		681  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_MGT_MGAUSS_2		737  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_ACCEL_RAW_2		793  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_ACCEL_MG_2		849  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_GYRO_RAW_2		905  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_GYRO_MDPS_2		961  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_TEMP_RAW_2		975  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_TEMP_CELSIUS_2		989  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_MGT_VALID_2		1003  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_ACC_VALID_2		1017  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_GYRO_VALID_2		1031  /**/
#define ERR_UPER_ENCODE_IMU_ALL_DATA_TEMP_VALID_2		1045  /**/
#define IMU_All_Data_REQUIRED_BYTES_FOR_ENCODING       151 
#define IMU_All_Data_REQUIRED_BITS_FOR_ENCODING        1204

flag IMU_All_Data_Encode(const IMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_IMU_ALL_DATA		1053  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_MGT_RAW_2		682  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_MGT_MGAUSS_2		738  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_ACCEL_RAW_2		794  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_ACCEL_MG_2		850  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_GYRO_RAW_2		906  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_GYRO_MDPS_2		962  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_TEMP_RAW_2		976  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_TEMP_CELSIUS_2		990  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_MGT_VALID_2		1004  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_ACC_VALID_2		1018  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_GYRO_VALID_2		1032  /**/
#define ERR_UPER_DECODE_IMU_ALL_DATA_TEMP_VALID_2		1046  /**/
flag IMU_All_Data_Decode(IMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_IMU_ALL_DATA		1054  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_MGT_RAW_2		683  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_MGT_MGAUSS_2		739  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_ACCEL_RAW_2		795  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_ACCEL_MG_2		851  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_GYRO_RAW_2		907  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_GYRO_MDPS_2		963  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_TEMP_RAW_2		977  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_TEMP_CELSIUS_2		991  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_MGT_VALID_2		1005  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_ACC_VALID_2		1019  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_GYRO_VALID_2		1033  /**/
#define ERR_ACN_ENCODE_IMU_ALL_DATA_TEMP_VALID_2		1047  /**/
#define IMU_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       151 
#define IMU_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        1204

flag IMU_All_Data_ACN_Encode(const IMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_IMU_ALL_DATA		1055  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_MGT_RAW_2		684  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_MGT_MGAUSS_2		740  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_ACCEL_RAW_2		796  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_ACCEL_MG_2		852  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_GYRO_RAW_2		908  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_GYRO_MDPS_2		964  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_TEMP_RAW_2		978  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_TEMP_CELSIUS_2		992  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_MGT_VALID_2		1006  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_ACC_VALID_2		1020  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_GYRO_VALID_2		1034  /**/
#define ERR_ACN_DECODE_IMU_ALL_DATA_TEMP_VALID_2		1048  /**/
flag IMU_All_Data_ACN_Decode(IMU_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

/*-- IMU_Queue_elem --------------------------------------------*/
typedef struct {
    IMU_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} IMU_Queue_elem;

typedef struct {
    
    IMU_Queue_elem arr[50];
} IMU_Queue;

flag IMU_Queue_elem_Equal(const IMU_Queue_elem* pVal1, const IMU_Queue_elem* pVal2);

flag IMU_Queue_Equal(const IMU_Queue* pVal1, const IMU_Queue* pVal2);

void IMU_Queue_elem_Initialize(IMU_Queue_elem* pVal);
void IMU_Queue_Initialize(IMU_Queue* pVal);

#define ERR_IMU_QUEUE		6126  /**/
#define ERR_IMU_QUEUE_ELM		6119  /**/
#define ERR_IMU_QUEUE_ELM_DATA_2		6084  /**/
#define ERR_IMU_QUEUE_ELM_GPS_TIME_2		6098  /**/
#define ERR_IMU_QUEUE_ELM_MISSION_TIME_2		6112  /**/
flag IMU_Queue_IsConstraintValid(const IMU_Queue* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_IMU_QUEUE		6127  /**/
#define ERR_UPER_ENCODE_IMU_QUEUE_ELM		6120  /**/
#define ERR_UPER_ENCODE_IMU_QUEUE_ELM_DATA_2		6085  /**/
#define ERR_UPER_ENCODE_IMU_QUEUE_ELM_GPS_TIME_2		6099  /**/
#define ERR_UPER_ENCODE_IMU_QUEUE_ELM_MISSION_TIME_2		6113  /**/
#define IMU_Queue_REQUIRED_BYTES_FOR_ENCODING       8825 
#define IMU_Queue_REQUIRED_BITS_FOR_ENCODING        70600

flag IMU_Queue_Encode(const IMU_Queue* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_IMU_QUEUE		6128  /**/
#define ERR_UPER_DECODE_IMU_QUEUE_ELM		6121  /**/
#define ERR_UPER_DECODE_IMU_QUEUE_ELM_DATA_2		6086  /**/
#define ERR_UPER_DECODE_IMU_QUEUE_ELM_GPS_TIME_2		6100  /**/
#define ERR_UPER_DECODE_IMU_QUEUE_ELM_MISSION_TIME_2		6114  /**/
flag IMU_Queue_Decode(IMU_Queue* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_IMU_QUEUE		6129  /**/
#define ERR_ACN_ENCODE_IMU_QUEUE_ELM		6122  /**/
#define ERR_ACN_ENCODE_IMU_QUEUE_ELM_DATA_2		6087  /**/
#define ERR_ACN_ENCODE_IMU_QUEUE_ELM_GPS_TIME_2		6101  /**/
#define ERR_ACN_ENCODE_IMU_QUEUE_ELM_MISSION_TIME_2		6115  /**/
#define IMU_Queue_REQUIRED_BYTES_FOR_ACN_ENCODING       8825 
#define IMU_Queue_REQUIRED_BITS_FOR_ACN_ENCODING        70600

flag IMU_Queue_ACN_Encode(const IMU_Queue* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_IMU_QUEUE		6130  /**/
#define ERR_ACN_DECODE_IMU_QUEUE_ELM		6123  /**/
#define ERR_ACN_DECODE_IMU_QUEUE_ELM_DATA_2		6088  /**/
#define ERR_ACN_DECODE_IMU_QUEUE_ELM_GPS_TIME_2		6102  /**/
#define ERR_ACN_DECODE_IMU_QUEUE_ELM_MISSION_TIME_2		6116  /**/
flag IMU_Queue_ACN_Decode(IMU_Queue* pVal, BitStream* pBitStrm, int* pErrCode);

/*-- TC74s_All_Data_elem --------------------------------------------*/
typedef struct {
    T_Float temperature;
    Content_Validity validity;

} TC74s_All_Data_elem;

typedef struct {
    
    TC74s_All_Data_elem arr[5];
} TC74s_All_Data;

flag TC74s_All_Data_elem_Equal(const TC74s_All_Data_elem* pVal1, const TC74s_All_Data_elem* pVal2);

flag TC74s_All_Data_Equal(const TC74s_All_Data* pVal1, const TC74s_All_Data* pVal2);

void TC74s_All_Data_elem_Initialize(TC74s_All_Data_elem* pVal);
void TC74s_All_Data_Initialize(TC74s_All_Data* pVal);

#define ERR_TC74S_ALL_DATA		1114  /**/
#define ERR_TC74S_ALL_DATA_ELM		1107  /**/
#define ERR_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1086  /**/
#define ERR_TC74S_ALL_DATA_ELM_VALIDITY_2		1100  /**/
flag TC74s_All_Data_IsConstraintValid(const TC74s_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC74S_ALL_DATA		1115  /**/
#define ERR_UPER_ENCODE_TC74S_ALL_DATA_ELM		1108  /**/
#define ERR_UPER_ENCODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1087  /**/
#define ERR_UPER_ENCODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1101  /**/
#define TC74s_All_Data_REQUIRED_BYTES_FOR_ENCODING       66 
#define TC74s_All_Data_REQUIRED_BITS_FOR_ENCODING        525

flag TC74s_All_Data_Encode(const TC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC74S_ALL_DATA		1116  /**/
#define ERR_UPER_DECODE_TC74S_ALL_DATA_ELM		1109  /**/
#define ERR_UPER_DECODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1088  /**/
#define ERR_UPER_DECODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1102  /**/
flag TC74s_All_Data_Decode(TC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TC74S_ALL_DATA		1117  /**/
#define ERR_ACN_ENCODE_TC74S_ALL_DATA_ELM		1110  /**/
#define ERR_ACN_ENCODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1089  /**/
#define ERR_ACN_ENCODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1103  /**/
#define TC74s_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       66 
#define TC74s_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        525

flag TC74s_All_Data_ACN_Encode(const TC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TC74S_ALL_DATA		1118  /**/
#define ERR_ACN_DECODE_TC74S_ALL_DATA_ELM		1111  /**/
#define ERR_ACN_DECODE_TC74S_ALL_DATA_ELM_TEMPERATURE_2		1090  /**/
#define ERR_ACN_DECODE_TC74S_ALL_DATA_ELM_VALIDITY_2		1104  /**/
flag TC74s_All_Data_ACN_Decode(TC74s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PT1000s_All_Data --------------------------------------------*/


typedef struct {
    
    Content_Validity arr[7];
} PT1000s_All_Data_validity;
typedef struct {
    PT1000s_Raw_Data raw;
    PT1000s_Celsius_Data celsius;
    PT1000s_All_Data_validity validity;

} PT1000s_All_Data;

flag PT1000s_All_Data_validity_Equal(const PT1000s_All_Data_validity* pVal1, const PT1000s_All_Data_validity* pVal2);

flag PT1000s_All_Data_Equal(const PT1000s_All_Data* pVal1, const PT1000s_All_Data* pVal2);

void PT1000s_All_Data_validity_Initialize(PT1000s_All_Data_validity* pVal);
void PT1000s_All_Data_Initialize(PT1000s_All_Data* pVal);

#define ERR_PT1000S_ALL_DATA		1303  /**/
#define ERR_PT1000S_ALL_DATA_RAW_2		1247  /**/
#define ERR_PT1000S_ALL_DATA_CELSIUS_2		1275  /**/
#define ERR_PT1000S_ALL_DATA_VALIDITY		1296  /**/
#define ERR_PT1000S_ALL_DATA_VALIDITY_ELM_2		1289  /**/
flag PT1000s_All_Data_IsConstraintValid(const PT1000s_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_ALL_DATA		1304  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_RAW_2		1248  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_CELSIUS_2		1276  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_VALIDITY		1297  /**/
#define ERR_UPER_ENCODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1290  /**/
#define PT1000s_All_Data_REQUIRED_BYTES_FOR_ENCODING       274 
#define PT1000s_All_Data_REQUIRED_BITS_FOR_ENCODING        2191

flag PT1000s_All_Data_Encode(const PT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_ALL_DATA		1305  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_RAW_2		1249  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_CELSIUS_2		1277  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_VALIDITY		1298  /**/
#define ERR_UPER_DECODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1291  /**/
flag PT1000s_All_Data_Decode(PT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_ALL_DATA		1306  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_RAW_2		1250  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_CELSIUS_2		1278  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_VALIDITY		1299  /**/
#define ERR_ACN_ENCODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1292  /**/
#define PT1000s_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       274 
#define PT1000s_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        2191

flag PT1000s_All_Data_ACN_Encode(const PT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_ALL_DATA		1307  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_RAW_2		1251  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_CELSIUS_2		1279  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_VALIDITY		1300  /**/
#define ERR_ACN_DECODE_PT1000S_ALL_DATA_VALIDITY_ELM_2		1293  /**/
flag PT1000s_All_Data_ACN_Decode(PT1000s_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Heater_Data --------------------------------------------*/
typedef struct {
    T_Float power_watts;
    Content_Validity validity;

} Heater_Data;

flag Heater_Data_Equal(const Heater_Data* pVal1, const Heater_Data* pVal2);

void Heater_Data_Initialize(Heater_Data* pVal);

#define ERR_HEATER_DATA		1870  /**/
#define ERR_HEATER_DATA_POWER_WATTS_2		1849  /**/
#define ERR_HEATER_DATA_VALIDITY_2		1863  /**/
flag Heater_Data_IsConstraintValid(const Heater_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HEATER_DATA		1871  /**/
#define ERR_UPER_ENCODE_HEATER_DATA_POWER_WATTS_2		1850  /**/
#define ERR_UPER_ENCODE_HEATER_DATA_VALIDITY_2		1864  /**/
#define Heater_Data_REQUIRED_BYTES_FOR_ENCODING       14 
#define Heater_Data_REQUIRED_BITS_FOR_ENCODING        105

flag Heater_Data_Encode(const Heater_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HEATER_DATA		1872  /**/
#define ERR_UPER_DECODE_HEATER_DATA_POWER_WATTS_2		1851  /**/
#define ERR_UPER_DECODE_HEATER_DATA_VALIDITY_2		1865  /**/
flag Heater_Data_Decode(Heater_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HEATER_DATA		1873  /**/
#define ERR_ACN_ENCODE_HEATER_DATA_POWER_WATTS_2		1852  /**/
#define ERR_ACN_ENCODE_HEATER_DATA_VALIDITY_2		1866  /**/
#define Heater_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       14 
#define Heater_Data_REQUIRED_BITS_FOR_ACN_ENCODING        105

flag Heater_Data_ACN_Encode(const Heater_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HEATER_DATA		1874  /**/
#define ERR_ACN_DECODE_HEATER_DATA_POWER_WATTS_2		1853  /**/
#define ERR_ACN_DECODE_HEATER_DATA_VALIDITY_2		1867  /**/
flag Heater_Data_ACN_Decode(Heater_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PS_GUI --------------------------------------------*/
typedef struct {
    T_Double pressure_mbar;
    T_Double temperature_celsius;
    Content_Validity validity;

} PS_GUI;

flag PS_GUI_Equal(const PS_GUI* pVal1, const PS_GUI* pVal2);

void PS_GUI_Initialize(PS_GUI* pVal);

#define ERR_PS_GUI		8212  /**/
#define ERR_PS_GUI_PRESSURE_MBAR_2		8177  /**/
#define ERR_PS_GUI_TEMPERATURE_CELSIUS_2		8191  /**/
#define ERR_PS_GUI_VALIDITY_2		8205  /**/
flag PS_GUI_IsConstraintValid(const PS_GUI* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_GUI		8213  /**/
#define ERR_UPER_ENCODE_PS_GUI_PRESSURE_MBAR_2		8178  /**/
#define ERR_UPER_ENCODE_PS_GUI_TEMPERATURE_CELSIUS_2		8192  /**/
#define ERR_UPER_ENCODE_PS_GUI_VALIDITY_2		8206  /**/
#define PS_GUI_REQUIRED_BYTES_FOR_ENCODING       27 
#define PS_GUI_REQUIRED_BITS_FOR_ENCODING        209

flag PS_GUI_Encode(const PS_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_GUI		8214  /**/
#define ERR_UPER_DECODE_PS_GUI_PRESSURE_MBAR_2		8179  /**/
#define ERR_UPER_DECODE_PS_GUI_TEMPERATURE_CELSIUS_2		8193  /**/
#define ERR_UPER_DECODE_PS_GUI_VALIDITY_2		8207  /**/
flag PS_GUI_Decode(PS_GUI* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_GUI		8215  /**/
#define ERR_ACN_ENCODE_PS_GUI_PRESSURE_MBAR_2		8180  /**/
#define ERR_ACN_ENCODE_PS_GUI_TEMPERATURE_CELSIUS_2		8194  /**/
#define ERR_ACN_ENCODE_PS_GUI_VALIDITY_2		8208  /**/
#define PS_GUI_REQUIRED_BYTES_FOR_ACN_ENCODING       27 
#define PS_GUI_REQUIRED_BITS_FOR_ACN_ENCODING        209

flag PS_GUI_ACN_Encode(const PS_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_GUI		8216  /**/
#define ERR_ACN_DECODE_PS_GUI_PRESSURE_MBAR_2		8181  /**/
#define ERR_ACN_DECODE_PS_GUI_TEMPERATURE_CELSIUS_2		8195  /**/
#define ERR_ACN_DECODE_PS_GUI_VALIDITY_2		8209  /**/
flag PS_GUI_ACN_Decode(PS_GUI* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- ENV_GUI --------------------------------------------*/
/*-- ENV_GUI_anemometer --------------------------------------------*/
typedef struct {
    T_UInt64 global_counter;
    T_Float temperature_celsius;
    Content_Validity temperature_validity;

} ENV_GUI_anemometer;
typedef struct {
    PS_GUI pressure_sensor_1;
    PS_GUI pressure_sensor_2;
    ENV_GUI_anemometer anemometer;
    Heater_Data heater;

} ENV_GUI;

flag ENV_GUI_anemometer_Equal(const ENV_GUI_anemometer* pVal1, const ENV_GUI_anemometer* pVal2);

flag ENV_GUI_Equal(const ENV_GUI* pVal1, const ENV_GUI* pVal2);

void ENV_GUI_anemometer_Initialize(ENV_GUI_anemometer* pVal);
void ENV_GUI_Initialize(ENV_GUI* pVal);

#define ERR_ENV_GUI		8422  /**/
#define ERR_ENV_GUI_PRESSURE_SENSOR_1_2		8268  /**/
#define ERR_ENV_GUI_PRESSURE_SENSOR_2_2		8324  /**/
#define ERR_ENV_GUI_ANEMOMETER		8373  /**/
#define ERR_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		8338  /**/
#define ERR_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		8352  /**/
#define ERR_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		8366  /**/
#define ERR_ENV_GUI_HEATER_2		8415  /**/
flag ENV_GUI_IsConstraintValid(const ENV_GUI* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ENV_GUI		8423  /**/
#define ERR_UPER_ENCODE_ENV_GUI_PRESSURE_SENSOR_1_2		8269  /**/
#define ERR_UPER_ENCODE_ENV_GUI_PRESSURE_SENSOR_2_2		8325  /**/
#define ERR_UPER_ENCODE_ENV_GUI_ANEMOMETER		8374  /**/
#define ERR_UPER_ENCODE_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		8339  /**/
#define ERR_UPER_ENCODE_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		8353  /**/
#define ERR_UPER_ENCODE_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		8367  /**/
#define ERR_UPER_ENCODE_ENV_GUI_HEATER_2		8416  /**/
#define ENV_GUI_REQUIRED_BYTES_FOR_ENCODING       87 
#define ENV_GUI_REQUIRED_BITS_FOR_ENCODING        692

flag ENV_GUI_Encode(const ENV_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ENV_GUI		8424  /**/
#define ERR_UPER_DECODE_ENV_GUI_PRESSURE_SENSOR_1_2		8270  /**/
#define ERR_UPER_DECODE_ENV_GUI_PRESSURE_SENSOR_2_2		8326  /**/
#define ERR_UPER_DECODE_ENV_GUI_ANEMOMETER		8375  /**/
#define ERR_UPER_DECODE_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		8340  /**/
#define ERR_UPER_DECODE_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		8354  /**/
#define ERR_UPER_DECODE_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		8368  /**/
#define ERR_UPER_DECODE_ENV_GUI_HEATER_2		8417  /**/
flag ENV_GUI_Decode(ENV_GUI* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ENV_GUI		8425  /**/
#define ERR_ACN_ENCODE_ENV_GUI_PRESSURE_SENSOR_1_2		8271  /**/
#define ERR_ACN_ENCODE_ENV_GUI_PRESSURE_SENSOR_2_2		8327  /**/
#define ERR_ACN_ENCODE_ENV_GUI_ANEMOMETER		8376  /**/
#define ERR_ACN_ENCODE_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		8341  /**/
#define ERR_ACN_ENCODE_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		8355  /**/
#define ERR_ACN_ENCODE_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		8369  /**/
#define ERR_ACN_ENCODE_ENV_GUI_HEATER_2		8418  /**/
#define ENV_GUI_REQUIRED_BYTES_FOR_ACN_ENCODING       87 
#define ENV_GUI_REQUIRED_BITS_FOR_ACN_ENCODING        692

flag ENV_GUI_ACN_Encode(const ENV_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ENV_GUI		8426  /**/
#define ERR_ACN_DECODE_ENV_GUI_PRESSURE_SENSOR_1_2		8272  /**/
#define ERR_ACN_DECODE_ENV_GUI_PRESSURE_SENSOR_2_2		8328  /**/
#define ERR_ACN_DECODE_ENV_GUI_ANEMOMETER		8377  /**/
#define ERR_ACN_DECODE_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2		8342  /**/
#define ERR_ACN_DECODE_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2		8356  /**/
#define ERR_ACN_DECODE_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2		8370  /**/
#define ERR_ACN_DECODE_ENV_GUI_HEATER_2		8419  /**/
flag ENV_GUI_ACN_Decode(ENV_GUI* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint WD_TIMEOUT;


flag WD_TIMEOUT_Equal(const WD_TIMEOUT* pVal1, const WD_TIMEOUT* pVal2);

void WD_TIMEOUT_Initialize(WD_TIMEOUT* pVal);

#define ERR_WD_TIMEOUT		50  /**/
flag WD_TIMEOUT_IsConstraintValid(const WD_TIMEOUT* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WD_TIMEOUT		51  /**/
#define WD_TIMEOUT_REQUIRED_BYTES_FOR_ENCODING       1 
#define WD_TIMEOUT_REQUIRED_BITS_FOR_ENCODING        4

flag WD_TIMEOUT_Encode(const WD_TIMEOUT* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WD_TIMEOUT		52  /**/
flag WD_TIMEOUT_Decode(WD_TIMEOUT* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WD_TIMEOUT		53  /**/
#define WD_TIMEOUT_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define WD_TIMEOUT_REQUIRED_BITS_FOR_ACN_ENCODING        4

flag WD_TIMEOUT_ACN_Encode(const WD_TIMEOUT* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WD_TIMEOUT		54  /**/
flag WD_TIMEOUT_ACN_Decode(WD_TIMEOUT* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    on = 0,
    off = 1
} Heater_On_Off;

// please use the following macros to avoid breaking code.
#define Heater_On_Off_on on
#define Heater_On_Off_off off

flag Heater_On_Off_Equal(const Heater_On_Off* pVal1, const Heater_On_Off* pVal2);

void Heater_On_Off_Initialize(Heater_On_Off* pVal);

#define ERR_HEATER_ON_OFF		1877  /**/
flag Heater_On_Off_IsConstraintValid(const Heater_On_Off* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HEATER_ON_OFF		1878  /**/
#define Heater_On_Off_REQUIRED_BYTES_FOR_ENCODING       1 
#define Heater_On_Off_REQUIRED_BITS_FOR_ENCODING        1

flag Heater_On_Off_Encode(const Heater_On_Off* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HEATER_ON_OFF		1879  /**/
flag Heater_On_Off_Decode(Heater_On_Off* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HEATER_ON_OFF		1880  /**/
#define Heater_On_Off_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define Heater_On_Off_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag Heater_On_Off_ACN_Encode(const Heater_On_Off* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HEATER_ON_OFF		1881  /**/
flag Heater_On_Off_ACN_Decode(Heater_On_Off* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    a1 = 0,
    a2 = 1,
    f1 = 2,
    f2 = 3,
    f3 = 4,
    error = 5
} HTL_State;

// please use the following macros to avoid breaking code.
#define HTL_State_a1 a1
#define HTL_State_a2 a2
#define HTL_State_f1 f1
#define HTL_State_f2 f2
#define HTL_State_f3 f3
#define HTL_State_error error

flag HTL_State_Equal(const HTL_State* pVal1, const HTL_State* pVal2);

void HTL_State_Initialize(HTL_State* pVal);

#define ERR_HTL_STATE		1884  /**/
flag HTL_State_IsConstraintValid(const HTL_State* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HTL_STATE		1885  /**/
#define HTL_State_REQUIRED_BYTES_FOR_ENCODING       1 
#define HTL_State_REQUIRED_BITS_FOR_ENCODING        3

flag HTL_State_Encode(const HTL_State* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HTL_STATE		1886  /**/
flag HTL_State_Decode(HTL_State* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HTL_STATE		1887  /**/
#define HTL_State_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define HTL_State_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag HTL_State_ACN_Encode(const HTL_State* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HTL_STATE		1888  /**/
flag HTL_State_ACN_Decode(HTL_State* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- HTL_GUI --------------------------------------------*/
/*-- HTL_GUI_pt1000s --------------------------------------------*/


typedef struct {
    
    Content_Validity arr[6];
} HTL_GUI_pt1000s_validity;
typedef struct {
    T_Float aire_abajo;
    T_Float aire_arriba;
    T_Float placa_abajo;
    T_Float placa_arriba;
    T_Float infinito;
    T_Float exterior;
    HTL_GUI_pt1000s_validity validity;

} HTL_GUI_pt1000s;
/*-- HTL_GUI_tc74s --------------------------------------------*/


typedef struct {
    
    Content_Validity arr[5];
} HTL_GUI_tc74s_validity;
typedef struct {
    T_Float x_positive;
    T_Float x_negative;
    T_Float y_positive;
    T_Float y_negative;
    T_Float z_techo;
    HTL_GUI_tc74s_validity validity;

} HTL_GUI_tc74s;
typedef struct {
    HTL_State state;
    Heater_Data heater;
    T_Float delta_T;
    HTL_GUI_pt1000s pt1000s;
    HTL_GUI_tc74s tc74s;

} HTL_GUI;

flag HTL_GUI_pt1000s_validity_Equal(const HTL_GUI_pt1000s_validity* pVal1, const HTL_GUI_pt1000s_validity* pVal2);

flag HTL_GUI_pt1000s_Equal(const HTL_GUI_pt1000s* pVal1, const HTL_GUI_pt1000s* pVal2);

flag HTL_GUI_tc74s_validity_Equal(const HTL_GUI_tc74s_validity* pVal1, const HTL_GUI_tc74s_validity* pVal2);

flag HTL_GUI_tc74s_Equal(const HTL_GUI_tc74s* pVal1, const HTL_GUI_tc74s* pVal2);

flag HTL_GUI_Equal(const HTL_GUI* pVal1, const HTL_GUI* pVal2);

void HTL_GUI_pt1000s_validity_Initialize(HTL_GUI_pt1000s_validity* pVal);
void HTL_GUI_pt1000s_Initialize(HTL_GUI_pt1000s* pVal);
void HTL_GUI_tc74s_validity_Initialize(HTL_GUI_tc74s_validity* pVal);
void HTL_GUI_tc74s_Initialize(HTL_GUI_tc74s* pVal);
void HTL_GUI_Initialize(HTL_GUI* pVal);

#define ERR_HTL_GUI		7505  /**/
#define ERR_HTL_GUI_STATE_2		7232  /**/
#define ERR_HTL_GUI_HEATER_2		7274  /**/
#define ERR_HTL_GUI_DELTA_T_2		7288  /**/
#define ERR_HTL_GUI_PT1000S		7400  /**/
#define ERR_HTL_GUI_PT1000S_AIRE_ABAJO_2		7302  /**/
#define ERR_HTL_GUI_PT1000S_AIRE_ARRIBA_2		7316  /**/
#define ERR_HTL_GUI_PT1000S_PLACA_ABAJO_2		7330  /**/
#define ERR_HTL_GUI_PT1000S_PLACA_ARRIBA_2		7344  /**/
#define ERR_HTL_GUI_PT1000S_INFINITO_2		7358  /**/
#define ERR_HTL_GUI_PT1000S_EXTERIOR_2		7372  /**/
#define ERR_HTL_GUI_PT1000S_VALIDITY		7393  /**/
#define ERR_HTL_GUI_PT1000S_VALIDITY_ELM_2		7386  /**/
#define ERR_HTL_GUI_TC74S		7498  /**/
#define ERR_HTL_GUI_TC74S_X_POSITIVE_2		7414  /**/
#define ERR_HTL_GUI_TC74S_X_NEGATIVE_2		7428  /**/
#define ERR_HTL_GUI_TC74S_Y_POSITIVE_2		7442  /**/
#define ERR_HTL_GUI_TC74S_Y_NEGATIVE_2		7456  /**/
#define ERR_HTL_GUI_TC74S_Z_TECHO_2		7470  /**/
#define ERR_HTL_GUI_TC74S_VALIDITY		7491  /**/
#define ERR_HTL_GUI_TC74S_VALIDITY_ELM_2		7484  /**/
flag HTL_GUI_IsConstraintValid(const HTL_GUI* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HTL_GUI		7506  /**/
#define ERR_UPER_ENCODE_HTL_GUI_STATE_2		7233  /**/
#define ERR_UPER_ENCODE_HTL_GUI_HEATER_2		7275  /**/
#define ERR_UPER_ENCODE_HTL_GUI_DELTA_T_2		7289  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S		7401  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_AIRE_ABAJO_2		7303  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_AIRE_ARRIBA_2		7317  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_PLACA_ABAJO_2		7331  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_PLACA_ARRIBA_2		7345  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_INFINITO_2		7359  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_EXTERIOR_2		7373  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_VALIDITY		7394  /**/
#define ERR_UPER_ENCODE_HTL_GUI_PT1000S_VALIDITY_ELM_2		7387  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S		7499  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_X_POSITIVE_2		7415  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_X_NEGATIVE_2		7429  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_Y_POSITIVE_2		7443  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_Y_NEGATIVE_2		7457  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_Z_TECHO_2		7471  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_VALIDITY		7492  /**/
#define ERR_UPER_ENCODE_HTL_GUI_TC74S_VALIDITY_ELM_2		7485  /**/
#define HTL_GUI_REQUIRED_BYTES_FOR_ENCODING       171 
#define HTL_GUI_REQUIRED_BITS_FOR_ENCODING        1367

flag HTL_GUI_Encode(const HTL_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HTL_GUI		7507  /**/
#define ERR_UPER_DECODE_HTL_GUI_STATE_2		7234  /**/
#define ERR_UPER_DECODE_HTL_GUI_HEATER_2		7276  /**/
#define ERR_UPER_DECODE_HTL_GUI_DELTA_T_2		7290  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S		7402  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_AIRE_ABAJO_2		7304  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_AIRE_ARRIBA_2		7318  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_PLACA_ABAJO_2		7332  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_PLACA_ARRIBA_2		7346  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_INFINITO_2		7360  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_EXTERIOR_2		7374  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_VALIDITY		7395  /**/
#define ERR_UPER_DECODE_HTL_GUI_PT1000S_VALIDITY_ELM_2		7388  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S		7500  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_X_POSITIVE_2		7416  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_X_NEGATIVE_2		7430  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_Y_POSITIVE_2		7444  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_Y_NEGATIVE_2		7458  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_Z_TECHO_2		7472  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_VALIDITY		7493  /**/
#define ERR_UPER_DECODE_HTL_GUI_TC74S_VALIDITY_ELM_2		7486  /**/
flag HTL_GUI_Decode(HTL_GUI* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HTL_GUI		7508  /**/
#define ERR_ACN_ENCODE_HTL_GUI_STATE_2		7235  /**/
#define ERR_ACN_ENCODE_HTL_GUI_HEATER_2		7277  /**/
#define ERR_ACN_ENCODE_HTL_GUI_DELTA_T_2		7291  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S		7403  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_AIRE_ABAJO_2		7305  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_AIRE_ARRIBA_2		7319  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_PLACA_ABAJO_2		7333  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_PLACA_ARRIBA_2		7347  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_INFINITO_2		7361  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_EXTERIOR_2		7375  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_VALIDITY		7396  /**/
#define ERR_ACN_ENCODE_HTL_GUI_PT1000S_VALIDITY_ELM_2		7389  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S		7501  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_X_POSITIVE_2		7417  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_X_NEGATIVE_2		7431  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_Y_POSITIVE_2		7445  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_Y_NEGATIVE_2		7459  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_Z_TECHO_2		7473  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_VALIDITY		7494  /**/
#define ERR_ACN_ENCODE_HTL_GUI_TC74S_VALIDITY_ELM_2		7487  /**/
#define HTL_GUI_REQUIRED_BYTES_FOR_ACN_ENCODING       171 
#define HTL_GUI_REQUIRED_BITS_FOR_ACN_ENCODING        1367

flag HTL_GUI_ACN_Encode(const HTL_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HTL_GUI		7509  /**/
#define ERR_ACN_DECODE_HTL_GUI_STATE_2		7236  /**/
#define ERR_ACN_DECODE_HTL_GUI_HEATER_2		7278  /**/
#define ERR_ACN_DECODE_HTL_GUI_DELTA_T_2		7292  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S		7404  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_AIRE_ABAJO_2		7306  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_AIRE_ARRIBA_2		7320  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_PLACA_ABAJO_2		7334  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_PLACA_ARRIBA_2		7348  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_INFINITO_2		7362  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_EXTERIOR_2		7376  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_VALIDITY		7397  /**/
#define ERR_ACN_DECODE_HTL_GUI_PT1000S_VALIDITY_ELM_2		7390  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S		7502  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_X_POSITIVE_2		7418  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_X_NEGATIVE_2		7432  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_Y_POSITIVE_2		7446  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_Y_NEGATIVE_2		7460  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_Z_TECHO_2		7474  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_VALIDITY		7495  /**/
#define ERR_ACN_DECODE_HTL_GUI_TC74S_VALIDITY_ELM_2		7488  /**/
flag HTL_GUI_ACN_Decode(HTL_GUI* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    gps = 0,
    imu = 1,
    tc74s = 2,
    pt1000s = 3,
    ps1 = 4,
    ps2 = 5,
    heater1 = 6,
    heater2 = 7,
    anemometer = 8
} OBSW_DP_Filter;

// please use the following macros to avoid breaking code.
#define OBSW_DP_Filter_gps gps
#define OBSW_DP_Filter_imu imu
#define OBSW_DP_Filter_tc74s tc74s
#define OBSW_DP_Filter_pt1000s pt1000s
#define OBSW_DP_Filter_ps1 ps1
#define OBSW_DP_Filter_ps2 ps2
#define OBSW_DP_Filter_heater1 heater1
#define OBSW_DP_Filter_heater2 heater2
#define OBSW_DP_Filter_anemometer anemometer

flag OBSW_DP_Filter_Equal(const OBSW_DP_Filter* pVal1, const OBSW_DP_Filter* pVal2);

void OBSW_DP_Filter_Initialize(OBSW_DP_Filter* pVal);

#define ERR_OBSW_DP_FILTER		3830  /**/
flag OBSW_DP_Filter_IsConstraintValid(const OBSW_DP_Filter* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_OBSW_DP_FILTER		3831  /**/
#define OBSW_DP_Filter_REQUIRED_BYTES_FOR_ENCODING       1 
#define OBSW_DP_Filter_REQUIRED_BITS_FOR_ENCODING        4

flag OBSW_DP_Filter_Encode(const OBSW_DP_Filter* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_OBSW_DP_FILTER		3832  /**/
flag OBSW_DP_Filter_Decode(OBSW_DP_Filter* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_OBSW_DP_FILTER		3833  /**/
#define OBSW_DP_Filter_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define OBSW_DP_Filter_REQUIRED_BITS_FOR_ACN_ENCODING        4

flag OBSW_DP_Filter_ACN_Encode(const OBSW_DP_Filter* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_OBSW_DP_FILTER		3834  /**/
flag OBSW_DP_Filter_ACN_Decode(OBSW_DP_Filter* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int32;


flag T_Int32_Equal(const T_Int32* pVal1, const T_Int32* pVal2);

void T_Int32_Initialize(T_Int32* pVal);

#define ERR_T_INT32		8429  /**/
flag T_Int32_IsConstraintValid(const T_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT32		8430  /**/
#define T_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag T_Int32_Encode(const T_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		8431  /**/
flag T_Int32_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		8432  /**/
#define T_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag T_Int32_ACN_Encode(const T_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		8433  /**/
flag T_Int32_ACN_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    T_Int32 arr[5];
} TC74s_I2CBuses;

flag TC74s_I2CBuses_Equal(const TC74s_I2CBuses* pVal1, const TC74s_I2CBuses* pVal2);

void TC74s_I2CBuses_Initialize(TC74s_I2CBuses* pVal);

#define ERR_TC74S_I2CBUSES		1072  /**/
#define ERR_TC74S_I2CBUSES_ELM_2		1065  /**/
flag TC74s_I2CBuses_IsConstraintValid(const TC74s_I2CBuses* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC74S_I2CBUSES		1073  /**/
#define ERR_UPER_ENCODE_TC74S_I2CBUSES_ELM_2		1066  /**/
#define TC74s_I2CBuses_REQUIRED_BYTES_FOR_ENCODING       20 
#define TC74s_I2CBuses_REQUIRED_BITS_FOR_ENCODING        160

flag TC74s_I2CBuses_Encode(const TC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC74S_I2CBUSES		1074  /**/
#define ERR_UPER_DECODE_TC74S_I2CBUSES_ELM_2		1067  /**/
flag TC74s_I2CBuses_Decode(TC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TC74S_I2CBUSES		1075  /**/
#define ERR_ACN_ENCODE_TC74S_I2CBUSES_ELM_2		1068  /**/
#define TC74s_I2CBuses_REQUIRED_BYTES_FOR_ACN_ENCODING       20 
#define TC74s_I2CBuses_REQUIRED_BITS_FOR_ACN_ENCODING        160

flag TC74s_I2CBuses_ACN_Encode(const TC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TC74S_I2CBUSES		1076  /**/
#define ERR_ACN_DECODE_TC74S_I2CBUSES_ELM_2		1069  /**/
flag TC74s_I2CBuses_ACN_Decode(TC74s_I2CBuses* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    T_Int32 arr[7];
} PT1000s_Channels;

flag PT1000s_Channels_Equal(const PT1000s_Channels* pVal1, const PT1000s_Channels* pVal2);

void PT1000s_Channels_Initialize(PT1000s_Channels* pVal);

#define ERR_PT1000S_CHANNELS		1135  /**/
#define ERR_PT1000S_CHANNELS_ELM_2		1128  /**/
flag PT1000s_Channels_IsConstraintValid(const PT1000s_Channels* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PT1000S_CHANNELS		1136  /**/
#define ERR_UPER_ENCODE_PT1000S_CHANNELS_ELM_2		1129  /**/
#define PT1000s_Channels_REQUIRED_BYTES_FOR_ENCODING       28 
#define PT1000s_Channels_REQUIRED_BITS_FOR_ENCODING        224

flag PT1000s_Channels_Encode(const PT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PT1000S_CHANNELS		1137  /**/
#define ERR_UPER_DECODE_PT1000S_CHANNELS_ELM_2		1130  /**/
flag PT1000s_Channels_Decode(PT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PT1000S_CHANNELS		1138  /**/
#define ERR_ACN_ENCODE_PT1000S_CHANNELS_ELM_2		1131  /**/
#define PT1000s_Channels_REQUIRED_BYTES_FOR_ACN_ENCODING       28 
#define PT1000s_Channels_REQUIRED_BITS_FOR_ACN_ENCODING        224

flag PT1000s_Channels_ACN_Encode(const PT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PT1000S_CHANNELS		1139  /**/
#define ERR_ACN_DECODE_PT1000S_CHANNELS_ELM_2		1132  /**/
flag PT1000s_Channels_ACN_Decode(PT1000s_Channels* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PS_Processed_Data --------------------------------------------*/
typedef struct {
    T_Int32 pressure;
    T_Int32 temp;

} PS_Processed_Data;

flag PS_Processed_Data_Equal(const PS_Processed_Data* pVal1, const PS_Processed_Data* pVal2);

void PS_Processed_Data_Initialize(PS_Processed_Data* pVal);

#define ERR_PS_PROCESSED_DATA		1548  /**/
#define ERR_PS_PROCESSED_DATA_PRESSURE_2		1527  /**/
#define ERR_PS_PROCESSED_DATA_TEMP_2		1541  /**/
flag PS_Processed_Data_IsConstraintValid(const PS_Processed_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_PROCESSED_DATA		1549  /**/
#define ERR_UPER_ENCODE_PS_PROCESSED_DATA_PRESSURE_2		1528  /**/
#define ERR_UPER_ENCODE_PS_PROCESSED_DATA_TEMP_2		1542  /**/
#define PS_Processed_Data_REQUIRED_BYTES_FOR_ENCODING       8 
#define PS_Processed_Data_REQUIRED_BITS_FOR_ENCODING        64

flag PS_Processed_Data_Encode(const PS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_PROCESSED_DATA		1550  /**/
#define ERR_UPER_DECODE_PS_PROCESSED_DATA_PRESSURE_2		1529  /**/
#define ERR_UPER_DECODE_PS_PROCESSED_DATA_TEMP_2		1543  /**/
flag PS_Processed_Data_Decode(PS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_PROCESSED_DATA		1551  /**/
#define ERR_ACN_ENCODE_PS_PROCESSED_DATA_PRESSURE_2		1530  /**/
#define ERR_ACN_ENCODE_PS_PROCESSED_DATA_TEMP_2		1544  /**/
#define PS_Processed_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define PS_Processed_Data_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag PS_Processed_Data_ACN_Encode(const PS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_PROCESSED_DATA		1552  /**/
#define ERR_ACN_DECODE_PS_PROCESSED_DATA_PRESSURE_2		1531  /**/
#define ERR_ACN_DECODE_PS_PROCESSED_DATA_TEMP_2		1545  /**/
flag PS_Processed_Data_ACN_Decode(PS_Processed_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- TM --------------------------------------------*/
/*-- TM_imu --------------------------------------------*/
typedef struct {
    MGT_MilliGauss_Data mgt_mgauss;
    ACC_MilliG_Data accel_mg;
    GYRO_MilliDPS_Data gyro_mdps;
    T_Float temp_celsius;
    Content_Validity mgt_valid;
    Content_Validity acc_valid;
    Content_Validity gyro_valid;
    Content_Validity temp_valid;

} TM_imu;
typedef struct {
    HTL_State state_htl;
    Heater_Data heater1;
    Heater_Data heater2;
    TC74s_All_Data tc74s;
    PT1000s_All_Data pt1000s;
    GPS_PVT gps;
    TM_imu imu;
    PS_Processed_Data ps1;
    PS_Processed_Data ps2;
    Content_Validity ps1_validity;
    Content_Validity ps2_validity;
    T_UInt64 anemometer;

} TM;

flag TM_imu_Equal(const TM_imu* pVal1, const TM_imu* pVal2);

flag TM_Equal(const TM* pVal1, const TM* pVal2);

void TM_imu_Initialize(TM_imu* pVal);
void TM_Initialize(TM* pVal);

#define ERR_TM		6980  /**/
#define ERR_TM_STATE_HTL_2		6140  /**/
#define ERR_TM_HEATER1_2		6182  /**/
#define ERR_TM_HEATER2_2		6224  /**/
#define ERR_TM_TC74S_2		6273  /**/
#define ERR_TM_PT1000S_2		6385  /**/
#define ERR_TM_GPS_2		6602  /**/
#define ERR_TM_IMU		6847  /**/
#define ERR_TM_IMU_MGT_MGAUSS_2		6658  /**/
#define ERR_TM_IMU_ACCEL_MG_2		6714  /**/
#define ERR_TM_IMU_GYRO_MDPS_2		6770  /**/
#define ERR_TM_IMU_TEMP_CELSIUS_2		6784  /**/
#define ERR_TM_IMU_MGT_VALID_2		6798  /**/
#define ERR_TM_IMU_ACC_VALID_2		6812  /**/
#define ERR_TM_IMU_GYRO_VALID_2		6826  /**/
#define ERR_TM_IMU_TEMP_VALID_2		6840  /**/
#define ERR_TM_PS1_2		6889  /**/
#define ERR_TM_PS2_2		6931  /**/
#define ERR_TM_PS1_VALIDITY_2		6945  /**/
#define ERR_TM_PS2_VALIDITY_2		6959  /**/
#define ERR_TM_ANEMOMETER_2		6973  /**/
flag TM_IsConstraintValid(const TM* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM		6981  /**/
#define ERR_UPER_ENCODE_TM_STATE_HTL_2		6141  /**/
#define ERR_UPER_ENCODE_TM_HEATER1_2		6183  /**/
#define ERR_UPER_ENCODE_TM_HEATER2_2		6225  /**/
#define ERR_UPER_ENCODE_TM_TC74S_2		6274  /**/
#define ERR_UPER_ENCODE_TM_PT1000S_2		6386  /**/
#define ERR_UPER_ENCODE_TM_GPS_2		6603  /**/
#define ERR_UPER_ENCODE_TM_IMU		6848  /**/
#define ERR_UPER_ENCODE_TM_IMU_MGT_MGAUSS_2		6659  /**/
#define ERR_UPER_ENCODE_TM_IMU_ACCEL_MG_2		6715  /**/
#define ERR_UPER_ENCODE_TM_IMU_GYRO_MDPS_2		6771  /**/
#define ERR_UPER_ENCODE_TM_IMU_TEMP_CELSIUS_2		6785  /**/
#define ERR_UPER_ENCODE_TM_IMU_MGT_VALID_2		6799  /**/
#define ERR_UPER_ENCODE_TM_IMU_ACC_VALID_2		6813  /**/
#define ERR_UPER_ENCODE_TM_IMU_GYRO_VALID_2		6827  /**/
#define ERR_UPER_ENCODE_TM_IMU_TEMP_VALID_2		6841  /**/
#define ERR_UPER_ENCODE_TM_PS1_2		6890  /**/
#define ERR_UPER_ENCODE_TM_PS2_2		6932  /**/
#define ERR_UPER_ENCODE_TM_PS1_VALIDITY_2		6946  /**/
#define ERR_UPER_ENCODE_TM_PS2_VALIDITY_2		6960  /**/
#define ERR_UPER_ENCODE_TM_ANEMOMETER_2		6974  /**/
#define TM_REQUIRED_BYTES_FOR_ENCODING       704 
#define TM_REQUIRED_BITS_FOR_ENCODING        5625

flag TM_Encode(const TM* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM		6982  /**/
#define ERR_UPER_DECODE_TM_STATE_HTL_2		6142  /**/
#define ERR_UPER_DECODE_TM_HEATER1_2		6184  /**/
#define ERR_UPER_DECODE_TM_HEATER2_2		6226  /**/
#define ERR_UPER_DECODE_TM_TC74S_2		6275  /**/
#define ERR_UPER_DECODE_TM_PT1000S_2		6387  /**/
#define ERR_UPER_DECODE_TM_GPS_2		6604  /**/
#define ERR_UPER_DECODE_TM_IMU		6849  /**/
#define ERR_UPER_DECODE_TM_IMU_MGT_MGAUSS_2		6660  /**/
#define ERR_UPER_DECODE_TM_IMU_ACCEL_MG_2		6716  /**/
#define ERR_UPER_DECODE_TM_IMU_GYRO_MDPS_2		6772  /**/
#define ERR_UPER_DECODE_TM_IMU_TEMP_CELSIUS_2		6786  /**/
#define ERR_UPER_DECODE_TM_IMU_MGT_VALID_2		6800  /**/
#define ERR_UPER_DECODE_TM_IMU_ACC_VALID_2		6814  /**/
#define ERR_UPER_DECODE_TM_IMU_GYRO_VALID_2		6828  /**/
#define ERR_UPER_DECODE_TM_IMU_TEMP_VALID_2		6842  /**/
#define ERR_UPER_DECODE_TM_PS1_2		6891  /**/
#define ERR_UPER_DECODE_TM_PS2_2		6933  /**/
#define ERR_UPER_DECODE_TM_PS1_VALIDITY_2		6947  /**/
#define ERR_UPER_DECODE_TM_PS2_VALIDITY_2		6961  /**/
#define ERR_UPER_DECODE_TM_ANEMOMETER_2		6975  /**/
flag TM_Decode(TM* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TM		6983  /**/
#define ERR_ACN_ENCODE_TM_STATE_HTL_2		6143  /**/
#define ERR_ACN_ENCODE_TM_HEATER1_2		6185  /**/
#define ERR_ACN_ENCODE_TM_HEATER2_2		6227  /**/
#define ERR_ACN_ENCODE_TM_TC74S_2		6276  /**/
#define ERR_ACN_ENCODE_TM_PT1000S_2		6388  /**/
#define ERR_ACN_ENCODE_TM_GPS_2		6605  /**/
#define ERR_ACN_ENCODE_TM_IMU		6850  /**/
#define ERR_ACN_ENCODE_TM_IMU_MGT_MGAUSS_2		6661  /**/
#define ERR_ACN_ENCODE_TM_IMU_ACCEL_MG_2		6717  /**/
#define ERR_ACN_ENCODE_TM_IMU_GYRO_MDPS_2		6773  /**/
#define ERR_ACN_ENCODE_TM_IMU_TEMP_CELSIUS_2		6787  /**/
#define ERR_ACN_ENCODE_TM_IMU_MGT_VALID_2		6801  /**/
#define ERR_ACN_ENCODE_TM_IMU_ACC_VALID_2		6815  /**/
#define ERR_ACN_ENCODE_TM_IMU_GYRO_VALID_2		6829  /**/
#define ERR_ACN_ENCODE_TM_IMU_TEMP_VALID_2		6843  /**/
#define ERR_ACN_ENCODE_TM_PS1_2		6892  /**/
#define ERR_ACN_ENCODE_TM_PS2_2		6934  /**/
#define ERR_ACN_ENCODE_TM_PS1_VALIDITY_2		6948  /**/
#define ERR_ACN_ENCODE_TM_PS2_VALIDITY_2		6962  /**/
#define ERR_ACN_ENCODE_TM_ANEMOMETER_2		6976  /**/
#define TM_REQUIRED_BYTES_FOR_ACN_ENCODING       704 
#define TM_REQUIRED_BITS_FOR_ACN_ENCODING        5625

flag TM_ACN_Encode(const TM* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TM		6984  /**/
#define ERR_ACN_DECODE_TM_STATE_HTL_2		6144  /**/
#define ERR_ACN_DECODE_TM_HEATER1_2		6186  /**/
#define ERR_ACN_DECODE_TM_HEATER2_2		6228  /**/
#define ERR_ACN_DECODE_TM_TC74S_2		6277  /**/
#define ERR_ACN_DECODE_TM_PT1000S_2		6389  /**/
#define ERR_ACN_DECODE_TM_GPS_2		6606  /**/
#define ERR_ACN_DECODE_TM_IMU		6851  /**/
#define ERR_ACN_DECODE_TM_IMU_MGT_MGAUSS_2		6662  /**/
#define ERR_ACN_DECODE_TM_IMU_ACCEL_MG_2		6718  /**/
#define ERR_ACN_DECODE_TM_IMU_GYRO_MDPS_2		6774  /**/
#define ERR_ACN_DECODE_TM_IMU_TEMP_CELSIUS_2		6788  /**/
#define ERR_ACN_DECODE_TM_IMU_MGT_VALID_2		6802  /**/
#define ERR_ACN_DECODE_TM_IMU_ACC_VALID_2		6816  /**/
#define ERR_ACN_DECODE_TM_IMU_GYRO_VALID_2		6830  /**/
#define ERR_ACN_DECODE_TM_IMU_TEMP_VALID_2		6844  /**/
#define ERR_ACN_DECODE_TM_PS1_2		6893  /**/
#define ERR_ACN_DECODE_TM_PS2_2		6935  /**/
#define ERR_ACN_DECODE_TM_PS1_VALIDITY_2		6949  /**/
#define ERR_ACN_DECODE_TM_PS2_VALIDITY_2		6963  /**/
#define ERR_ACN_DECODE_TM_ANEMOMETER_2		6977  /**/
flag TM_ACN_Decode(TM* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Date_Time --------------------------------------------*/
typedef struct {
    T_Int32 day;
    T_Int32 month;
    T_Int32 year;
    T_Int32 hour;
    T_Int32 minute;
    T_Int32 second;

} Date_Time;

flag Date_Time_Equal(const Date_Time* pVal1, const Date_Time* pVal2);

void Date_Time_Initialize(Date_Time* pVal);

#define ERR_DATE_TIME		7596  /**/
#define ERR_DATE_TIME_DAY_2		7519  /**/
#define ERR_DATE_TIME_MONTH_2		7533  /**/
#define ERR_DATE_TIME_YEAR_2		7547  /**/
#define ERR_DATE_TIME_HOUR_2		7561  /**/
#define ERR_DATE_TIME_MINUTE_2		7575  /**/
#define ERR_DATE_TIME_SECOND_2		7589  /**/
flag Date_Time_IsConstraintValid(const Date_Time* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DATE_TIME		7597  /**/
#define ERR_UPER_ENCODE_DATE_TIME_DAY_2		7520  /**/
#define ERR_UPER_ENCODE_DATE_TIME_MONTH_2		7534  /**/
#define ERR_UPER_ENCODE_DATE_TIME_YEAR_2		7548  /**/
#define ERR_UPER_ENCODE_DATE_TIME_HOUR_2		7562  /**/
#define ERR_UPER_ENCODE_DATE_TIME_MINUTE_2		7576  /**/
#define ERR_UPER_ENCODE_DATE_TIME_SECOND_2		7590  /**/
#define Date_Time_REQUIRED_BYTES_FOR_ENCODING       24 
#define Date_Time_REQUIRED_BITS_FOR_ENCODING        192

flag Date_Time_Encode(const Date_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DATE_TIME		7598  /**/
#define ERR_UPER_DECODE_DATE_TIME_DAY_2		7521  /**/
#define ERR_UPER_DECODE_DATE_TIME_MONTH_2		7535  /**/
#define ERR_UPER_DECODE_DATE_TIME_YEAR_2		7549  /**/
#define ERR_UPER_DECODE_DATE_TIME_HOUR_2		7563  /**/
#define ERR_UPER_DECODE_DATE_TIME_MINUTE_2		7577  /**/
#define ERR_UPER_DECODE_DATE_TIME_SECOND_2		7591  /**/
flag Date_Time_Decode(Date_Time* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DATE_TIME		7599  /**/
#define ERR_ACN_ENCODE_DATE_TIME_DAY_2		7522  /**/
#define ERR_ACN_ENCODE_DATE_TIME_MONTH_2		7536  /**/
#define ERR_ACN_ENCODE_DATE_TIME_YEAR_2		7550  /**/
#define ERR_ACN_ENCODE_DATE_TIME_HOUR_2		7564  /**/
#define ERR_ACN_ENCODE_DATE_TIME_MINUTE_2		7578  /**/
#define ERR_ACN_ENCODE_DATE_TIME_SECOND_2		7592  /**/
#define Date_Time_REQUIRED_BYTES_FOR_ACN_ENCODING       24 
#define Date_Time_REQUIRED_BITS_FOR_ACN_ENCODING        192

flag Date_Time_ACN_Encode(const Date_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DATE_TIME		7600  /**/
#define ERR_ACN_DECODE_DATE_TIME_DAY_2		7523  /**/
#define ERR_ACN_DECODE_DATE_TIME_MONTH_2		7537  /**/
#define ERR_ACN_DECODE_DATE_TIME_YEAR_2		7551  /**/
#define ERR_ACN_DECODE_DATE_TIME_HOUR_2		7565  /**/
#define ERR_ACN_DECODE_DATE_TIME_MINUTE_2		7579  /**/
#define ERR_ACN_DECODE_DATE_TIME_SECOND_2		7593  /**/
flag Date_Time_ACN_Decode(Date_Time* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- ATT_GUI --------------------------------------------*/
/*-- ATT_GUI_imu --------------------------------------------*/
typedef struct {
    MGT_MilliGauss_Data mgt_mgauss;
    ACC_MilliG_Data accel_mg;
    GYRO_MilliDPS_Data gyro_mdps;
    T_Float temp_celsius;
    Content_Validity mgt_valid;
    Content_Validity acc_valid;
    Content_Validity gyro_valid;
    Content_Validity temp_valid;

} ATT_GUI_imu;
typedef struct {
    GPS_PVT gps;
    Date_Time gps_date_time;
    ATT_GUI_imu imu;

} ATT_GUI;

flag ATT_GUI_imu_Equal(const ATT_GUI_imu* pVal1, const ATT_GUI_imu* pVal2);

flag ATT_GUI_Equal(const ATT_GUI* pVal1, const ATT_GUI* pVal2);

void ATT_GUI_imu_Initialize(ATT_GUI_imu* pVal);
void ATT_GUI_Initialize(ATT_GUI* pVal);

#define ERR_ATT_GUI		8163  /**/
#define ERR_ATT_GUI_GPS_2		7813  /**/
#define ERR_ATT_GUI_GPS_DATE_TIME_2		7911  /**/
#define ERR_ATT_GUI_IMU		8156  /**/
#define ERR_ATT_GUI_IMU_MGT_MGAUSS_2		7967  /**/
#define ERR_ATT_GUI_IMU_ACCEL_MG_2		8023  /**/
#define ERR_ATT_GUI_IMU_GYRO_MDPS_2		8079  /**/
#define ERR_ATT_GUI_IMU_TEMP_CELSIUS_2		8093  /**/
#define ERR_ATT_GUI_IMU_MGT_VALID_2		8107  /**/
#define ERR_ATT_GUI_IMU_ACC_VALID_2		8121  /**/
#define ERR_ATT_GUI_IMU_GYRO_VALID_2		8135  /**/
#define ERR_ATT_GUI_IMU_TEMP_VALID_2		8149  /**/
flag ATT_GUI_IsConstraintValid(const ATT_GUI* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ATT_GUI		8164  /**/
#define ERR_UPER_ENCODE_ATT_GUI_GPS_2		7814  /**/
#define ERR_UPER_ENCODE_ATT_GUI_GPS_DATE_TIME_2		7912  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU		8157  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_MGT_MGAUSS_2		7968  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_ACCEL_MG_2		8024  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_GYRO_MDPS_2		8080  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_TEMP_CELSIUS_2		8094  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_MGT_VALID_2		8108  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_ACC_VALID_2		8122  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_GYRO_VALID_2		8136  /**/
#define ERR_UPER_ENCODE_ATT_GUI_IMU_TEMP_VALID_2		8150  /**/
#define ATT_GUI_REQUIRED_BYTES_FOR_ENCODING       337 
#define ATT_GUI_REQUIRED_BITS_FOR_ENCODING        2694

flag ATT_GUI_Encode(const ATT_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ATT_GUI		8165  /**/
#define ERR_UPER_DECODE_ATT_GUI_GPS_2		7815  /**/
#define ERR_UPER_DECODE_ATT_GUI_GPS_DATE_TIME_2		7913  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU		8158  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_MGT_MGAUSS_2		7969  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_ACCEL_MG_2		8025  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_GYRO_MDPS_2		8081  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_TEMP_CELSIUS_2		8095  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_MGT_VALID_2		8109  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_ACC_VALID_2		8123  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_GYRO_VALID_2		8137  /**/
#define ERR_UPER_DECODE_ATT_GUI_IMU_TEMP_VALID_2		8151  /**/
flag ATT_GUI_Decode(ATT_GUI* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ATT_GUI		8166  /**/
#define ERR_ACN_ENCODE_ATT_GUI_GPS_2		7816  /**/
#define ERR_ACN_ENCODE_ATT_GUI_GPS_DATE_TIME_2		7914  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU		8159  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_MGT_MGAUSS_2		7970  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_ACCEL_MG_2		8026  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_GYRO_MDPS_2		8082  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_TEMP_CELSIUS_2		8096  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_MGT_VALID_2		8110  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_ACC_VALID_2		8124  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_GYRO_VALID_2		8138  /**/
#define ERR_ACN_ENCODE_ATT_GUI_IMU_TEMP_VALID_2		8152  /**/
#define ATT_GUI_REQUIRED_BYTES_FOR_ACN_ENCODING       337 
#define ATT_GUI_REQUIRED_BITS_FOR_ACN_ENCODING        2694

flag ATT_GUI_ACN_Encode(const ATT_GUI* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ATT_GUI		8167  /**/
#define ERR_ACN_DECODE_ATT_GUI_GPS_2		7817  /**/
#define ERR_ACN_DECODE_ATT_GUI_GPS_DATE_TIME_2		7915  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU		8160  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_MGT_MGAUSS_2		7971  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_ACCEL_MG_2		8027  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_GYRO_MDPS_2		8083  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_TEMP_CELSIUS_2		8097  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_MGT_VALID_2		8111  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_ACC_VALID_2		8125  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_GYRO_VALID_2		8139  /**/
#define ERR_ACN_DECODE_ATT_GUI_IMU_TEMP_VALID_2		8153  /**/
flag ATT_GUI_ACN_Decode(ATT_GUI* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt32;


flag T_UInt32_Equal(const T_UInt32* pVal1, const T_UInt32* pVal2);

void T_UInt32_Initialize(T_UInt32* pVal);

#define ERR_T_UINT32		8436  /**/
flag T_UInt32_IsConstraintValid(const T_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT32		8437  /**/
#define T_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag T_UInt32_Encode(const T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		8438  /**/
flag T_UInt32_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		8439  /**/
#define T_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag T_UInt32_ACN_Encode(const T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		8440  /**/
flag T_UInt32_ACN_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PS_Raw_Data --------------------------------------------*/
typedef struct {
    T_UInt32 d1;
    T_UInt32 d2;

} PS_Raw_Data;

flag PS_Raw_Data_Equal(const PS_Raw_Data* pVal1, const PS_Raw_Data* pVal2);

void PS_Raw_Data_Initialize(PS_Raw_Data* pVal);

#define ERR_PS_RAW_DATA		1513  /**/
#define ERR_PS_RAW_DATA_D1_2		1492  /**/
#define ERR_PS_RAW_DATA_D2_2		1506  /**/
flag PS_Raw_Data_IsConstraintValid(const PS_Raw_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_RAW_DATA		1514  /**/
#define ERR_UPER_ENCODE_PS_RAW_DATA_D1_2		1493  /**/
#define ERR_UPER_ENCODE_PS_RAW_DATA_D2_2		1507  /**/
#define PS_Raw_Data_REQUIRED_BYTES_FOR_ENCODING       8 
#define PS_Raw_Data_REQUIRED_BITS_FOR_ENCODING        64

flag PS_Raw_Data_Encode(const PS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_RAW_DATA		1515  /**/
#define ERR_UPER_DECODE_PS_RAW_DATA_D1_2		1494  /**/
#define ERR_UPER_DECODE_PS_RAW_DATA_D2_2		1508  /**/
flag PS_Raw_Data_Decode(PS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_RAW_DATA		1516  /**/
#define ERR_ACN_ENCODE_PS_RAW_DATA_D1_2		1495  /**/
#define ERR_ACN_ENCODE_PS_RAW_DATA_D2_2		1509  /**/
#define PS_Raw_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define PS_Raw_Data_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag PS_Raw_Data_ACN_Encode(const PS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_RAW_DATA		1517  /**/
#define ERR_ACN_DECODE_PS_RAW_DATA_D1_2		1496  /**/
#define ERR_ACN_DECODE_PS_RAW_DATA_D2_2		1510  /**/
flag PS_Raw_Data_ACN_Decode(PS_Raw_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PS_All_Data --------------------------------------------*/
typedef struct {
    PS_Calibration_Data calib;
    PS_Raw_Data raw;
    PS_Processed_Data processed;
    Content_Validity validity;

    struct {
        unsigned int validity:1;
    } exist;

} PS_All_Data;

flag PS_All_Data_Equal(const PS_All_Data* pVal1, const PS_All_Data* pVal2);

void PS_All_Data_Initialize(PS_All_Data* pVal);

#define ERR_PS_ALL_DATA		1835  /**/
#define ERR_PS_ALL_DATA_CALIB_2		1730  /**/
#define ERR_PS_ALL_DATA_RAW_2		1772  /**/
#define ERR_PS_ALL_DATA_PROCESSED_2		1814  /**/
#define ERR_PS_ALL_DATA_VALIDITY_2		1828  /**/
flag PS_All_Data_IsConstraintValid(const PS_All_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PS_ALL_DATA		1836  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_CALIB_2		1731  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_RAW_2		1773  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_PROCESSED_2		1815  /**/
#define ERR_UPER_ENCODE_PS_ALL_DATA_VALIDITY_2		1829  /**/
#define PS_All_Data_REQUIRED_BYTES_FOR_ENCODING       107 
#define PS_All_Data_REQUIRED_BITS_FOR_ENCODING        850

flag PS_All_Data_Encode(const PS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PS_ALL_DATA		1837  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_CALIB_2		1732  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_RAW_2		1774  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_PROCESSED_2		1816  /**/
#define ERR_UPER_DECODE_PS_ALL_DATA_VALIDITY_2		1830  /**/
flag PS_All_Data_Decode(PS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PS_ALL_DATA		1838  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_CALIB_2		1733  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_RAW_2		1775  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_PROCESSED_2		1817  /**/
#define ERR_ACN_ENCODE_PS_ALL_DATA_VALIDITY_2		1831  /**/
#define PS_All_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       107 
#define PS_All_Data_REQUIRED_BITS_FOR_ACN_ENCODING        850

flag PS_All_Data_ACN_Encode(const PS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PS_ALL_DATA		1839  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_CALIB_2		1734  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_RAW_2		1776  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_PROCESSED_2		1818  /**/
#define ERR_ACN_DECODE_PS_ALL_DATA_VALIDITY_2		1832  /**/
flag PS_All_Data_ACN_Decode(PS_All_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- OBSW_DP_Data --------------------------------------------*/
/*-- OBSW_DP_Data_gps --------------------------------------------*/
typedef struct {
    GPS_PVT data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_gps;
/*-- OBSW_DP_Data_imu --------------------------------------------*/
typedef struct {
    IMU_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_imu;
/*-- OBSW_DP_Data_tc74s --------------------------------------------*/
typedef struct {
    TC74s_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_tc74s;
/*-- OBSW_DP_Data_pt1000s --------------------------------------------*/
typedef struct {
    PT1000s_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_pt1000s;
/*-- OBSW_DP_Data_ps1 --------------------------------------------*/
typedef struct {
    PS_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_ps1;
/*-- OBSW_DP_Data_ps2 --------------------------------------------*/
typedef struct {
    PS_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_ps2;
/*-- OBSW_DP_Data_heater1 --------------------------------------------*/
typedef struct {
    Heater_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_heater1;
/*-- OBSW_DP_Data_heater2 --------------------------------------------*/
typedef struct {
    Heater_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_heater2;
/*-- OBSW_DP_Data_anemometer --------------------------------------------*/
typedef struct {
    T_UInt64 data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_Data_anemometer;
typedef struct {
    OBSW_DP_Data_gps gps;
    OBSW_DP_Data_imu imu;
    OBSW_DP_Data_tc74s tc74s;
    OBSW_DP_Data_pt1000s pt1000s;
    OBSW_DP_Data_ps1 ps1;
    OBSW_DP_Data_ps2 ps2;
    OBSW_DP_Data_heater1 heater1;
    OBSW_DP_Data_heater2 heater2;
    OBSW_DP_Data_anemometer anemometer;

    struct {
        unsigned int gps:1;
        unsigned int imu:1;
        unsigned int tc74s:1;
        unsigned int pt1000s:1;
        unsigned int ps1:1;
        unsigned int ps2:1;
        unsigned int heater1:1;
        unsigned int heater2:1;
        unsigned int anemometer:1;
    } exist;

} OBSW_DP_Data;

flag OBSW_DP_Data_gps_Equal(const OBSW_DP_Data_gps* pVal1, const OBSW_DP_Data_gps* pVal2);

flag OBSW_DP_Data_imu_Equal(const OBSW_DP_Data_imu* pVal1, const OBSW_DP_Data_imu* pVal2);

flag OBSW_DP_Data_tc74s_Equal(const OBSW_DP_Data_tc74s* pVal1, const OBSW_DP_Data_tc74s* pVal2);

flag OBSW_DP_Data_pt1000s_Equal(const OBSW_DP_Data_pt1000s* pVal1, const OBSW_DP_Data_pt1000s* pVal2);

flag OBSW_DP_Data_ps1_Equal(const OBSW_DP_Data_ps1* pVal1, const OBSW_DP_Data_ps1* pVal2);

flag OBSW_DP_Data_ps2_Equal(const OBSW_DP_Data_ps2* pVal1, const OBSW_DP_Data_ps2* pVal2);

flag OBSW_DP_Data_heater1_Equal(const OBSW_DP_Data_heater1* pVal1, const OBSW_DP_Data_heater1* pVal2);

flag OBSW_DP_Data_heater2_Equal(const OBSW_DP_Data_heater2* pVal1, const OBSW_DP_Data_heater2* pVal2);

flag OBSW_DP_Data_anemometer_Equal(const OBSW_DP_Data_anemometer* pVal1, const OBSW_DP_Data_anemometer* pVal2);

flag OBSW_DP_Data_Equal(const OBSW_DP_Data* pVal1, const OBSW_DP_Data* pVal2);

void OBSW_DP_Data_gps_Initialize(OBSW_DP_Data_gps* pVal);
void OBSW_DP_Data_imu_Initialize(OBSW_DP_Data_imu* pVal);
void OBSW_DP_Data_tc74s_Initialize(OBSW_DP_Data_tc74s* pVal);
void OBSW_DP_Data_pt1000s_Initialize(OBSW_DP_Data_pt1000s* pVal);
void OBSW_DP_Data_ps1_Initialize(OBSW_DP_Data_ps1* pVal);
void OBSW_DP_Data_ps2_Initialize(OBSW_DP_Data_ps2* pVal);
void OBSW_DP_Data_heater1_Initialize(OBSW_DP_Data_heater1* pVal);
void OBSW_DP_Data_heater2_Initialize(OBSW_DP_Data_heater2* pVal);
void OBSW_DP_Data_anemometer_Initialize(OBSW_DP_Data_anemometer* pVal);
void OBSW_DP_Data_Initialize(OBSW_DP_Data* pVal);

#define ERR_OBSW_DP_DATA		3823  /**/
#define ERR_OBSW_DP_DATA_GPS		2255  /**/
#define ERR_OBSW_DP_DATA_GPS_DATA_2		2220  /**/
#define ERR_OBSW_DP_DATA_GPS_GPS_TIME_2		2234  /**/
#define ERR_OBSW_DP_DATA_GPS_MISSION_TIME_2		2248  /**/
#define ERR_OBSW_DP_DATA_IMU		2724  /**/
#define ERR_OBSW_DP_DATA_IMU_DATA_2		2689  /**/
#define ERR_OBSW_DP_DATA_IMU_GPS_TIME_2		2703  /**/
#define ERR_OBSW_DP_DATA_IMU_MISSION_TIME_2		2717  /**/
#define ERR_OBSW_DP_DATA_TC74S		2808  /**/
#define ERR_OBSW_DP_DATA_TC74S_DATA_2		2773  /**/
#define ERR_OBSW_DP_DATA_TC74S_GPS_TIME_2		2787  /**/
#define ERR_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2801  /**/
#define ERR_OBSW_DP_DATA_PT1000S		2955  /**/
#define ERR_OBSW_DP_DATA_PT1000S_DATA_2		2920  /**/
#define ERR_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2934  /**/
#define ERR_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2948  /**/
#define ERR_OBSW_DP_DATA_PS1		3284  /**/
#define ERR_OBSW_DP_DATA_PS1_DATA_2		3249  /**/
#define ERR_OBSW_DP_DATA_PS1_GPS_TIME_2		3263  /**/
#define ERR_OBSW_DP_DATA_PS1_MISSION_TIME_2		3277  /**/
#define ERR_OBSW_DP_DATA_PS2		3613  /**/
#define ERR_OBSW_DP_DATA_PS2_DATA_2		3578  /**/
#define ERR_OBSW_DP_DATA_PS2_GPS_TIME_2		3592  /**/
#define ERR_OBSW_DP_DATA_PS2_MISSION_TIME_2		3606  /**/
#define ERR_OBSW_DP_DATA_HEATER1		3690  /**/
#define ERR_OBSW_DP_DATA_HEATER1_DATA_2		3655  /**/
#define ERR_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3669  /**/
#define ERR_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3683  /**/
#define ERR_OBSW_DP_DATA_HEATER2		3767  /**/
#define ERR_OBSW_DP_DATA_HEATER2_DATA_2		3732  /**/
#define ERR_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3746  /**/
#define ERR_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3760  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER		3816  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER_DATA_2		3781  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3795  /**/
#define ERR_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3809  /**/
flag OBSW_DP_Data_IsConstraintValid(const OBSW_DP_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_OBSW_DP_DATA		3824  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS		2256  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS_DATA_2		2221  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS_GPS_TIME_2		2235  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_GPS_MISSION_TIME_2		2249  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU		2725  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU_DATA_2		2690  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU_GPS_TIME_2		2704  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_IMU_MISSION_TIME_2		2718  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S		2809  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S_DATA_2		2774  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S_GPS_TIME_2		2788  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2802  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S		2956  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S_DATA_2		2921  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2935  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2949  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1		3285  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1_DATA_2		3250  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1_GPS_TIME_2		3264  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS1_MISSION_TIME_2		3278  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2		3614  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2_DATA_2		3579  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2_GPS_TIME_2		3593  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_PS2_MISSION_TIME_2		3607  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1		3691  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1_DATA_2		3656  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3670  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3684  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2		3768  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2_DATA_2		3733  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3747  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3761  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER		3817  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3782  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3796  /**/
#define ERR_UPER_ENCODE_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3810  /**/
#define OBSW_DP_Data_REQUIRED_BYTES_FOR_ENCODING       1155 
#define OBSW_DP_Data_REQUIRED_BITS_FOR_ENCODING        9233

flag OBSW_DP_Data_Encode(const OBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_OBSW_DP_DATA		3825  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS		2257  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS_DATA_2		2222  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS_GPS_TIME_2		2236  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_GPS_MISSION_TIME_2		2250  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU		2726  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU_DATA_2		2691  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU_GPS_TIME_2		2705  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_IMU_MISSION_TIME_2		2719  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S		2810  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S_DATA_2		2775  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S_GPS_TIME_2		2789  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2803  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S		2957  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S_DATA_2		2922  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2936  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2950  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1		3286  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1_DATA_2		3251  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1_GPS_TIME_2		3265  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS1_MISSION_TIME_2		3279  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2		3615  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2_DATA_2		3580  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2_GPS_TIME_2		3594  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_PS2_MISSION_TIME_2		3608  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1		3692  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1_DATA_2		3657  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3671  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3685  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2		3769  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2_DATA_2		3734  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3748  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3762  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER		3818  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3783  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3797  /**/
#define ERR_UPER_DECODE_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3811  /**/
flag OBSW_DP_Data_Decode(OBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_OBSW_DP_DATA		3826  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS		2258  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS_DATA_2		2223  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS_GPS_TIME_2		2237  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_GPS_MISSION_TIME_2		2251  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU		2727  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU_DATA_2		2692  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU_GPS_TIME_2		2706  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_IMU_MISSION_TIME_2		2720  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S		2811  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S_DATA_2		2776  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S_GPS_TIME_2		2790  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2804  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S		2958  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S_DATA_2		2923  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2937  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2951  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1		3287  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1_DATA_2		3252  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1_GPS_TIME_2		3266  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS1_MISSION_TIME_2		3280  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2		3616  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2_DATA_2		3581  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2_GPS_TIME_2		3595  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_PS2_MISSION_TIME_2		3609  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1		3693  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1_DATA_2		3658  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3672  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3686  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2		3770  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2_DATA_2		3735  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3749  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3763  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER		3819  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3784  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3798  /**/
#define ERR_ACN_ENCODE_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3812  /**/
#define OBSW_DP_Data_REQUIRED_BYTES_FOR_ACN_ENCODING       1155 
#define OBSW_DP_Data_REQUIRED_BITS_FOR_ACN_ENCODING        9233

flag OBSW_DP_Data_ACN_Encode(const OBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_OBSW_DP_DATA		3827  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS		2259  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS_DATA_2		2224  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS_GPS_TIME_2		2238  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_GPS_MISSION_TIME_2		2252  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU		2728  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU_DATA_2		2693  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU_GPS_TIME_2		2707  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_IMU_MISSION_TIME_2		2721  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S		2812  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S_DATA_2		2777  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S_GPS_TIME_2		2791  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_TC74S_MISSION_TIME_2		2805  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S		2959  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S_DATA_2		2924  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S_GPS_TIME_2		2938  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PT1000S_MISSION_TIME_2		2952  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1		3288  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1_DATA_2		3253  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1_GPS_TIME_2		3267  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS1_MISSION_TIME_2		3281  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2		3617  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2_DATA_2		3582  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2_GPS_TIME_2		3596  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_PS2_MISSION_TIME_2		3610  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1		3694  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1_DATA_2		3659  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1_GPS_TIME_2		3673  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER1_MISSION_TIME_2		3687  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2		3771  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2_DATA_2		3736  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2_GPS_TIME_2		3750  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_HEATER2_MISSION_TIME_2		3764  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER		3820  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER_DATA_2		3785  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2		3799  /**/
#define ERR_ACN_DECODE_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2		3813  /**/
flag OBSW_DP_Data_ACN_Decode(OBSW_DP_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- OBSW_DP_SingleData --------------------------------------------*/
/*-- OBSW_DP_SingleData_gps --------------------------------------------*/
typedef struct {
    GPS_PVT data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_gps;
/*-- OBSW_DP_SingleData_imu --------------------------------------------*/
typedef struct {
    IMU_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_imu;
/*-- OBSW_DP_SingleData_tc74s --------------------------------------------*/
typedef struct {
    TC74s_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_tc74s;
/*-- OBSW_DP_SingleData_pt1000s --------------------------------------------*/
typedef struct {
    PT1000s_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_pt1000s;
/*-- OBSW_DP_SingleData_ps1 --------------------------------------------*/
typedef struct {
    PS_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_ps1;
/*-- OBSW_DP_SingleData_ps2 --------------------------------------------*/
typedef struct {
    PS_All_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_ps2;
/*-- OBSW_DP_SingleData_heater1 --------------------------------------------*/
typedef struct {
    Heater_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_heater1;
/*-- OBSW_DP_SingleData_heater2 --------------------------------------------*/
typedef struct {
    Heater_Data data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_heater2;
/*-- OBSW_DP_SingleData_anemometer --------------------------------------------*/
typedef struct {
    T_UInt64 data;
    T_Double gps_time;
    T_Double mission_time;

} OBSW_DP_SingleData_anemometer;

typedef enum {
    OBSW_DP_SingleData_NONE,
    gps_PRESENT,
    imu_PRESENT,
    tc74s_PRESENT,
    pt1000s_PRESENT,
    ps1_PRESENT,
    ps2_PRESENT,
    heater1_PRESENT,
    heater2_PRESENT,
    anemometer_PRESENT 
} OBSW_DP_SingleData_selection;


typedef struct {
    OBSW_DP_SingleData_selection kind;
    
    union {
        OBSW_DP_SingleData_gps gps;
        OBSW_DP_SingleData_imu imu;
        OBSW_DP_SingleData_tc74s tc74s;
        OBSW_DP_SingleData_pt1000s pt1000s;
        OBSW_DP_SingleData_ps1 ps1;
        OBSW_DP_SingleData_ps2 ps2;
        OBSW_DP_SingleData_heater1 heater1;
        OBSW_DP_SingleData_heater2 heater2;
        OBSW_DP_SingleData_anemometer anemometer;
    } u; 
} OBSW_DP_SingleData;

flag OBSW_DP_SingleData_gps_Equal(const OBSW_DP_SingleData_gps* pVal1, const OBSW_DP_SingleData_gps* pVal2);

flag OBSW_DP_SingleData_imu_Equal(const OBSW_DP_SingleData_imu* pVal1, const OBSW_DP_SingleData_imu* pVal2);

flag OBSW_DP_SingleData_tc74s_Equal(const OBSW_DP_SingleData_tc74s* pVal1, const OBSW_DP_SingleData_tc74s* pVal2);

flag OBSW_DP_SingleData_pt1000s_Equal(const OBSW_DP_SingleData_pt1000s* pVal1, const OBSW_DP_SingleData_pt1000s* pVal2);

flag OBSW_DP_SingleData_ps1_Equal(const OBSW_DP_SingleData_ps1* pVal1, const OBSW_DP_SingleData_ps1* pVal2);

flag OBSW_DP_SingleData_ps2_Equal(const OBSW_DP_SingleData_ps2* pVal1, const OBSW_DP_SingleData_ps2* pVal2);

flag OBSW_DP_SingleData_heater1_Equal(const OBSW_DP_SingleData_heater1* pVal1, const OBSW_DP_SingleData_heater1* pVal2);

flag OBSW_DP_SingleData_heater2_Equal(const OBSW_DP_SingleData_heater2* pVal1, const OBSW_DP_SingleData_heater2* pVal2);

flag OBSW_DP_SingleData_anemometer_Equal(const OBSW_DP_SingleData_anemometer* pVal1, const OBSW_DP_SingleData_anemometer* pVal2);

flag OBSW_DP_SingleData_Equal(const OBSW_DP_SingleData* pVal1, const OBSW_DP_SingleData* pVal2);

void OBSW_DP_SingleData_gps_Initialize(OBSW_DP_SingleData_gps* pVal);
void OBSW_DP_SingleData_imu_Initialize(OBSW_DP_SingleData_imu* pVal);
void OBSW_DP_SingleData_tc74s_Initialize(OBSW_DP_SingleData_tc74s* pVal);
void OBSW_DP_SingleData_pt1000s_Initialize(OBSW_DP_SingleData_pt1000s* pVal);
void OBSW_DP_SingleData_ps1_Initialize(OBSW_DP_SingleData_ps1* pVal);
void OBSW_DP_SingleData_ps2_Initialize(OBSW_DP_SingleData_ps2* pVal);
void OBSW_DP_SingleData_heater1_Initialize(OBSW_DP_SingleData_heater1* pVal);
void OBSW_DP_SingleData_heater2_Initialize(OBSW_DP_SingleData_heater2* pVal);
void OBSW_DP_SingleData_anemometer_Initialize(OBSW_DP_SingleData_anemometer* pVal);
void OBSW_DP_SingleData_Initialize(OBSW_DP_SingleData* pVal);

#define ERR_OBSW_DP_SINGLEDATA		5650  /**/
#define ERR_OBSW_DP_SINGLEDATA_GPS		4082  /**/
#define ERR_OBSW_DP_SINGLEDATA_GPS_DATA_2		4047  /**/
#define ERR_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4061  /**/
#define ERR_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4075  /**/
#define ERR_OBSW_DP_SINGLEDATA_IMU		4551  /**/
#define ERR_OBSW_DP_SINGLEDATA_IMU_DATA_2		4516  /**/
#define ERR_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4530  /**/
#define ERR_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4544  /**/
#define ERR_OBSW_DP_SINGLEDATA_TC74S		4635  /**/
#define ERR_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4600  /**/
#define ERR_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4614  /**/
#define ERR_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4628  /**/
#define ERR_OBSW_DP_SINGLEDATA_PT1000S		4782  /**/
#define ERR_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4747  /**/
#define ERR_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4761  /**/
#define ERR_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4775  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS1		5111  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS1_DATA_2		5076  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5090  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5104  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS2		5440  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS2_DATA_2		5405  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5419  /**/
#define ERR_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5433  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER1		5517  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5482  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5496  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5510  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER2		5594  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5559  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5573  /**/
#define ERR_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5587  /**/
#define ERR_OBSW_DP_SINGLEDATA_ANEMOMETER		5643  /**/
#define ERR_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5608  /**/
#define ERR_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5622  /**/
#define ERR_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5636  /**/
flag OBSW_DP_SingleData_IsConstraintValid(const OBSW_DP_SingleData* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA		5651  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_GPS		4083  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_GPS_DATA_2		4048  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4062  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4076  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_IMU		4552  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_IMU_DATA_2		4517  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4531  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4545  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_TC74S		4636  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4601  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4615  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4629  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PT1000S		4783  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4748  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4762  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4776  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS1		5112  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS1_DATA_2		5077  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5091  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5105  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS2		5441  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS2_DATA_2		5406  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5420  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5434  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER1		5518  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5483  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5497  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5511  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER2		5595  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5560  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5574  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5588  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER		5644  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5609  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5623  /**/
#define ERR_UPER_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5637  /**/
#define OBSW_DP_SingleData_REQUIRED_BYTES_FOR_ENCODING       301 
#define OBSW_DP_SingleData_REQUIRED_BITS_FOR_ENCODING        2403

flag OBSW_DP_SingleData_Encode(const OBSW_DP_SingleData* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA		5652  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_GPS		4084  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_GPS_DATA_2		4049  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4063  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4077  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_IMU		4553  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_IMU_DATA_2		4518  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4532  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4546  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_TC74S		4637  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4602  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4616  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4630  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PT1000S		4784  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4749  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4763  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4777  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS1		5113  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS1_DATA_2		5078  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5092  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5106  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS2		5442  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS2_DATA_2		5407  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5421  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5435  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER1		5519  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5484  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5498  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5512  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER2		5596  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5561  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5575  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5589  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER		5645  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5610  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5624  /**/
#define ERR_UPER_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5638  /**/
flag OBSW_DP_SingleData_Decode(OBSW_DP_SingleData* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA		5653  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_GPS		4085  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_GPS_DATA_2		4050  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4064  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4078  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_IMU		4554  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_IMU_DATA_2		4519  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4533  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4547  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_TC74S		4638  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4603  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4617  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4631  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PT1000S		4785  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4750  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4764  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4778  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS1		5114  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS1_DATA_2		5079  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5093  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5107  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS2		5443  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS2_DATA_2		5408  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5422  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5436  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER1		5520  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5485  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5499  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5513  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER2		5597  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5562  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5576  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5590  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER		5646  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5611  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5625  /**/
#define ERR_ACN_ENCODE_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5639  /**/
#define OBSW_DP_SingleData_REQUIRED_BYTES_FOR_ACN_ENCODING       301 
#define OBSW_DP_SingleData_REQUIRED_BITS_FOR_ACN_ENCODING        2403

flag OBSW_DP_SingleData_ACN_Encode(const OBSW_DP_SingleData* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA		5654  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_GPS		4086  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_GPS_DATA_2		4051  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2		4065  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2		4079  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_IMU		4555  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_IMU_DATA_2		4520  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2		4534  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2		4548  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_TC74S		4639  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_TC74S_DATA_2		4604  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2		4618  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2		4632  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PT1000S		4786  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PT1000S_DATA_2		4751  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2		4765  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2		4779  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS1		5115  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS1_DATA_2		5080  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2		5094  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2		5108  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS2		5444  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS2_DATA_2		5409  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2		5423  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2		5437  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER1		5521  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER1_DATA_2		5486  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2		5500  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2		5514  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER2		5598  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER2_DATA_2		5563  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2		5577  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2		5591  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER		5647  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2		5612  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2		5626  /**/
#define ERR_ACN_DECODE_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2		5640  /**/
flag OBSW_DP_SingleData_ACN_Decode(OBSW_DP_SingleData* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- HTL_Config --------------------------------------------*/
typedef struct {
    T_Float press_5km;
    T_Float press_10km;
    T_Float press_18km;
    T_Double a1_duration_emergency_secs;
    T_Double a1_duration_max_secs;
    T_Double a2_duration_max_secs;
    T_UInt32 f1_duration_secs;
    T_UInt32 f2_duration_secs;

    struct {
        unsigned int press_5km:1;
        unsigned int press_10km:1;
        unsigned int press_18km:1;
        unsigned int a1_duration_emergency_secs:1;
        unsigned int a1_duration_max_secs:1;
        unsigned int a2_duration_max_secs:1;
        unsigned int f1_duration_secs:1;
        unsigned int f2_duration_secs:1;
    } exist;

} HTL_Config;

flag HTL_Config_Equal(const HTL_Config* pVal1, const HTL_Config* pVal2);

void HTL_Config_Initialize(HTL_Config* pVal);

#define ERR_HTL_CONFIG		2003  /**/
#define ERR_HTL_CONFIG_PRESS_5KM_2		1898  /**/
#define ERR_HTL_CONFIG_PRESS_10KM_2		1912  /**/
#define ERR_HTL_CONFIG_PRESS_18KM_2		1926  /**/
#define ERR_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1940  /**/
#define ERR_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1954  /**/
#define ERR_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1968  /**/
#define ERR_HTL_CONFIG_F1_DURATION_SECS_2		1982  /**/
#define ERR_HTL_CONFIG_F2_DURATION_SECS_2		1996  /**/
flag HTL_Config_IsConstraintValid(const HTL_Config* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_HTL_CONFIG		2004  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_PRESS_5KM_2		1899  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_PRESS_10KM_2		1913  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_PRESS_18KM_2		1927  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1941  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1955  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1969  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_F1_DURATION_SECS_2		1983  /**/
#define ERR_UPER_ENCODE_HTL_CONFIG_F2_DURATION_SECS_2		1997  /**/
#define HTL_Config_REQUIRED_BYTES_FOR_ENCODING       87 
#define HTL_Config_REQUIRED_BITS_FOR_ENCODING        696

flag HTL_Config_Encode(const HTL_Config* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_HTL_CONFIG		2005  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_PRESS_5KM_2		1900  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_PRESS_10KM_2		1914  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_PRESS_18KM_2		1928  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1942  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1956  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1970  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_F1_DURATION_SECS_2		1984  /**/
#define ERR_UPER_DECODE_HTL_CONFIG_F2_DURATION_SECS_2		1998  /**/
flag HTL_Config_Decode(HTL_Config* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_HTL_CONFIG		2006  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_PRESS_5KM_2		1901  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_PRESS_10KM_2		1915  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_PRESS_18KM_2		1929  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1943  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1957  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1971  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_F1_DURATION_SECS_2		1985  /**/
#define ERR_ACN_ENCODE_HTL_CONFIG_F2_DURATION_SECS_2		1999  /**/
#define HTL_Config_REQUIRED_BYTES_FOR_ACN_ENCODING       87 
#define HTL_Config_REQUIRED_BITS_FOR_ACN_ENCODING        696

flag HTL_Config_ACN_Encode(const HTL_Config* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_HTL_CONFIG		2007  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_PRESS_5KM_2		1902  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_PRESS_10KM_2		1916  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_PRESS_18KM_2		1930  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2		1944  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_A1_DURATION_MAX_SECS_2		1958  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_A2_DURATION_MAX_SECS_2		1972  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_F1_DURATION_SECS_2		1986  /**/
#define ERR_ACN_DECODE_HTL_CONFIG_F2_DURATION_SECS_2		2000  /**/
flag HTL_Config_ACN_Decode(HTL_Config* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- TC --------------------------------------------*/
/*-- TC_heater_commands --------------------------------------------*/
typedef struct {
    TC_Heater heater_of_HTL;
    HTL_Config config_of_HTL;

} TC_heater_commands;
typedef enum {
    stop = 0
} TC_system_commands;

// please use the following macros to avoid breaking code.
#define TC_system_commands_stop stop

typedef enum {
    TC_NONE,
    heater_commands_PRESENT,
    system_commands_PRESENT 
} TC_selection;


typedef struct {
    TC_selection kind;
    
    union {
        TC_heater_commands heater_commands;
        TC_system_commands system_commands;
    } u; 
} TC;

flag TC_heater_commands_Equal(const TC_heater_commands* pVal1, const TC_heater_commands* pVal2);

flag TC_system_commands_Equal(const TC_system_commands* pVal1, const TC_system_commands* pVal2);

flag TC_Equal(const TC* pVal1, const TC* pVal2);

void TC_heater_commands_Initialize(TC_heater_commands* pVal);
void TC_system_commands_Initialize(TC_system_commands* pVal);
void TC_Initialize(TC* pVal);

#define ERR_TC		7218  /**/
#define ERR_TC_HEATER_COMMANDS		7204  /**/
#define ERR_TC_HEATER_COMMANDS_HEATER_OF_HTL_2		7071  /**/
#define ERR_TC_HEATER_COMMANDS_CONFIG_OF_HTL_2		7197  /**/
#define ERR_TC_SYSTEM_COMMANDS		7211  /**/
flag TC_IsConstraintValid(const TC* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC		7219  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMANDS		7205  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMANDS_HEATER_OF_HTL_2		7072  /**/
#define ERR_UPER_ENCODE_TC_HEATER_COMMANDS_CONFIG_OF_HTL_2		7198  /**/
#define ERR_UPER_ENCODE_TC_SYSTEM_COMMANDS		7212  /**/
#define TC_REQUIRED_BYTES_FOR_ENCODING       101 
#define TC_REQUIRED_BITS_FOR_ENCODING        803

flag TC_Encode(const TC* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC		7220  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMANDS		7206  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMANDS_HEATER_OF_HTL_2		7073  /**/
#define ERR_UPER_DECODE_TC_HEATER_COMMANDS_CONFIG_OF_HTL_2		7199  /**/
#define ERR_UPER_DECODE_TC_SYSTEM_COMMANDS		7213  /**/
flag TC_Decode(TC* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TC		7221  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMANDS		7207  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMANDS_HEATER_OF_HTL_2		7074  /**/
#define ERR_ACN_ENCODE_TC_HEATER_COMMANDS_CONFIG_OF_HTL_2		7200  /**/
#define ERR_ACN_ENCODE_TC_SYSTEM_COMMANDS		7214  /**/
#define TC_REQUIRED_BYTES_FOR_ACN_ENCODING       101 
#define TC_REQUIRED_BITS_FOR_ACN_ENCODING        803

flag TC_ACN_Encode(const TC* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TC		7222  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMANDS		7208  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMANDS_HEATER_OF_HTL_2		7075  /**/
#define ERR_ACN_DECODE_TC_HEATER_COMMANDS_CONFIG_OF_HTL_2		7201  /**/
#define ERR_ACN_DECODE_TC_SYSTEM_COMMANDS		7215  /**/
flag TC_ACN_Decode(TC* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int8;


flag T_Int8_Equal(const T_Int8* pVal1, const T_Int8* pVal2);

void T_Int8_Initialize(T_Int8* pVal);

#define ERR_T_INT8		8443  /**/
flag T_Int8_IsConstraintValid(const T_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT8		8444  /**/
#define T_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag T_Int8_Encode(const T_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		8445  /**/
flag T_Int8_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		8446  /**/
#define T_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_Int8_ACN_Encode(const T_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		8447  /**/
flag T_Int8_ACN_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt8;


flag T_UInt8_Equal(const T_UInt8* pVal1, const T_UInt8* pVal2);

void T_UInt8_Initialize(T_UInt8* pVal);

#define ERR_T_UINT8		8450  /**/
flag T_UInt8_IsConstraintValid(const T_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT8		8451  /**/
#define T_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag T_UInt8_Encode(const T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		8452  /**/
flag T_UInt8_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		8453  /**/
#define T_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_UInt8_ACN_Encode(const T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		8454  /**/
flag T_UInt8_ACN_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- SPI_ID --------------------------------------------*/
typedef struct {
    T_UInt8 bus;
    T_UInt8 cs;

} SPI_ID;

flag SPI_ID_Equal(const SPI_ID* pVal1, const SPI_ID* pVal2);

void SPI_ID_Initialize(SPI_ID* pVal);

#define ERR_SPI_ID		85  /**/
#define ERR_SPI_ID_BUS_2		64  /**/
#define ERR_SPI_ID_CS_2		78  /**/
flag SPI_ID_IsConstraintValid(const SPI_ID* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SPI_ID		86  /**/
#define ERR_UPER_ENCODE_SPI_ID_BUS_2		65  /**/
#define ERR_UPER_ENCODE_SPI_ID_CS_2		79  /**/
#define SPI_ID_REQUIRED_BYTES_FOR_ENCODING       2 
#define SPI_ID_REQUIRED_BITS_FOR_ENCODING        16

flag SPI_ID_Encode(const SPI_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SPI_ID		87  /**/
#define ERR_UPER_DECODE_SPI_ID_BUS_2		66  /**/
#define ERR_UPER_DECODE_SPI_ID_CS_2		80  /**/
flag SPI_ID_Decode(SPI_ID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SPI_ID		88  /**/
#define ERR_ACN_ENCODE_SPI_ID_BUS_2		67  /**/
#define ERR_ACN_ENCODE_SPI_ID_CS_2		81  /**/
#define SPI_ID_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define SPI_ID_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag SPI_ID_ACN_Encode(const SPI_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SPI_ID		89  /**/
#define ERR_ACN_DECODE_SPI_ID_BUS_2		68  /**/
#define ERR_ACN_DECODE_SPI_ID_CS_2		82  /**/
flag SPI_ID_ACN_Decode(SPI_ID* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- I2C_ID --------------------------------------------*/
typedef struct {
    T_UInt8 bus;
    T_UInt8 address;

} I2C_ID;

flag I2C_ID_Equal(const I2C_ID* pVal1, const I2C_ID* pVal2);

void I2C_ID_Initialize(I2C_ID* pVal);

#define ERR_I2C_ID		120  /**/
#define ERR_I2C_ID_BUS_2		99  /**/
#define ERR_I2C_ID_ADDRESS_2		113  /**/
flag I2C_ID_IsConstraintValid(const I2C_ID* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_I2C_ID		121  /**/
#define ERR_UPER_ENCODE_I2C_ID_BUS_2		100  /**/
#define ERR_UPER_ENCODE_I2C_ID_ADDRESS_2		114  /**/
#define I2C_ID_REQUIRED_BYTES_FOR_ENCODING       2 
#define I2C_ID_REQUIRED_BITS_FOR_ENCODING        16

flag I2C_ID_Encode(const I2C_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_I2C_ID		122  /**/
#define ERR_UPER_DECODE_I2C_ID_BUS_2		101  /**/
#define ERR_UPER_DECODE_I2C_ID_ADDRESS_2		115  /**/
flag I2C_ID_Decode(I2C_ID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_I2C_ID		123  /**/
#define ERR_ACN_ENCODE_I2C_ID_BUS_2		102  /**/
#define ERR_ACN_ENCODE_I2C_ID_ADDRESS_2		116  /**/
#define I2C_ID_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define I2C_ID_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag I2C_ID_ACN_Encode(const I2C_ID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_I2C_ID		124  /**/
#define ERR_ACN_DECODE_I2C_ID_BUS_2		103  /**/
#define ERR_ACN_DECODE_I2C_ID_ADDRESS_2		117  /**/
flag I2C_ID_ACN_Decode(I2C_ID* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag T_Boolean;


flag T_Boolean_Equal(const T_Boolean* pVal1, const T_Boolean* pVal2);

void T_Boolean_Initialize(T_Boolean* pVal);

#define ERR_T_BOOLEAN		8457  /**/
flag T_Boolean_IsConstraintValid(const T_Boolean* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_BOOLEAN		8458  /**/
#define T_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag T_Boolean_Encode(const T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		8459  /**/
flag T_Boolean_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		8460  /**/
#define T_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_Boolean_ACN_Encode(const T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		8461  /**/
flag T_Boolean_ACN_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- T_Null_Record --------------------------------------------*/
typedef struct {

} T_Null_Record;

flag T_Null_Record_Equal(const T_Null_Record* pVal1, const T_Null_Record* pVal2);

void T_Null_Record_Initialize(T_Null_Record* pVal);

#define ERR_T_NULL_RECORD		8464  /**/
flag T_Null_Record_IsConstraintValid(const T_Null_Record* pVal, int* pErrCode);

#define T_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define T_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag T_Null_Record_Encode(const T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag T_Null_Record_Decode(T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define T_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define T_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag T_Null_Record_ACN_Encode(const T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag T_Null_Record_ACN_Decode(T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

extern const asn1SccSint n_of_TC74s;
extern const asn1SccSint n_of_pt1000;
extern const asn1SccSint imu_queue_size; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
