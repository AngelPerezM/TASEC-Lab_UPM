pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
with adaasn1rtl;


pragma Warnings (Off, "unit ""System"" is not referenced");
with System;
pragma Warnings (On, "unit ""System"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");


pragma Warnings (Off, "no entities of ""TASTE_BasicTypes"" are referenced");
pragma Warnings (Off, "use clause for package ""TASTE_BasicTypes"" has no effect");
with TASTE_BasicTypes; use TASTE_BasicTypes;
pragma Warnings (On, "no entities of ""TASTE_BasicTypes"" are referenced");
pragma Warnings (On, "use clause for package ""TASTE_BasicTypes"" has no effect");



package TASEC_LAB_B2SPACE_DATAVIEW with SPARK_Mode
is


-- asn1SccSPI_ID --------------------------------------------

type asn1SccSPI_ID is record 
    bus : TASTE_BasicTypes.asn1SccT_UInt8;
    cs : TASTE_BasicTypes.asn1SccT_UInt8;
end record;


function asn1SccSPI_ID_Equal(val1, val2 : asn1SccSPI_ID) return Boolean;

function asn1SccSPI_ID_Init return asn1SccSPI_ID;

ERR_SPI_ID:constant Integer := 99; 
ERR_SPI_ID_BUS_2:constant Integer := 78; 
ERR_SPI_ID_CS_2:constant Integer := 92; 
function asn1SccSPI_ID_IsConstraintValid(val : asn1SccSPI_ID) return adaasn1rtl.ASN1_RESULT;
-- asn1SccI2C_ID --------------------------------------------

type asn1SccI2C_ID is record 
    bus : TASTE_BasicTypes.asn1SccT_UInt8;
    address : TASTE_BasicTypes.asn1SccT_UInt8;
end record;


function asn1SccI2C_ID_Equal(val1, val2 : asn1SccI2C_ID) return Boolean;

function asn1SccI2C_ID_Init return asn1SccI2C_ID;

ERR_I2C_ID:constant Integer := 134; 
ERR_I2C_ID_BUS_2:constant Integer := 113; 
ERR_I2C_ID_ADDRESS_2:constant Integer := 127; 
function asn1SccI2C_ID_IsConstraintValid(val : asn1SccI2C_ID) return adaasn1rtl.ASN1_RESULT;
-- asn1SccPS_Raw_Data --------------------------------------------

type asn1SccPS_Raw_Data is record 
    d1 : TASTE_BasicTypes.asn1SccT_UInt32;
    d2 : TASTE_BasicTypes.asn1SccT_UInt32;
end record;


function asn1SccPS_Raw_Data_Equal(val1, val2 : asn1SccPS_Raw_Data) return Boolean;

function asn1SccPS_Raw_Data_Init return asn1SccPS_Raw_Data;

ERR_PS_RAW_DATA:constant Integer := 1527; 
ERR_PS_RAW_DATA_D1_2:constant Integer := 1506; 
ERR_PS_RAW_DATA_D2_2:constant Integer := 1520; 
function asn1SccPS_Raw_Data_IsConstraintValid(val : asn1SccPS_Raw_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTC74s_I2CBuses --------------------------------------------


subtype asn1SccTC74s_I2CBuses_index is Integer range 1..5;
type asn1SccTC74s_I2CBuses_array is array (asn1SccTC74s_I2CBuses_index) of TASTE_BasicTypes.asn1SccT_Int32;
type asn1SccTC74s_I2CBuses is  record
    Data  : asn1SccTC74s_I2CBuses_array;
end record;

function asn1SccTC74s_I2CBuses_Equal(val1, val2 : asn1SccTC74s_I2CBuses) return Boolean;

function asn1SccTC74s_I2CBuses_Init return asn1SccTC74s_I2CBuses;

ERR_TC74S_I2CBUSES:constant Integer := 1086; 
ERR_TC74S_I2CBUSES_ELM_2:constant Integer := 1079; 
function asn1SccTC74s_I2CBuses_IsConstraintValid(val : asn1SccTC74s_I2CBuses) return adaasn1rtl.ASN1_RESULT;
-- asn1SccPT1000s_Channels --------------------------------------------


subtype asn1SccPT1000s_Channels_index is Integer range 1..7;
type asn1SccPT1000s_Channels_array is array (asn1SccPT1000s_Channels_index) of TASTE_BasicTypes.asn1SccT_Int32;
type asn1SccPT1000s_Channels is  record
    Data  : asn1SccPT1000s_Channels_array;
end record;

function asn1SccPT1000s_Channels_Equal(val1, val2 : asn1SccPT1000s_Channels) return Boolean;

function asn1SccPT1000s_Channels_Init return asn1SccPT1000s_Channels;

ERR_PT1000S_CHANNELS:constant Integer := 1149; 
ERR_PT1000S_CHANNELS_ELM_2:constant Integer := 1142; 
function asn1SccPT1000s_Channels_IsConstraintValid(val : asn1SccPT1000s_Channels) return adaasn1rtl.ASN1_RESULT;
-- asn1SccPS_Processed_Data --------------------------------------------

type asn1SccPS_Processed_Data is record 
    pressure : TASTE_BasicTypes.asn1SccT_Int32;
    temp : TASTE_BasicTypes.asn1SccT_Int32;
end record;


function asn1SccPS_Processed_Data_Equal(val1, val2 : asn1SccPS_Processed_Data) return Boolean;

function asn1SccPS_Processed_Data_Init return asn1SccPS_Processed_Data;

ERR_PS_PROCESSED_DATA:constant Integer := 1562; 
ERR_PS_PROCESSED_DATA_PRESSURE_2:constant Integer := 1541; 
ERR_PS_PROCESSED_DATA_TEMP_2:constant Integer := 1555; 
function asn1SccPS_Processed_Data_IsConstraintValid(val : asn1SccPS_Processed_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccDate_Time --------------------------------------------

type asn1SccDate_Time is record 
    day : TASTE_BasicTypes.asn1SccT_Int32;
    month : TASTE_BasicTypes.asn1SccT_Int32;
    year : TASTE_BasicTypes.asn1SccT_Int32;
    hour : TASTE_BasicTypes.asn1SccT_Int32;
    minute : TASTE_BasicTypes.asn1SccT_Int32;
    second : TASTE_BasicTypes.asn1SccT_Int32;
end record;


function asn1SccDate_Time_Equal(val1, val2 : asn1SccDate_Time) return Boolean;

function asn1SccDate_Time_Init return asn1SccDate_Time;

ERR_DATE_TIME:constant Integer := 7610; 
ERR_DATE_TIME_DAY_2:constant Integer := 7533; 
ERR_DATE_TIME_MONTH_2:constant Integer := 7547; 
ERR_DATE_TIME_YEAR_2:constant Integer := 7561; 
ERR_DATE_TIME_HOUR_2:constant Integer := 7575; 
ERR_DATE_TIME_MINUTE_2:constant Integer := 7589; 
ERR_DATE_TIME_SECOND_2:constant Integer := 7603; 
function asn1SccDate_Time_IsConstraintValid(val : asn1SccDate_Time) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccT_Int16 is adaasn1rtl.Asn1Int range -32768 .. 32767;


function asn1SccT_Int16_Equal(val1, val2 : asn1SccT_Int16) return Boolean;

function asn1SccT_Int16_Init return asn1SccT_Int16;

ERR_T_INT16:constant Integer := 22; 
function asn1SccT_Int16_IsConstraintValid(val : asn1SccT_Int16) return adaasn1rtl.ASN1_RESULT;
-- asn1SccMGT_Raw_Data --------------------------------------------

type asn1SccMGT_Raw_Data is record 
    x_axis : asn1SccT_Int16;
    y_axis : asn1SccT_Int16;
    z_axis : asn1SccT_Int16;
end record;


function asn1SccMGT_Raw_Data_Equal(val1, val2 : asn1SccMGT_Raw_Data) return Boolean;

function asn1SccMGT_Raw_Data_Init return asn1SccMGT_Raw_Data;

ERR_MGT_RAW_DATA:constant Integer := 393; 
ERR_MGT_RAW_DATA_X_AXIS_2:constant Integer := 358; 
ERR_MGT_RAW_DATA_Y_AXIS_2:constant Integer := 372; 
ERR_MGT_RAW_DATA_Z_AXIS_2:constant Integer := 386; 
function asn1SccMGT_Raw_Data_IsConstraintValid(val : asn1SccMGT_Raw_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccACC_Raw_Data --------------------------------------------

type asn1SccACC_Raw_Data is record 
    x_axis : asn1SccT_Int16;
    y_axis : asn1SccT_Int16;
    z_axis : asn1SccT_Int16;
end record;


function asn1SccACC_Raw_Data_Equal(val1, val2 : asn1SccACC_Raw_Data) return Boolean;

function asn1SccACC_Raw_Data_Init return asn1SccACC_Raw_Data;

ERR_ACC_RAW_DATA:constant Integer := 491; 
ERR_ACC_RAW_DATA_X_AXIS_2:constant Integer := 456; 
ERR_ACC_RAW_DATA_Y_AXIS_2:constant Integer := 470; 
ERR_ACC_RAW_DATA_Z_AXIS_2:constant Integer := 484; 
function asn1SccACC_Raw_Data_IsConstraintValid(val : asn1SccACC_Raw_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccGYRO_Raw_Data --------------------------------------------

type asn1SccGYRO_Raw_Data is record 
    x_axis : asn1SccT_Int16;
    y_axis : asn1SccT_Int16;
    z_axis : asn1SccT_Int16;
end record;


function asn1SccGYRO_Raw_Data_Equal(val1, val2 : asn1SccGYRO_Raw_Data) return Boolean;

function asn1SccGYRO_Raw_Data_Init return asn1SccGYRO_Raw_Data;

ERR_GYRO_RAW_DATA:constant Integer := 589; 
ERR_GYRO_RAW_DATA_X_AXIS_2:constant Integer := 554; 
ERR_GYRO_RAW_DATA_Y_AXIS_2:constant Integer := 568; 
ERR_GYRO_RAW_DATA_Z_AXIS_2:constant Integer := 582; 
function asn1SccGYRO_Raw_Data_IsConstraintValid(val : asn1SccGYRO_Raw_Data) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccT_UInt16 is adaasn1rtl.Asn1UInt range 0 .. 65535;


function asn1SccT_UInt16_Equal(val1, val2 : asn1SccT_UInt16) return Boolean;

function asn1SccT_UInt16_Init return asn1SccT_UInt16;

ERR_T_UINT16:constant Integer := 29; 
function asn1SccT_UInt16_IsConstraintValid(val : asn1SccT_UInt16) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccT_UInt64 is adaasn1rtl.Asn1UInt range 0 .. 18446744073709551615;


function asn1SccT_UInt64_Equal(val1, val2 : asn1SccT_UInt64) return Boolean;

function asn1SccT_UInt64_Init return asn1SccT_UInt64;

ERR_T_UINT64:constant Integer := 36; 
function asn1SccT_UInt64_IsConstraintValid(val : asn1SccT_UInt64) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccT_Float is adaasn1rtl.Asn1Real;


function asn1SccT_Float_Equal(val1, val2 : asn1SccT_Float) return Boolean;

function asn1SccT_Float_Init return asn1SccT_Float;

ERR_T_FLOAT:constant Integer := 43; 
function asn1SccT_Float_IsConstraintValid(val : asn1SccT_Float) return adaasn1rtl.ASN1_RESULT;
-- asn1SccMGT_MilliGauss_Data --------------------------------------------

type asn1SccMGT_MilliGauss_Data is record 
    x_axis : asn1SccT_Float;
    y_axis : asn1SccT_Float;
    z_axis : asn1SccT_Float;
end record;


function asn1SccMGT_MilliGauss_Data_Equal(val1, val2 : asn1SccMGT_MilliGauss_Data) return Boolean;

function asn1SccMGT_MilliGauss_Data_Init return asn1SccMGT_MilliGauss_Data;

ERR_MGT_MILLIGAUSS_DATA:constant Integer := 442; 
ERR_MGT_MILLIGAUSS_DATA_X_AXIS_2:constant Integer := 407; 
ERR_MGT_MILLIGAUSS_DATA_Y_AXIS_2:constant Integer := 421; 
ERR_MGT_MILLIGAUSS_DATA_Z_AXIS_2:constant Integer := 435; 
function asn1SccMGT_MilliGauss_Data_IsConstraintValid(val : asn1SccMGT_MilliGauss_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccACC_MilliG_Data --------------------------------------------

type asn1SccACC_MilliG_Data is record 
    x_axis : asn1SccT_Float;
    y_axis : asn1SccT_Float;
    z_axis : asn1SccT_Float;
end record;


function asn1SccACC_MilliG_Data_Equal(val1, val2 : asn1SccACC_MilliG_Data) return Boolean;

function asn1SccACC_MilliG_Data_Init return asn1SccACC_MilliG_Data;

ERR_ACC_MILLIG_DATA:constant Integer := 540; 
ERR_ACC_MILLIG_DATA_X_AXIS_2:constant Integer := 505; 
ERR_ACC_MILLIG_DATA_Y_AXIS_2:constant Integer := 519; 
ERR_ACC_MILLIG_DATA_Z_AXIS_2:constant Integer := 533; 
function asn1SccACC_MilliG_Data_IsConstraintValid(val : asn1SccACC_MilliG_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccGYRO_MilliDPS_Data --------------------------------------------

type asn1SccGYRO_MilliDPS_Data is record 
    x_axis : asn1SccT_Float;
    y_axis : asn1SccT_Float;
    z_axis : asn1SccT_Float;
end record;


function asn1SccGYRO_MilliDPS_Data_Equal(val1, val2 : asn1SccGYRO_MilliDPS_Data) return Boolean;

function asn1SccGYRO_MilliDPS_Data_Init return asn1SccGYRO_MilliDPS_Data;

ERR_GYRO_MILLIDPS_DATA:constant Integer := 638; 
ERR_GYRO_MILLIDPS_DATA_X_AXIS_2:constant Integer := 603; 
ERR_GYRO_MILLIDPS_DATA_Y_AXIS_2:constant Integer := 617; 
ERR_GYRO_MILLIDPS_DATA_Z_AXIS_2:constant Integer := 631; 
function asn1SccGYRO_MilliDPS_Data_IsConstraintValid(val : asn1SccGYRO_MilliDPS_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccPT1000s_Raw_Data --------------------------------------------

-- asn1SccPT1000s_Raw_Data_elem --------------------------------------------

type asn1SccPT1000s_Raw_Data_elem is record 
    vcc_volts : asn1SccT_Float;
    pt1000 : asn1SccT_Float;
end record;


subtype asn1SccPT1000s_Raw_Data_index is Integer range 1..7;
type asn1SccPT1000s_Raw_Data_array is array (asn1SccPT1000s_Raw_Data_index) of asn1SccPT1000s_Raw_Data_elem;
type asn1SccPT1000s_Raw_Data is  record
    Data  : asn1SccPT1000s_Raw_Data_array;
end record;

function asn1SccPT1000s_Raw_Data_elem_Equal(val1, val2 : asn1SccPT1000s_Raw_Data_elem) return Boolean;

function asn1SccPT1000s_Raw_Data_Equal(val1, val2 : asn1SccPT1000s_Raw_Data) return Boolean;

function asn1SccPT1000s_Raw_Data_elem_Init return asn1SccPT1000s_Raw_Data_elem;
function asn1SccPT1000s_Raw_Data_Init return asn1SccPT1000s_Raw_Data;

ERR_PT1000S_RAW_DATA:constant Integer := 1191; 
ERR_PT1000S_RAW_DATA_ELM:constant Integer := 1184; 
ERR_PT1000S_RAW_DATA_ELM_VCC_VOLTS_2:constant Integer := 1163; 
ERR_PT1000S_RAW_DATA_ELM_PT1000_2:constant Integer := 1177; 
function asn1SccPT1000s_Raw_Data_IsConstraintValid(val : asn1SccPT1000s_Raw_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccPT1000s_Celsius_Data --------------------------------------------


subtype asn1SccPT1000s_Celsius_Data_index is Integer range 1..7;
type asn1SccPT1000s_Celsius_Data_array is array (asn1SccPT1000s_Celsius_Data_index) of asn1SccT_Float;
type asn1SccPT1000s_Celsius_Data is  record
    Data  : asn1SccPT1000s_Celsius_Data_array;
end record;

function asn1SccPT1000s_Celsius_Data_Equal(val1, val2 : asn1SccPT1000s_Celsius_Data) return Boolean;

function asn1SccPT1000s_Celsius_Data_Init return asn1SccPT1000s_Celsius_Data;

ERR_PT1000S_CELSIUS_DATA:constant Integer := 1212; 
ERR_PT1000S_CELSIUS_DATA_ELM_2:constant Integer := 1205; 
function asn1SccPT1000s_Celsius_Data_IsConstraintValid(val : asn1SccPT1000s_Celsius_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccPS_Calibration_Data --------------------------------------------

type asn1SccPS_Calibration_Data is record 
    c1 : asn1SccT_UInt16;
    c2 : asn1SccT_UInt16;
    c3 : asn1SccT_UInt16;
    c4 : asn1SccT_UInt16;
    c5 : asn1SccT_UInt16;
    c6 : asn1SccT_UInt16;
    sens_t1 : asn1SccT_Float;
    off_t1 : asn1SccT_Float;
    tcs : asn1SccT_Float;
    tco : asn1SccT_Float;
    tref : asn1SccT_Float;
    temp_sens : asn1SccT_Float;
end record;


function asn1SccPS_Calibration_Data_Equal(val1, val2 : asn1SccPS_Calibration_Data) return Boolean;

function asn1SccPS_Calibration_Data_Init return asn1SccPS_Calibration_Data;

ERR_PS_CALIBRATION_DATA:constant Integer := 1492; 
ERR_PS_CALIBRATION_DATA_C1_2:constant Integer := 1331; 
ERR_PS_CALIBRATION_DATA_C2_2:constant Integer := 1345; 
ERR_PS_CALIBRATION_DATA_C3_2:constant Integer := 1359; 
ERR_PS_CALIBRATION_DATA_C4_2:constant Integer := 1373; 
ERR_PS_CALIBRATION_DATA_C5_2:constant Integer := 1387; 
ERR_PS_CALIBRATION_DATA_C6_2:constant Integer := 1401; 
ERR_PS_CALIBRATION_DATA_SENS_T1_2:constant Integer := 1415; 
ERR_PS_CALIBRATION_DATA_OFF_T1_2:constant Integer := 1429; 
ERR_PS_CALIBRATION_DATA_TCS_2:constant Integer := 1443; 
ERR_PS_CALIBRATION_DATA_TCO_2:constant Integer := 1457; 
ERR_PS_CALIBRATION_DATA_TREF_2:constant Integer := 1471; 
ERR_PS_CALIBRATION_DATA_TEMP_SENS_2:constant Integer := 1485; 
function asn1SccPS_Calibration_Data_IsConstraintValid(val : asn1SccPS_Calibration_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTC_Heater --------------------------------------------
subtype asn1SccTC_Heater_heater_index_range is Integer range 0..1;
type asn1SccTC_Heater_heater is (asn1Sccheater_HTL, asn1Sccheater_anemo) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccTC_Heater_heater use
    (asn1Sccheater_HTL => 0, asn1Sccheater_anemo => 1);
-- asn1SccTC_Heater_command --------------------------------------------
subtype asn1SccTC_Heater_command_max_min_index_range is Integer range 0..1;
type asn1SccTC_Heater_command_max_min is (asn1Sccmax, asn1Sccmin) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccTC_Heater_command_max_min use
    (asn1Sccmax => 0, asn1Sccmin => 1);

subtype asn1SccTC_Heater_command_index_range is Integer range 0..1;

type asn1SccTC_Heater_command_selection is (power_manual_PRESENT, max_min_PRESENT);
for asn1SccTC_Heater_command_selection use
    (power_manual_PRESENT => 1, max_min_PRESENT => 2);
for asn1SccTC_Heater_command_selection'Size use 32;

type asn1SccTC_Heater_command(kind : asn1SccTC_Heater_command_selection:= power_manual_PRESENT) is 
record
    case kind is
    when power_manual_PRESENT =>
            power_manual: asn1SccT_Float;
    when max_min_PRESENT =>
            max_min: asn1SccTC_Heater_command_max_min;
    end case;
end record;

for asn1SccTC_Heater_command use 
record
    kind at 0 range 0..31;
end record;

type asn1SccTC_Heater is record 
    heater : asn1SccTC_Heater_heater;
    command : asn1SccTC_Heater_command;
end record;


function asn1SccTC_Heater_heater_Equal(val1, val2 : asn1SccTC_Heater_heater) return Boolean;

function asn1SccTC_Heater_command_max_min_Equal(val1, val2 : asn1SccTC_Heater_command_max_min) return Boolean;

function asn1SccTC_Heater_command_Equal(val1, val2 : asn1SccTC_Heater_command) return Boolean;

function asn1SccTC_Heater_Equal(val1, val2 : asn1SccTC_Heater) return Boolean;

function asn1SccTC_Heater_heater_Init return asn1SccTC_Heater_heater;
function asn1SccTC_Heater_command_max_min_Init return asn1SccTC_Heater_command_max_min;
function asn1SccTC_Heater_command_Init return asn1SccTC_Heater_command;
function asn1SccTC_Heater_Init return asn1SccTC_Heater;

ERR_TC_HEATER:constant Integer := 7036; 
ERR_TC_HEATER_HEATER:constant Integer := 7001; 
ERR_TC_HEATER_COMMAND:constant Integer := 7029; 
ERR_TC_HEATER_COMMAND_POWER_MANUAL_2:constant Integer := 7015; 
ERR_TC_HEATER_COMMAND_MAX_MIN:constant Integer := 7022; 
function asn1SccTC_Heater_IsConstraintValid(val : asn1SccTC_Heater) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccT_Double is adaasn1rtl.Asn1Real;


function asn1SccT_Double_Equal(val1, val2 : asn1SccT_Double) return Boolean;

function asn1SccT_Double_Init return asn1SccT_Double;

ERR_T_DOUBLE:constant Integer := 50; 
function asn1SccT_Double_IsConstraintValid(val : asn1SccT_Double) return adaasn1rtl.ASN1_RESULT;
-- asn1SccGPS_PVT --------------------------------------------
subtype asn1SccGPS_PVT_mode_index_range is Integer range 0..3;
type asn1SccGPS_PVT_mode is (asn1Sccnot_seen, asn1Sccno_fix, asn1Scctwo_dims, asn1Sccthree_dims) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccGPS_PVT_mode use
    (asn1Sccnot_seen => 0, asn1Sccno_fix => 1, asn1Scctwo_dims => 2, asn1Sccthree_dims => 3);

type asn1SccGPS_PVT is record 
    mode : asn1SccGPS_PVT_mode;
    date_and_time : asn1SccT_Double;
    ept : asn1SccT_Double;
    latitude : asn1SccT_Double;
    epy : asn1SccT_Double;
    longitude : asn1SccT_Double;
    epx : asn1SccT_Double;
    altitude : asn1SccT_Double;
    epv : asn1SccT_Double;
    course : asn1SccT_Double;
    epd : asn1SccT_Double;
    speed : asn1SccT_Double;
    eps : asn1SccT_Double;
    climb : asn1SccT_Double;
    epc : asn1SccT_Double;
end record;


function asn1SccGPS_PVT_mode_Equal(val1, val2 : asn1SccGPS_PVT_mode) return Boolean;

function asn1SccGPS_PVT_Equal(val1, val2 : asn1SccGPS_PVT) return Boolean;

function asn1SccGPS_PVT_mode_Init return asn1SccGPS_PVT_mode;
function asn1SccGPS_PVT_Init return asn1SccGPS_PVT;

ERR_GPS_PVT:constant Integer := 344; 
ERR_GPS_PVT_MODE:constant Integer := 141; 
ERR_GPS_PVT_DATE_AND_TIME_2:constant Integer := 155; 
ERR_GPS_PVT_EPT_2:constant Integer := 169; 
ERR_GPS_PVT_LATITUDE_2:constant Integer := 183; 
ERR_GPS_PVT_EPY_2:constant Integer := 197; 
ERR_GPS_PVT_LONGITUDE_2:constant Integer := 211; 
ERR_GPS_PVT_EPX_2:constant Integer := 225; 
ERR_GPS_PVT_ALTITUDE_2:constant Integer := 239; 
ERR_GPS_PVT_EPV_2:constant Integer := 253; 
ERR_GPS_PVT_COURSE_2:constant Integer := 267; 
ERR_GPS_PVT_EPD_2:constant Integer := 281; 
ERR_GPS_PVT_SPEED_2:constant Integer := 295; 
ERR_GPS_PVT_EPS_2:constant Integer := 309; 
ERR_GPS_PVT_CLIMB_2:constant Integer := 323; 
ERR_GPS_PVT_EPC_2:constant Integer := 337; 
function asn1SccGPS_PVT_IsConstraintValid(val : asn1SccGPS_PVT) return adaasn1rtl.ASN1_RESULT;
-- asn1SccHTL_Config --------------------------------------------

type asn1SccHTL_Config_exist is record
    press_5km:adaasn1rtl.bit;
    press_10km:adaasn1rtl.bit;
    press_18km:adaasn1rtl.bit;
    a1_duration_emergency_secs:adaasn1rtl.bit;
    a1_duration_max_secs:adaasn1rtl.bit;
    a2_duration_max_secs:adaasn1rtl.bit;
    f1_duration_secs:adaasn1rtl.bit;
    f2_duration_secs:adaasn1rtl.bit;
end record with Pack;

for asn1SccHTL_Config_exist'Size use ((8 - 1) / System.Word_Size + 1) * System.Word_Size;
type asn1SccHTL_Config is record 
    press_5km : asn1SccT_Float;
    press_10km : asn1SccT_Float;
    press_18km : asn1SccT_Float;
    a1_duration_emergency_secs : asn1SccT_Double;
    a1_duration_max_secs : asn1SccT_Double;
    a2_duration_max_secs : asn1SccT_Double;
    f1_duration_secs : TASTE_BasicTypes.asn1SccT_UInt32;
    f2_duration_secs : TASTE_BasicTypes.asn1SccT_UInt32;
    
    Exist : asn1SccHTL_Config_exist;

end record;


function asn1SccHTL_Config_Equal(val1, val2 : asn1SccHTL_Config) return Boolean;

function asn1SccHTL_Config_Init return asn1SccHTL_Config;

ERR_HTL_CONFIG:constant Integer := 2017; 
ERR_HTL_CONFIG_PRESS_5KM_2:constant Integer := 1912; 
ERR_HTL_CONFIG_PRESS_10KM_2:constant Integer := 1926; 
ERR_HTL_CONFIG_PRESS_18KM_2:constant Integer := 1940; 
ERR_HTL_CONFIG_A1_DURATION_EMERGENCY_SECS_2:constant Integer := 1954; 
ERR_HTL_CONFIG_A1_DURATION_MAX_SECS_2:constant Integer := 1968; 
ERR_HTL_CONFIG_A2_DURATION_MAX_SECS_2:constant Integer := 1982; 
ERR_HTL_CONFIG_F1_DURATION_SECS_2:constant Integer := 1996; 
ERR_HTL_CONFIG_F2_DURATION_SECS_2:constant Integer := 2010; 
function asn1SccHTL_Config_IsConstraintValid(val : asn1SccHTL_Config) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTC --------------------------------------------
-- asn1SccTC_heater_commands --------------------------------------------

type asn1SccTC_heater_commands is record 
    heater_of_HTL : asn1SccTC_Heater;
    config_of_HTL : asn1SccHTL_Config;
end record;

subtype asn1SccTC_system_commands_index_range is Integer range 0..0;
type asn1SccTC_system_commands is (asn1Sccstop) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccTC_system_commands use
    (asn1Sccstop => 0);

subtype asn1SccTC_index_range is Integer range 0..1;

type asn1SccTC_selection is (heater_commands_PRESENT, system_commands_PRESENT);
for asn1SccTC_selection use
    (heater_commands_PRESENT => 1, system_commands_PRESENT => 2);
for asn1SccTC_selection'Size use 32;

type asn1SccTC(kind : asn1SccTC_selection:= heater_commands_PRESENT) is 
record
    case kind is
    when heater_commands_PRESENT =>
            heater_commands: asn1SccTC_heater_commands;
    when system_commands_PRESENT =>
            system_commands: asn1SccTC_system_commands;
    end case;
end record;

for asn1SccTC use 
record
    kind at 0 range 0..31;
end record;

function asn1SccTC_heater_commands_Equal(val1, val2 : asn1SccTC_heater_commands) return Boolean;

function asn1SccTC_system_commands_Equal(val1, val2 : asn1SccTC_system_commands) return Boolean;

function asn1SccTC_Equal(val1, val2 : asn1SccTC) return Boolean;

function asn1SccTC_heater_commands_Init return asn1SccTC_heater_commands;
function asn1SccTC_system_commands_Init return asn1SccTC_system_commands;
function asn1SccTC_Init return asn1SccTC;

ERR_TC:constant Integer := 7232; 
ERR_TC_HEATER_COMMANDS:constant Integer := 7218; 
ERR_TC_HEATER_COMMANDS_HEATER_OF_HTL_2:constant Integer := 7085; 
ERR_TC_HEATER_COMMANDS_CONFIG_OF_HTL_2:constant Integer := 7211; 
ERR_TC_SYSTEM_COMMANDS:constant Integer := 7225; 
function asn1SccTC_IsConstraintValid(val : asn1SccTC) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccFile_Name_index is Integer range 1..81;
subtype asn1SccFile_Name_array is adaasn1rtl.OctetBuffer(asn1SccFile_Name_index);
type asn1SccFile_Name is  record
    Data  : asn1SccFile_Name_array;
end record;

function asn1SccFile_Name_Equal(val1, val2 : asn1SccFile_Name) return Boolean;

function asn1SccFile_Name_Init return asn1SccFile_Name;

ERR_FILE_NAME:constant Integer := 57; 
function asn1SccFile_Name_IsConstraintValid(val : asn1SccFile_Name) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccContent_Validity_index_range is Integer range 0..1;
type asn1SccContent_Validity is (asn1Sccvalid, asn1Sccinvalid) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccContent_Validity use
    (asn1Sccvalid => 0, asn1Sccinvalid => 1);

function asn1SccContent_Validity_Equal(val1, val2 : asn1SccContent_Validity) return Boolean;

function asn1SccContent_Validity_Init return asn1SccContent_Validity;

ERR_CONTENT_VALIDITY:constant Integer := 64; 
function asn1SccContent_Validity_IsConstraintValid(val : asn1SccContent_Validity) return adaasn1rtl.ASN1_RESULT;
-- asn1SccIMU_All_Data --------------------------------------------

type asn1SccIMU_All_Data is record 
    mgt_raw : asn1SccMGT_Raw_Data;
    mgt_mgauss : asn1SccMGT_MilliGauss_Data;
    accel_raw : asn1SccACC_Raw_Data;
    accel_mg : asn1SccACC_MilliG_Data;
    gyro_raw : asn1SccGYRO_Raw_Data;
    gyro_mdps : asn1SccGYRO_MilliDPS_Data;
    temp_raw : asn1SccT_Int16;
    temp_celsius : asn1SccT_Float;
    mgt_valid : asn1SccContent_Validity;
    acc_valid : asn1SccContent_Validity;
    gyro_valid : asn1SccContent_Validity;
    temp_valid : asn1SccContent_Validity;
end record;


function asn1SccIMU_All_Data_Equal(val1, val2 : asn1SccIMU_All_Data) return Boolean;

function asn1SccIMU_All_Data_Init return asn1SccIMU_All_Data;

ERR_IMU_ALL_DATA:constant Integer := 1065; 
ERR_IMU_ALL_DATA_MGT_RAW_2:constant Integer := 694; 
ERR_IMU_ALL_DATA_MGT_MGAUSS_2:constant Integer := 750; 
ERR_IMU_ALL_DATA_ACCEL_RAW_2:constant Integer := 806; 
ERR_IMU_ALL_DATA_ACCEL_MG_2:constant Integer := 862; 
ERR_IMU_ALL_DATA_GYRO_RAW_2:constant Integer := 918; 
ERR_IMU_ALL_DATA_GYRO_MDPS_2:constant Integer := 974; 
ERR_IMU_ALL_DATA_TEMP_RAW_2:constant Integer := 988; 
ERR_IMU_ALL_DATA_TEMP_CELSIUS_2:constant Integer := 1002; 
ERR_IMU_ALL_DATA_MGT_VALID_2:constant Integer := 1016; 
ERR_IMU_ALL_DATA_ACC_VALID_2:constant Integer := 1030; 
ERR_IMU_ALL_DATA_GYRO_VALID_2:constant Integer := 1044; 
ERR_IMU_ALL_DATA_TEMP_VALID_2:constant Integer := 1058; 
function asn1SccIMU_All_Data_IsConstraintValid(val : asn1SccIMU_All_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccIMU_Queue --------------------------------------------

-- asn1SccIMU_Queue_elem --------------------------------------------

type asn1SccIMU_Queue_elem is record 
    data : asn1SccIMU_All_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;


subtype asn1SccIMU_Queue_index is Integer range 1..50;
type asn1SccIMU_Queue_array is array (asn1SccIMU_Queue_index) of asn1SccIMU_Queue_elem;
type asn1SccIMU_Queue is  record
    Data  : asn1SccIMU_Queue_array;
end record;

function asn1SccIMU_Queue_elem_Equal(val1, val2 : asn1SccIMU_Queue_elem) return Boolean;

function asn1SccIMU_Queue_Equal(val1, val2 : asn1SccIMU_Queue) return Boolean;

function asn1SccIMU_Queue_elem_Init return asn1SccIMU_Queue_elem;
function asn1SccIMU_Queue_Init return asn1SccIMU_Queue;

ERR_IMU_QUEUE:constant Integer := 6140; 
ERR_IMU_QUEUE_ELM:constant Integer := 6133; 
ERR_IMU_QUEUE_ELM_DATA_2:constant Integer := 6098; 
ERR_IMU_QUEUE_ELM_GPS_TIME_2:constant Integer := 6112; 
ERR_IMU_QUEUE_ELM_MISSION_TIME_2:constant Integer := 6126; 
function asn1SccIMU_Queue_IsConstraintValid(val : asn1SccIMU_Queue) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTC74s_All_Data --------------------------------------------

-- asn1SccTC74s_All_Data_elem --------------------------------------------

type asn1SccTC74s_All_Data_elem is record 
    temperature : asn1SccT_Float;
    validity : asn1SccContent_Validity;
end record;


subtype asn1SccTC74s_All_Data_index is Integer range 1..5;
type asn1SccTC74s_All_Data_array is array (asn1SccTC74s_All_Data_index) of asn1SccTC74s_All_Data_elem;
type asn1SccTC74s_All_Data is  record
    Data  : asn1SccTC74s_All_Data_array;
end record;

function asn1SccTC74s_All_Data_elem_Equal(val1, val2 : asn1SccTC74s_All_Data_elem) return Boolean;

function asn1SccTC74s_All_Data_Equal(val1, val2 : asn1SccTC74s_All_Data) return Boolean;

function asn1SccTC74s_All_Data_elem_Init return asn1SccTC74s_All_Data_elem;
function asn1SccTC74s_All_Data_Init return asn1SccTC74s_All_Data;

ERR_TC74S_ALL_DATA:constant Integer := 1128; 
ERR_TC74S_ALL_DATA_ELM:constant Integer := 1121; 
ERR_TC74S_ALL_DATA_ELM_TEMPERATURE_2:constant Integer := 1100; 
ERR_TC74S_ALL_DATA_ELM_VALIDITY_2:constant Integer := 1114; 
function asn1SccTC74s_All_Data_IsConstraintValid(val : asn1SccTC74s_All_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccPT1000s_All_Data --------------------------------------------
-- asn1SccPT1000s_All_Data_validity --------------------------------------------


subtype asn1SccPT1000s_All_Data_validity_index is Integer range 1..7;
type asn1SccPT1000s_All_Data_validity_array is array (asn1SccPT1000s_All_Data_validity_index) of asn1SccContent_Validity;
type asn1SccPT1000s_All_Data_validity is  record
    Data  : asn1SccPT1000s_All_Data_validity_array;
end record;

type asn1SccPT1000s_All_Data is record 
    raw : asn1SccPT1000s_Raw_Data;
    celsius : asn1SccPT1000s_Celsius_Data;
    validity : asn1SccPT1000s_All_Data_validity;
end record;


function asn1SccPT1000s_All_Data_validity_Equal(val1, val2 : asn1SccPT1000s_All_Data_validity) return Boolean;

function asn1SccPT1000s_All_Data_Equal(val1, val2 : asn1SccPT1000s_All_Data) return Boolean;

function asn1SccPT1000s_All_Data_validity_Init return asn1SccPT1000s_All_Data_validity;
function asn1SccPT1000s_All_Data_Init return asn1SccPT1000s_All_Data;

ERR_PT1000S_ALL_DATA:constant Integer := 1317; 
ERR_PT1000S_ALL_DATA_RAW_2:constant Integer := 1261; 
ERR_PT1000S_ALL_DATA_CELSIUS_2:constant Integer := 1289; 
ERR_PT1000S_ALL_DATA_VALIDITY:constant Integer := 1310; 
ERR_PT1000S_ALL_DATA_VALIDITY_ELM_2:constant Integer := 1303; 
function asn1SccPT1000s_All_Data_IsConstraintValid(val : asn1SccPT1000s_All_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccPS_All_Data --------------------------------------------

type asn1SccPS_All_Data is record 
    calib : asn1SccPS_Calibration_Data;
    raw : asn1SccPS_Raw_Data;
    processed : asn1SccPS_Processed_Data;
    validity : asn1SccContent_Validity;
end record;


function asn1SccPS_All_Data_Equal(val1, val2 : asn1SccPS_All_Data) return Boolean;

function asn1SccPS_All_Data_Init return asn1SccPS_All_Data;

ERR_PS_ALL_DATA:constant Integer := 1849; 
ERR_PS_ALL_DATA_CALIB_2:constant Integer := 1744; 
ERR_PS_ALL_DATA_RAW_2:constant Integer := 1786; 
ERR_PS_ALL_DATA_PROCESSED_2:constant Integer := 1828; 
ERR_PS_ALL_DATA_VALIDITY_2:constant Integer := 1842; 
function asn1SccPS_All_Data_IsConstraintValid(val : asn1SccPS_All_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccHeater_Data --------------------------------------------

type asn1SccHeater_Data is record 
    power_watts : asn1SccT_Float;
    validity : asn1SccContent_Validity;
end record;


function asn1SccHeater_Data_Equal(val1, val2 : asn1SccHeater_Data) return Boolean;

function asn1SccHeater_Data_Init return asn1SccHeater_Data;

ERR_HEATER_DATA:constant Integer := 1884; 
ERR_HEATER_DATA_POWER_WATTS_2:constant Integer := 1863; 
ERR_HEATER_DATA_VALIDITY_2:constant Integer := 1877; 
function asn1SccHeater_Data_IsConstraintValid(val : asn1SccHeater_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccOBSW_DP_Data --------------------------------------------
-- asn1SccOBSW_DP_Data_gps --------------------------------------------

type asn1SccOBSW_DP_Data_gps is record 
    data : asn1SccGPS_PVT;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_Data_imu --------------------------------------------

type asn1SccOBSW_DP_Data_imu is record 
    data : asn1SccIMU_All_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_Data_tc74s --------------------------------------------

type asn1SccOBSW_DP_Data_tc74s is record 
    data : asn1SccTC74s_All_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_Data_pt1000s --------------------------------------------

type asn1SccOBSW_DP_Data_pt1000s is record 
    data : asn1SccPT1000s_All_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_Data_ps1 --------------------------------------------

type asn1SccOBSW_DP_Data_ps1 is record 
    data : asn1SccPS_All_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_Data_ps2 --------------------------------------------

type asn1SccOBSW_DP_Data_ps2 is record 
    data : asn1SccPS_All_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_Data_heater1 --------------------------------------------

type asn1SccOBSW_DP_Data_heater1 is record 
    data : asn1SccHeater_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_Data_heater2 --------------------------------------------

type asn1SccOBSW_DP_Data_heater2 is record 
    data : asn1SccHeater_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_Data_anemometer --------------------------------------------

type asn1SccOBSW_DP_Data_anemometer is record 
    data : asn1SccT_UInt64;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;


type asn1SccOBSW_DP_Data_exist is record
    gps:adaasn1rtl.bit;
    imu:adaasn1rtl.bit;
    tc74s:adaasn1rtl.bit;
    pt1000s:adaasn1rtl.bit;
    ps1:adaasn1rtl.bit;
    ps2:adaasn1rtl.bit;
    heater1:adaasn1rtl.bit;
    heater2:adaasn1rtl.bit;
    anemometer:adaasn1rtl.bit;
end record with Pack;

for asn1SccOBSW_DP_Data_exist'Size use ((9 - 1) / System.Word_Size + 1) * System.Word_Size;
type asn1SccOBSW_DP_Data is record 
    gps : asn1SccOBSW_DP_Data_gps;
    imu : asn1SccOBSW_DP_Data_imu;
    tc74s : asn1SccOBSW_DP_Data_tc74s;
    pt1000s : asn1SccOBSW_DP_Data_pt1000s;
    ps1 : asn1SccOBSW_DP_Data_ps1;
    ps2 : asn1SccOBSW_DP_Data_ps2;
    heater1 : asn1SccOBSW_DP_Data_heater1;
    heater2 : asn1SccOBSW_DP_Data_heater2;
    anemometer : asn1SccOBSW_DP_Data_anemometer;
    
    Exist : asn1SccOBSW_DP_Data_exist;

end record;


function asn1SccOBSW_DP_Data_gps_Equal(val1, val2 : asn1SccOBSW_DP_Data_gps) return Boolean;

function asn1SccOBSW_DP_Data_imu_Equal(val1, val2 : asn1SccOBSW_DP_Data_imu) return Boolean;

function asn1SccOBSW_DP_Data_tc74s_Equal(val1, val2 : asn1SccOBSW_DP_Data_tc74s) return Boolean;

function asn1SccOBSW_DP_Data_pt1000s_Equal(val1, val2 : asn1SccOBSW_DP_Data_pt1000s) return Boolean;

function asn1SccOBSW_DP_Data_ps1_Equal(val1, val2 : asn1SccOBSW_DP_Data_ps1) return Boolean;

function asn1SccOBSW_DP_Data_ps2_Equal(val1, val2 : asn1SccOBSW_DP_Data_ps2) return Boolean;

function asn1SccOBSW_DP_Data_heater1_Equal(val1, val2 : asn1SccOBSW_DP_Data_heater1) return Boolean;

function asn1SccOBSW_DP_Data_heater2_Equal(val1, val2 : asn1SccOBSW_DP_Data_heater2) return Boolean;

function asn1SccOBSW_DP_Data_anemometer_Equal(val1, val2 : asn1SccOBSW_DP_Data_anemometer) return Boolean;

function asn1SccOBSW_DP_Data_Equal(val1, val2 : asn1SccOBSW_DP_Data) return Boolean;

function asn1SccOBSW_DP_Data_gps_Init return asn1SccOBSW_DP_Data_gps;
function asn1SccOBSW_DP_Data_imu_Init return asn1SccOBSW_DP_Data_imu;
function asn1SccOBSW_DP_Data_tc74s_Init return asn1SccOBSW_DP_Data_tc74s;
function asn1SccOBSW_DP_Data_pt1000s_Init return asn1SccOBSW_DP_Data_pt1000s;
function asn1SccOBSW_DP_Data_ps1_Init return asn1SccOBSW_DP_Data_ps1;
function asn1SccOBSW_DP_Data_ps2_Init return asn1SccOBSW_DP_Data_ps2;
function asn1SccOBSW_DP_Data_heater1_Init return asn1SccOBSW_DP_Data_heater1;
function asn1SccOBSW_DP_Data_heater2_Init return asn1SccOBSW_DP_Data_heater2;
function asn1SccOBSW_DP_Data_anemometer_Init return asn1SccOBSW_DP_Data_anemometer;
function asn1SccOBSW_DP_Data_Init return asn1SccOBSW_DP_Data;

ERR_OBSW_DP_DATA:constant Integer := 3837; 
ERR_OBSW_DP_DATA_GPS:constant Integer := 2269; 
ERR_OBSW_DP_DATA_GPS_DATA_2:constant Integer := 2234; 
ERR_OBSW_DP_DATA_GPS_GPS_TIME_2:constant Integer := 2248; 
ERR_OBSW_DP_DATA_GPS_MISSION_TIME_2:constant Integer := 2262; 
ERR_OBSW_DP_DATA_IMU:constant Integer := 2738; 
ERR_OBSW_DP_DATA_IMU_DATA_2:constant Integer := 2703; 
ERR_OBSW_DP_DATA_IMU_GPS_TIME_2:constant Integer := 2717; 
ERR_OBSW_DP_DATA_IMU_MISSION_TIME_2:constant Integer := 2731; 
ERR_OBSW_DP_DATA_TC74S:constant Integer := 2822; 
ERR_OBSW_DP_DATA_TC74S_DATA_2:constant Integer := 2787; 
ERR_OBSW_DP_DATA_TC74S_GPS_TIME_2:constant Integer := 2801; 
ERR_OBSW_DP_DATA_TC74S_MISSION_TIME_2:constant Integer := 2815; 
ERR_OBSW_DP_DATA_PT1000S:constant Integer := 2969; 
ERR_OBSW_DP_DATA_PT1000S_DATA_2:constant Integer := 2934; 
ERR_OBSW_DP_DATA_PT1000S_GPS_TIME_2:constant Integer := 2948; 
ERR_OBSW_DP_DATA_PT1000S_MISSION_TIME_2:constant Integer := 2962; 
ERR_OBSW_DP_DATA_PS1:constant Integer := 3298; 
ERR_OBSW_DP_DATA_PS1_DATA_2:constant Integer := 3263; 
ERR_OBSW_DP_DATA_PS1_GPS_TIME_2:constant Integer := 3277; 
ERR_OBSW_DP_DATA_PS1_MISSION_TIME_2:constant Integer := 3291; 
ERR_OBSW_DP_DATA_PS2:constant Integer := 3627; 
ERR_OBSW_DP_DATA_PS2_DATA_2:constant Integer := 3592; 
ERR_OBSW_DP_DATA_PS2_GPS_TIME_2:constant Integer := 3606; 
ERR_OBSW_DP_DATA_PS2_MISSION_TIME_2:constant Integer := 3620; 
ERR_OBSW_DP_DATA_HEATER1:constant Integer := 3704; 
ERR_OBSW_DP_DATA_HEATER1_DATA_2:constant Integer := 3669; 
ERR_OBSW_DP_DATA_HEATER1_GPS_TIME_2:constant Integer := 3683; 
ERR_OBSW_DP_DATA_HEATER1_MISSION_TIME_2:constant Integer := 3697; 
ERR_OBSW_DP_DATA_HEATER2:constant Integer := 3781; 
ERR_OBSW_DP_DATA_HEATER2_DATA_2:constant Integer := 3746; 
ERR_OBSW_DP_DATA_HEATER2_GPS_TIME_2:constant Integer := 3760; 
ERR_OBSW_DP_DATA_HEATER2_MISSION_TIME_2:constant Integer := 3774; 
ERR_OBSW_DP_DATA_ANEMOMETER:constant Integer := 3830; 
ERR_OBSW_DP_DATA_ANEMOMETER_DATA_2:constant Integer := 3795; 
ERR_OBSW_DP_DATA_ANEMOMETER_GPS_TIME_2:constant Integer := 3809; 
ERR_OBSW_DP_DATA_ANEMOMETER_MISSION_TIME_2:constant Integer := 3823; 
function asn1SccOBSW_DP_Data_IsConstraintValid(val : asn1SccOBSW_DP_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccOBSW_DP_SingleData --------------------------------------------
-- asn1SccOBSW_DP_SingleData_gps --------------------------------------------

type asn1SccOBSW_DP_SingleData_gps is record 
    data : asn1SccGPS_PVT;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_SingleData_imu --------------------------------------------

type asn1SccOBSW_DP_SingleData_imu is record 
    data : asn1SccIMU_All_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_SingleData_tc74s --------------------------------------------

type asn1SccOBSW_DP_SingleData_tc74s is record 
    data : asn1SccTC74s_All_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_SingleData_pt1000s --------------------------------------------

type asn1SccOBSW_DP_SingleData_pt1000s is record 
    data : asn1SccPT1000s_All_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_SingleData_ps1 --------------------------------------------

type asn1SccOBSW_DP_SingleData_ps1 is record 
    data : asn1SccPS_All_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_SingleData_ps2 --------------------------------------------

type asn1SccOBSW_DP_SingleData_ps2 is record 
    data : asn1SccPS_All_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_SingleData_heater1 --------------------------------------------

type asn1SccOBSW_DP_SingleData_heater1 is record 
    data : asn1SccHeater_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_SingleData_heater2 --------------------------------------------

type asn1SccOBSW_DP_SingleData_heater2 is record 
    data : asn1SccHeater_Data;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;

-- asn1SccOBSW_DP_SingleData_anemometer --------------------------------------------

type asn1SccOBSW_DP_SingleData_anemometer is record 
    data : asn1SccT_UInt64;
    gps_time : asn1SccT_Double;
    mission_time : asn1SccT_Double;
end record;


subtype asn1SccOBSW_DP_SingleData_index_range is Integer range 0..8;

type asn1SccOBSW_DP_SingleData_selection is (gps_PRESENT, imu_PRESENT, tc74s_PRESENT, pt1000s_PRESENT, ps1_PRESENT, ps2_PRESENT, heater1_PRESENT, heater2_PRESENT, anemometer_PRESENT);
for asn1SccOBSW_DP_SingleData_selection use
    (gps_PRESENT => 1, imu_PRESENT => 2, tc74s_PRESENT => 3, pt1000s_PRESENT => 4, ps1_PRESENT => 5, ps2_PRESENT => 6, heater1_PRESENT => 7, heater2_PRESENT => 8, anemometer_PRESENT => 9);
for asn1SccOBSW_DP_SingleData_selection'Size use 32;

type asn1SccOBSW_DP_SingleData(kind : asn1SccOBSW_DP_SingleData_selection:= gps_PRESENT) is 
record
    case kind is
    when gps_PRESENT =>
            gps: asn1SccOBSW_DP_SingleData_gps;
    when imu_PRESENT =>
            imu: asn1SccOBSW_DP_SingleData_imu;
    when tc74s_PRESENT =>
            tc74s: asn1SccOBSW_DP_SingleData_tc74s;
    when pt1000s_PRESENT =>
            pt1000s: asn1SccOBSW_DP_SingleData_pt1000s;
    when ps1_PRESENT =>
            ps1: asn1SccOBSW_DP_SingleData_ps1;
    when ps2_PRESENT =>
            ps2: asn1SccOBSW_DP_SingleData_ps2;
    when heater1_PRESENT =>
            heater1: asn1SccOBSW_DP_SingleData_heater1;
    when heater2_PRESENT =>
            heater2: asn1SccOBSW_DP_SingleData_heater2;
    when anemometer_PRESENT =>
            anemometer: asn1SccOBSW_DP_SingleData_anemometer;
    end case;
end record;

for asn1SccOBSW_DP_SingleData use 
record
    kind at 0 range 0..31;
end record;

function asn1SccOBSW_DP_SingleData_gps_Equal(val1, val2 : asn1SccOBSW_DP_SingleData_gps) return Boolean;

function asn1SccOBSW_DP_SingleData_imu_Equal(val1, val2 : asn1SccOBSW_DP_SingleData_imu) return Boolean;

function asn1SccOBSW_DP_SingleData_tc74s_Equal(val1, val2 : asn1SccOBSW_DP_SingleData_tc74s) return Boolean;

function asn1SccOBSW_DP_SingleData_pt1000s_Equal(val1, val2 : asn1SccOBSW_DP_SingleData_pt1000s) return Boolean;

function asn1SccOBSW_DP_SingleData_ps1_Equal(val1, val2 : asn1SccOBSW_DP_SingleData_ps1) return Boolean;

function asn1SccOBSW_DP_SingleData_ps2_Equal(val1, val2 : asn1SccOBSW_DP_SingleData_ps2) return Boolean;

function asn1SccOBSW_DP_SingleData_heater1_Equal(val1, val2 : asn1SccOBSW_DP_SingleData_heater1) return Boolean;

function asn1SccOBSW_DP_SingleData_heater2_Equal(val1, val2 : asn1SccOBSW_DP_SingleData_heater2) return Boolean;

function asn1SccOBSW_DP_SingleData_anemometer_Equal(val1, val2 : asn1SccOBSW_DP_SingleData_anemometer) return Boolean;

function asn1SccOBSW_DP_SingleData_Equal(val1, val2 : asn1SccOBSW_DP_SingleData) return Boolean;

function asn1SccOBSW_DP_SingleData_gps_Init return asn1SccOBSW_DP_SingleData_gps;
function asn1SccOBSW_DP_SingleData_imu_Init return asn1SccOBSW_DP_SingleData_imu;
function asn1SccOBSW_DP_SingleData_tc74s_Init return asn1SccOBSW_DP_SingleData_tc74s;
function asn1SccOBSW_DP_SingleData_pt1000s_Init return asn1SccOBSW_DP_SingleData_pt1000s;
function asn1SccOBSW_DP_SingleData_ps1_Init return asn1SccOBSW_DP_SingleData_ps1;
function asn1SccOBSW_DP_SingleData_ps2_Init return asn1SccOBSW_DP_SingleData_ps2;
function asn1SccOBSW_DP_SingleData_heater1_Init return asn1SccOBSW_DP_SingleData_heater1;
function asn1SccOBSW_DP_SingleData_heater2_Init return asn1SccOBSW_DP_SingleData_heater2;
function asn1SccOBSW_DP_SingleData_anemometer_Init return asn1SccOBSW_DP_SingleData_anemometer;
function asn1SccOBSW_DP_SingleData_Init return asn1SccOBSW_DP_SingleData;

ERR_OBSW_DP_SINGLEDATA:constant Integer := 5664; 
ERR_OBSW_DP_SINGLEDATA_GPS:constant Integer := 4096; 
ERR_OBSW_DP_SINGLEDATA_GPS_DATA_2:constant Integer := 4061; 
ERR_OBSW_DP_SINGLEDATA_GPS_GPS_TIME_2:constant Integer := 4075; 
ERR_OBSW_DP_SINGLEDATA_GPS_MISSION_TIME_2:constant Integer := 4089; 
ERR_OBSW_DP_SINGLEDATA_IMU:constant Integer := 4565; 
ERR_OBSW_DP_SINGLEDATA_IMU_DATA_2:constant Integer := 4530; 
ERR_OBSW_DP_SINGLEDATA_IMU_GPS_TIME_2:constant Integer := 4544; 
ERR_OBSW_DP_SINGLEDATA_IMU_MISSION_TIME_2:constant Integer := 4558; 
ERR_OBSW_DP_SINGLEDATA_TC74S:constant Integer := 4649; 
ERR_OBSW_DP_SINGLEDATA_TC74S_DATA_2:constant Integer := 4614; 
ERR_OBSW_DP_SINGLEDATA_TC74S_GPS_TIME_2:constant Integer := 4628; 
ERR_OBSW_DP_SINGLEDATA_TC74S_MISSION_TIME_2:constant Integer := 4642; 
ERR_OBSW_DP_SINGLEDATA_PT1000S:constant Integer := 4796; 
ERR_OBSW_DP_SINGLEDATA_PT1000S_DATA_2:constant Integer := 4761; 
ERR_OBSW_DP_SINGLEDATA_PT1000S_GPS_TIME_2:constant Integer := 4775; 
ERR_OBSW_DP_SINGLEDATA_PT1000S_MISSION_TIME_2:constant Integer := 4789; 
ERR_OBSW_DP_SINGLEDATA_PS1:constant Integer := 5125; 
ERR_OBSW_DP_SINGLEDATA_PS1_DATA_2:constant Integer := 5090; 
ERR_OBSW_DP_SINGLEDATA_PS1_GPS_TIME_2:constant Integer := 5104; 
ERR_OBSW_DP_SINGLEDATA_PS1_MISSION_TIME_2:constant Integer := 5118; 
ERR_OBSW_DP_SINGLEDATA_PS2:constant Integer := 5454; 
ERR_OBSW_DP_SINGLEDATA_PS2_DATA_2:constant Integer := 5419; 
ERR_OBSW_DP_SINGLEDATA_PS2_GPS_TIME_2:constant Integer := 5433; 
ERR_OBSW_DP_SINGLEDATA_PS2_MISSION_TIME_2:constant Integer := 5447; 
ERR_OBSW_DP_SINGLEDATA_HEATER1:constant Integer := 5531; 
ERR_OBSW_DP_SINGLEDATA_HEATER1_DATA_2:constant Integer := 5496; 
ERR_OBSW_DP_SINGLEDATA_HEATER1_GPS_TIME_2:constant Integer := 5510; 
ERR_OBSW_DP_SINGLEDATA_HEATER1_MISSION_TIME_2:constant Integer := 5524; 
ERR_OBSW_DP_SINGLEDATA_HEATER2:constant Integer := 5608; 
ERR_OBSW_DP_SINGLEDATA_HEATER2_DATA_2:constant Integer := 5573; 
ERR_OBSW_DP_SINGLEDATA_HEATER2_GPS_TIME_2:constant Integer := 5587; 
ERR_OBSW_DP_SINGLEDATA_HEATER2_MISSION_TIME_2:constant Integer := 5601; 
ERR_OBSW_DP_SINGLEDATA_ANEMOMETER:constant Integer := 5657; 
ERR_OBSW_DP_SINGLEDATA_ANEMOMETER_DATA_2:constant Integer := 5622; 
ERR_OBSW_DP_SINGLEDATA_ANEMOMETER_GPS_TIME_2:constant Integer := 5636; 
ERR_OBSW_DP_SINGLEDATA_ANEMOMETER_MISSION_TIME_2:constant Integer := 5650; 
function asn1SccOBSW_DP_SingleData_IsConstraintValid(val : asn1SccOBSW_DP_SingleData) return adaasn1rtl.ASN1_RESULT;
-- asn1SccATT_GUI --------------------------------------------
-- asn1SccATT_GUI_imu --------------------------------------------

type asn1SccATT_GUI_imu is record 
    mgt_mgauss : asn1SccMGT_MilliGauss_Data;
    accel_mg : asn1SccACC_MilliG_Data;
    gyro_mdps : asn1SccGYRO_MilliDPS_Data;
    temp_celsius : asn1SccT_Float;
    mgt_valid : asn1SccContent_Validity;
    acc_valid : asn1SccContent_Validity;
    gyro_valid : asn1SccContent_Validity;
    temp_valid : asn1SccContent_Validity;
end record;


type asn1SccATT_GUI is record 
    gps : asn1SccGPS_PVT;
    gps_date_time : asn1SccDate_Time;
    imu : asn1SccATT_GUI_imu;
end record;


function asn1SccATT_GUI_imu_Equal(val1, val2 : asn1SccATT_GUI_imu) return Boolean;

function asn1SccATT_GUI_Equal(val1, val2 : asn1SccATT_GUI) return Boolean;

function asn1SccATT_GUI_imu_Init return asn1SccATT_GUI_imu;
function asn1SccATT_GUI_Init return asn1SccATT_GUI;

ERR_ATT_GUI:constant Integer := 8177; 
ERR_ATT_GUI_GPS_2:constant Integer := 7827; 
ERR_ATT_GUI_GPS_DATE_TIME_2:constant Integer := 7925; 
ERR_ATT_GUI_IMU:constant Integer := 8170; 
ERR_ATT_GUI_IMU_MGT_MGAUSS_2:constant Integer := 7981; 
ERR_ATT_GUI_IMU_ACCEL_MG_2:constant Integer := 8037; 
ERR_ATT_GUI_IMU_GYRO_MDPS_2:constant Integer := 8093; 
ERR_ATT_GUI_IMU_TEMP_CELSIUS_2:constant Integer := 8107; 
ERR_ATT_GUI_IMU_MGT_VALID_2:constant Integer := 8121; 
ERR_ATT_GUI_IMU_ACC_VALID_2:constant Integer := 8135; 
ERR_ATT_GUI_IMU_GYRO_VALID_2:constant Integer := 8149; 
ERR_ATT_GUI_IMU_TEMP_VALID_2:constant Integer := 8163; 
function asn1SccATT_GUI_IsConstraintValid(val : asn1SccATT_GUI) return adaasn1rtl.ASN1_RESULT;
-- asn1SccPS_GUI --------------------------------------------

type asn1SccPS_GUI is record 
    pressure_mbar : asn1SccT_Double;
    temperature_celsius : asn1SccT_Double;
    validity : asn1SccContent_Validity;
end record;


function asn1SccPS_GUI_Equal(val1, val2 : asn1SccPS_GUI) return Boolean;

function asn1SccPS_GUI_Init return asn1SccPS_GUI;

ERR_PS_GUI:constant Integer := 8226; 
ERR_PS_GUI_PRESSURE_MBAR_2:constant Integer := 8191; 
ERR_PS_GUI_TEMPERATURE_CELSIUS_2:constant Integer := 8205; 
ERR_PS_GUI_VALIDITY_2:constant Integer := 8219; 
function asn1SccPS_GUI_IsConstraintValid(val : asn1SccPS_GUI) return adaasn1rtl.ASN1_RESULT;
-- asn1SccENV_GUI --------------------------------------------
-- asn1SccENV_GUI_anemometer --------------------------------------------

type asn1SccENV_GUI_anemometer is record 
    global_counter : asn1SccT_UInt64;
    temperature_celsius : asn1SccT_Float;
    temperature_validity : asn1SccContent_Validity;
end record;


type asn1SccENV_GUI is record 
    pressure_sensor_1 : asn1SccPS_GUI;
    pressure_sensor_2 : asn1SccPS_GUI;
    anemometer : asn1SccENV_GUI_anemometer;
    heater : asn1SccHeater_Data;
end record;


function asn1SccENV_GUI_anemometer_Equal(val1, val2 : asn1SccENV_GUI_anemometer) return Boolean;

function asn1SccENV_GUI_Equal(val1, val2 : asn1SccENV_GUI) return Boolean;

function asn1SccENV_GUI_anemometer_Init return asn1SccENV_GUI_anemometer;
function asn1SccENV_GUI_Init return asn1SccENV_GUI;

ERR_ENV_GUI:constant Integer := 8436; 
ERR_ENV_GUI_PRESSURE_SENSOR_1_2:constant Integer := 8282; 
ERR_ENV_GUI_PRESSURE_SENSOR_2_2:constant Integer := 8338; 
ERR_ENV_GUI_ANEMOMETER:constant Integer := 8387; 
ERR_ENV_GUI_ANEMOMETER_GLOBAL_COUNTER_2:constant Integer := 8352; 
ERR_ENV_GUI_ANEMOMETER_TEMPERATURE_CELSIUS_2:constant Integer := 8366; 
ERR_ENV_GUI_ANEMOMETER_TEMPERATURE_VALIDITY_2:constant Integer := 8380; 
ERR_ENV_GUI_HEATER_2:constant Integer := 8429; 
function asn1SccENV_GUI_IsConstraintValid(val : asn1SccENV_GUI) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccHeater_On_Off_index_range is Integer range 0..1;
type asn1SccHeater_On_Off is (asn1Sccon, asn1Sccoff) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccHeater_On_Off use
    (asn1Sccon => 0, asn1Sccoff => 1);

function asn1SccHeater_On_Off_Equal(val1, val2 : asn1SccHeater_On_Off) return Boolean;

function asn1SccHeater_On_Off_Init return asn1SccHeater_On_Off;

ERR_HEATER_ON_OFF:constant Integer := 1891; 
function asn1SccHeater_On_Off_IsConstraintValid(val : asn1SccHeater_On_Off) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccHTL_State_index_range is Integer range 0..5;
type asn1SccHTL_State is (asn1Scca1, asn1Scca2, asn1Sccf1, asn1Sccf2, asn1Sccf3, asn1Sccerror) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccHTL_State use
    (asn1Scca1 => 0, asn1Scca2 => 1, asn1Sccf1 => 2, asn1Sccf2 => 3, asn1Sccf3 => 4, asn1Sccerror => 5);

function asn1SccHTL_State_Equal(val1, val2 : asn1SccHTL_State) return Boolean;

function asn1SccHTL_State_Init return asn1SccHTL_State;

ERR_HTL_STATE:constant Integer := 1898; 
function asn1SccHTL_State_IsConstraintValid(val : asn1SccHTL_State) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTM --------------------------------------------
-- asn1SccTM_imu --------------------------------------------

type asn1SccTM_imu is record 
    mgt_mgauss : asn1SccMGT_MilliGauss_Data;
    accel_mg : asn1SccACC_MilliG_Data;
    gyro_mdps : asn1SccGYRO_MilliDPS_Data;
    temp_celsius : asn1SccT_Float;
    mgt_valid : asn1SccContent_Validity;
    acc_valid : asn1SccContent_Validity;
    gyro_valid : asn1SccContent_Validity;
    temp_valid : asn1SccContent_Validity;
end record;


type asn1SccTM is record 
    state_htl : asn1SccHTL_State;
    heater1 : asn1SccHeater_Data;
    heater2 : asn1SccHeater_Data;
    tc74s : asn1SccTC74s_All_Data;
    pt1000s : asn1SccPT1000s_All_Data;
    gps : asn1SccGPS_PVT;
    imu : asn1SccTM_imu;
    ps1 : asn1SccPS_Processed_Data;
    ps2 : asn1SccPS_Processed_Data;
    ps1_validity : asn1SccContent_Validity;
    ps2_validity : asn1SccContent_Validity;
    anemometer : asn1SccT_UInt64;
end record;


function asn1SccTM_imu_Equal(val1, val2 : asn1SccTM_imu) return Boolean;

function asn1SccTM_Equal(val1, val2 : asn1SccTM) return Boolean;

function asn1SccTM_imu_Init return asn1SccTM_imu;
function asn1SccTM_Init return asn1SccTM;

ERR_TM:constant Integer := 6994; 
ERR_TM_STATE_HTL_2:constant Integer := 6154; 
ERR_TM_HEATER1_2:constant Integer := 6196; 
ERR_TM_HEATER2_2:constant Integer := 6238; 
ERR_TM_TC74S_2:constant Integer := 6287; 
ERR_TM_PT1000S_2:constant Integer := 6399; 
ERR_TM_GPS_2:constant Integer := 6616; 
ERR_TM_IMU:constant Integer := 6861; 
ERR_TM_IMU_MGT_MGAUSS_2:constant Integer := 6672; 
ERR_TM_IMU_ACCEL_MG_2:constant Integer := 6728; 
ERR_TM_IMU_GYRO_MDPS_2:constant Integer := 6784; 
ERR_TM_IMU_TEMP_CELSIUS_2:constant Integer := 6798; 
ERR_TM_IMU_MGT_VALID_2:constant Integer := 6812; 
ERR_TM_IMU_ACC_VALID_2:constant Integer := 6826; 
ERR_TM_IMU_GYRO_VALID_2:constant Integer := 6840; 
ERR_TM_IMU_TEMP_VALID_2:constant Integer := 6854; 
ERR_TM_PS1_2:constant Integer := 6903; 
ERR_TM_PS2_2:constant Integer := 6945; 
ERR_TM_PS1_VALIDITY_2:constant Integer := 6959; 
ERR_TM_PS2_VALIDITY_2:constant Integer := 6973; 
ERR_TM_ANEMOMETER_2:constant Integer := 6987; 
function asn1SccTM_IsConstraintValid(val : asn1SccTM) return adaasn1rtl.ASN1_RESULT;
-- asn1SccHTL_GUI --------------------------------------------
-- asn1SccHTL_GUI_pt1000s --------------------------------------------
-- asn1SccHTL_GUI_pt1000s_validity --------------------------------------------


subtype asn1SccHTL_GUI_pt1000s_validity_index is Integer range 1..6;
type asn1SccHTL_GUI_pt1000s_validity_array is array (asn1SccHTL_GUI_pt1000s_validity_index) of asn1SccContent_Validity;
type asn1SccHTL_GUI_pt1000s_validity is  record
    Data  : asn1SccHTL_GUI_pt1000s_validity_array;
end record;

type asn1SccHTL_GUI_pt1000s is record 
    aire_abajo : asn1SccT_Float;
    aire_arriba : asn1SccT_Float;
    placa_abajo : asn1SccT_Float;
    placa_arriba : asn1SccT_Float;
    infinito : asn1SccT_Float;
    exterior : asn1SccT_Float;
    validity : asn1SccHTL_GUI_pt1000s_validity;
end record;

-- asn1SccHTL_GUI_tc74s --------------------------------------------
-- asn1SccHTL_GUI_tc74s_validity --------------------------------------------


subtype asn1SccHTL_GUI_tc74s_validity_index is Integer range 1..5;
type asn1SccHTL_GUI_tc74s_validity_array is array (asn1SccHTL_GUI_tc74s_validity_index) of asn1SccContent_Validity;
type asn1SccHTL_GUI_tc74s_validity is  record
    Data  : asn1SccHTL_GUI_tc74s_validity_array;
end record;

type asn1SccHTL_GUI_tc74s is record 
    x_positive : asn1SccT_Float;
    x_negative : asn1SccT_Float;
    y_positive : asn1SccT_Float;
    y_negative : asn1SccT_Float;
    z_techo : asn1SccT_Float;
    validity : asn1SccHTL_GUI_tc74s_validity;
end record;


type asn1SccHTL_GUI is record 
    state : asn1SccHTL_State;
    heater : asn1SccHeater_Data;
    delta_T : asn1SccT_Float;
    pt1000s : asn1SccHTL_GUI_pt1000s;
    tc74s : asn1SccHTL_GUI_tc74s;
end record;


function asn1SccHTL_GUI_pt1000s_validity_Equal(val1, val2 : asn1SccHTL_GUI_pt1000s_validity) return Boolean;

function asn1SccHTL_GUI_pt1000s_Equal(val1, val2 : asn1SccHTL_GUI_pt1000s) return Boolean;

function asn1SccHTL_GUI_tc74s_validity_Equal(val1, val2 : asn1SccHTL_GUI_tc74s_validity) return Boolean;

function asn1SccHTL_GUI_tc74s_Equal(val1, val2 : asn1SccHTL_GUI_tc74s) return Boolean;

function asn1SccHTL_GUI_Equal(val1, val2 : asn1SccHTL_GUI) return Boolean;

function asn1SccHTL_GUI_pt1000s_validity_Init return asn1SccHTL_GUI_pt1000s_validity;
function asn1SccHTL_GUI_pt1000s_Init return asn1SccHTL_GUI_pt1000s;
function asn1SccHTL_GUI_tc74s_validity_Init return asn1SccHTL_GUI_tc74s_validity;
function asn1SccHTL_GUI_tc74s_Init return asn1SccHTL_GUI_tc74s;
function asn1SccHTL_GUI_Init return asn1SccHTL_GUI;

ERR_HTL_GUI:constant Integer := 7519; 
ERR_HTL_GUI_STATE_2:constant Integer := 7246; 
ERR_HTL_GUI_HEATER_2:constant Integer := 7288; 
ERR_HTL_GUI_DELTA_T_2:constant Integer := 7302; 
ERR_HTL_GUI_PT1000S:constant Integer := 7414; 
ERR_HTL_GUI_PT1000S_AIRE_ABAJO_2:constant Integer := 7316; 
ERR_HTL_GUI_PT1000S_AIRE_ARRIBA_2:constant Integer := 7330; 
ERR_HTL_GUI_PT1000S_PLACA_ABAJO_2:constant Integer := 7344; 
ERR_HTL_GUI_PT1000S_PLACA_ARRIBA_2:constant Integer := 7358; 
ERR_HTL_GUI_PT1000S_INFINITO_2:constant Integer := 7372; 
ERR_HTL_GUI_PT1000S_EXTERIOR_2:constant Integer := 7386; 
ERR_HTL_GUI_PT1000S_VALIDITY:constant Integer := 7407; 
ERR_HTL_GUI_PT1000S_VALIDITY_ELM_2:constant Integer := 7400; 
ERR_HTL_GUI_TC74S:constant Integer := 7512; 
ERR_HTL_GUI_TC74S_X_POSITIVE_2:constant Integer := 7428; 
ERR_HTL_GUI_TC74S_X_NEGATIVE_2:constant Integer := 7442; 
ERR_HTL_GUI_TC74S_Y_POSITIVE_2:constant Integer := 7456; 
ERR_HTL_GUI_TC74S_Y_NEGATIVE_2:constant Integer := 7470; 
ERR_HTL_GUI_TC74S_Z_TECHO_2:constant Integer := 7484; 
ERR_HTL_GUI_TC74S_VALIDITY:constant Integer := 7505; 
ERR_HTL_GUI_TC74S_VALIDITY_ELM_2:constant Integer := 7498; 
function asn1SccHTL_GUI_IsConstraintValid(val : asn1SccHTL_GUI) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccOBSW_DP_Filter_index_range is Integer range 0..8;
type asn1SccOBSW_DP_Filter is (asn1Sccgps, asn1Sccimu, asn1Scctc74s, asn1Sccpt1000s, asn1Sccps1, asn1Sccps2, asn1Sccheater1, asn1Sccheater2, asn1Sccanemometer) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccOBSW_DP_Filter use
    (asn1Sccgps => 0, asn1Sccimu => 1, asn1Scctc74s => 2, asn1Sccpt1000s => 3, asn1Sccps1 => 4, asn1Sccps2 => 5, asn1Sccheater1 => 6, asn1Sccheater2 => 7, asn1Sccanemometer => 8);

function asn1SccOBSW_DP_Filter_Equal(val1, val2 : asn1SccOBSW_DP_Filter) return Boolean;

function asn1SccOBSW_DP_Filter_Init return asn1SccOBSW_DP_Filter;

ERR_OBSW_DP_FILTER:constant Integer := 3844; 
function asn1SccOBSW_DP_Filter_IsConstraintValid(val : asn1SccOBSW_DP_Filter) return adaasn1rtl.ASN1_RESULT;
pragma Warnings (Off, "there are no others");
n_of_TC74s : constant adaasn1rtl.Asn1Int:= 5;
n_of_pt1000 : constant adaasn1rtl.Asn1Int:= 7;
imu_queue_size : constant adaasn1rtl.Asn1Int:= 50; 
pragma Warnings (On, "there are no others");
private
   --# hide TASEC_LAB_B2SPACE_DATAVIEW;


end TASEC_LAB_B2SPACE_DATAVIEW;