// Body file for function I2CBusReader
// Generated by TASTE on 2021-05-31 23:54:29
// You can edit this file, it will not be overwritten
// Provided interfaces : ReadData
// Required interfaces : InsertCompleteGroup, getTime, readIMUdata, readPT1000Temps, readTC74Temps
// User-defined properties for this function:
//   |_ Taste::Active_Interfaces = any
//   |_ Taste::coordinates = 217935 165466 248655 188343
// Timers              : 

#include "i2cbusreader.h"
#include "i2cbusreader_state.h"
#include <iostream>
#include <unistd.h>

// Define and use function state inside this context structure
// avoid defining global/static variable elsewhere
i2cbusreader_state ctxt_i2cbusreader;

// Auxiliary functions, file scope:
////////////////////////////////////////////////////////////////////////////////

static inline void updateAccelAndGyro(void) {
    i2cbusreader_RI_readAccelAndGyro( &ctxt_i2cbusreader.dp_imu.imu.data.accel_mg , &ctxt_i2cbusreader.dp_imu.imu.data.accel_raw ,
                                      &ctxt_i2cbusreader.dp_imu.imu.data.acc_valid,
                                      &ctxt_i2cbusreader.dp_imu.imu.data.gyro_mdps , &ctxt_i2cbusreader.dp_imu.imu.data.gyro_raw,
                                      &ctxt_i2cbusreader.dp_imu.imu.data.gyro_valid);
    i2cbusreader_RI_getTime( &ctxt_i2cbusreader.dp_imu.imu.gps_time,
                             &ctxt_i2cbusreader.dp_imu.imu.mission_time );
}

static inline void updateTC74s(void) {
    i2cbusreader_RI_readTC74Temps( &ctxt_i2cbusreader.dp_temps.tc74s.data );
    i2cbusreader_RI_getTime( &ctxt_i2cbusreader.dp_temps.tc74s.gps_time,
                             &ctxt_i2cbusreader.dp_temps.tc74s.mission_time );
}

// Component implementation:
////////////////////////////////////////////////////////////////////////////////
void i2cbusreader_startup(void)
{
   // Write your initialisation code, but DO NOT CALL REQUIRED INTERFACES
    std::cout << "[I2CBusReader] Startup" << std::endl;
}

void i2cbusreader_PI_ReadData(void)
{
    if(ctxt_i2cbusreader.stopped_iic) {
        return;
    }
    
    
    int nIMUReads = 0;
    
    // All TC74 sensors:
    updateTC74s();
    
    // IMU and PT1000s:
    updateAccelAndGyro();
    i2cbusreader_RI_readIMUTemp( &ctxt_i2cbusreader.dp_imu.imu.data.temp_celsius,
                                 &ctxt_i2cbusreader.dp_imu.imu.data.temp_raw,
                                 &ctxt_i2cbusreader.dp_imu.imu.data.temp_valid );
    i2cbusreader_RI_readMgt( &ctxt_i2cbusreader.dp_imu.imu.data.mgt_mgauss,
                             &ctxt_i2cbusreader.dp_imu.imu.data.mgt_raw,
                             &ctxt_i2cbusreader.dp_imu.imu.data.mgt_valid );
    
    for (asn1SccT_UInt8 i = 0; i < (asn1SccT_UInt8) n_of_pt1000; ++i) {
        // One PT1000:
        i2cbusreader_RI_readOneTemp( &ctxt_i2cbusreader.dp_temps.pt1000s.data.celsius.arr[i],
                                     &ctxt_i2cbusreader.dp_temps.pt1000s.data.raw.arr[i].pt1000,
                                     &ctxt_i2cbusreader.dp_temps.pt1000s.data.raw.arr[i].vcc_volts,
                                     &ctxt_i2cbusreader.dp_temps.pt1000s.data.validity.arr[i], &i );
        // One IMU read:
        updateAccelAndGyro();
        i2cbusreader_RI_InsertCompleteGroup( &ctxt_i2cbusreader.dp_imu );
        nIMUReads++;
    }
    i2cbusreader_RI_getTime( &ctxt_i2cbusreader.dp_temps.pt1000s.gps_time,
                             &ctxt_i2cbusreader.dp_temps.pt1000s.mission_time );
    i2cbusreader_RI_InsertCompleteGroup( &ctxt_i2cbusreader.dp_temps );
    std::cout << "TEMPS @ " << std::to_string(ctxt_i2cbusreader.dp_temps.pt1000s.mission_time) << "''" << std::endl;
    
    // Complete IMU reads:
    for (; nIMUReads <= imu_queue_size ; nIMUReads++ ) {
        usleep(8500);
        updateAccelAndGyro();
        i2cbusreader_RI_InsertCompleteGroup( &ctxt_i2cbusreader.dp_imu );
    }
}

void i2cbusreader_PI_stop_IIC(void) {
    ctxt_i2cbusreader.stopped_iic = true;
    std::cout << "@@@@@@@@@@@@@@@@@@@@@@@ FIN IIC @@@@@@@@@@@@@@@@@@@@@@@@@@@" << std::endl;
    i2cbusreader_RI_stopIMU( );
    i2cbusreader_RI_stopPT1000s( );
    i2cbusreader_RI_stopTC74s( );
}
