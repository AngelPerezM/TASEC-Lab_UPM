// Body file for function Anemometer_Mock
// Generated by TASTE on 2021-07-07 01:34:48
// You can edit this file, it will not be overwritten
// Provided interfaces : nothing
// Required interfaces : 
// User-defined properties for this function:
//   |_ Taste::Active_Interfaces = any
//   |_ Taste::coordinates = 84250 156059 117163 179365
// Timers              : 

#include "anemometer_mock.h"
#include "anemometer_mock_state.h"
#include "Context-anemometer-mock.h"

#include <string>
#include <pigpiod_if2.h>

#include <iostream>

// Define and use function state inside this context structure
// avoid defining global/static variable elsewhere
anemometer_mock_state ctxt_anemometer_mock;

class AnemometerHW {
  private:
    int m_pigpioHdlr;
    // int m_range;
    // int m_realRange;
    float m_freq;
    unsigned m_outputPin;

    int m_waveid;
  
  public:
    AnemometerHW (float freq, unsigned outputPin) :
      m_freq(freq), m_outputPin(outputPin)
    {
      m_pigpioHdlr = pigpio_start(NULL, NULL);
      set_mode(m_pigpioHdlr, m_outputPin, PI_OUTPUT);
      gpio_write(m_pigpioHdlr, m_outputPin, 0);
    }

    ~AnemometerHW() {
      std::cout << "~Anemometer" << std::endl;
      gpio_write(m_pigpioHdlr, m_outputPin, PI_INPUT);
      pigpio_stop(m_pigpioHdlr);
    }

    void setFreq(float freq) {
      m_freq = freq;
      gpio_write(m_pigpioHdlr, m_outputPin, 0);
    }

    void startPulseGeneration() {
      uint32_t period_us = 1000000/m_freq;

      wave_clear(m_pigpioHdlr);

      gpioPulse_t pulse [2];
      pulse[0].gpioOn = (uint32_t) (1 << m_outputPin);
      pulse[0].gpioOff = 0;
      pulse[0].usDelay = period_us/2;

      pulse[1].gpioOn = 0;
      pulse[1].gpioOff = (uint32_t) (1 << m_outputPin);
      pulse[1].usDelay = period_us/2;

      wave_add_generic(m_pigpioHdlr, 2, pulse);
      m_waveid = wave_create(m_pigpioHdlr);

      wave_send_repeat(m_pigpioHdlr, m_waveid);
    }

    void stopPulseGeneration() {
      wave_tx_stop(m_pigpioHdlr);
      if (wave_delete(m_pigpioHdlr, m_waveid) != 0)
        std::cerr << "wave_delete" << std::endl;
      if(wave_clear(m_pigpioHdlr) != 0) {
        std::cerr << "wave_clear" << std::endl;
      }
    }

};

AnemometerHW *anemometer_hardware;

void anemometer_mock_startup(void)
{
   // Write your initialisation code, but DO NOT CALL REQUIRED INTERFACES
   std::cout << "[Anemometer_Mock] Startup" << std::endl;
   anemometer_hardware = new AnemometerHW(anemometer_mock_ctxt.freq_hz, anemometer_mock_ctxt.pin);
}

void anemometer_mock_PI_nothing(void)
{
    static int i = 0;
    if (i == 0) {
         anemometer_hardware->startPulseGeneration();
         i = 1;
    }
   // Write your code here
}


